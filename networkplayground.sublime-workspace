{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"wid",
				"width"
			],
			[
				"padd",
				"padding-bottom"
			],
			[
				"scrip",
				"script\tTag"
			],
			[
				"seque",
				"sequenceNumber"
			],
			[
				"char",
				"charIdx\tint"
			],
			[
				"for",
				"for(init-statement;condition;inc-expression){\nstatements\n}\tKeyWord"
			],
			[
				"get",
				"GetBufferPtr"
			],
			[
				"Pro",
				"ProcessPacket(InputMemoryBitStream &inInputStream, const SocketAddress &inFromAddress)\tvoid"
			],
			[
				"input",
				"inputStream"
			],
			[
				"em",
				"emplace(_Args &&__args...)\tvoid"
			],
			[
				"tota",
				"totalBytesRead\tint"
			],
			[
				"m",
				"mSocket"
			],
			[
				"game",
				"gameObject\tGameObject ν"
			],
			[
				"up",
				"updateMessage\tUpdateMessage ν"
			],
			[
				"New",
				"NewVector\tcore_lib.Vector2D ƒ"
			],
			[
				"pn",
				"physicsComponenet\tcore_lib.PhysicsComponent ν"
			],
			[
				"se",
				"SendMessage\terror ƒ"
			],
			[
				"cli",
				"clientData\t*Client ν"
			],
			[
				"raw",
				"rawJsonData\t ν"
			],
			[
				"rec",
				"rectData\tcore_lib.BaseRectData ν"
			],
			[
				"phy",
				"physicsSpace\tcore_lib.PhysicsSpace ν"
			],
			[
				"print",
				"Printf\t ƒ"
			],
			[
				"P",
				"PhysicsComponent\tstruct ʈ"
			],
			[
				"Ph",
				"PhysicsSpace\tstruct ʈ"
			],
			[
				"gameO",
				"gameObj\t*PhysicsComponent ν"
			],
			[
				"gam",
				"gameObj\t*PhysicsComponent ν"
			],
			[
				"floa",
				"float64\tbuilt-in ʈ"
			],
			[
				"flo",
				"float64\tbuilt-in ʈ"
			],
			[
				"ca",
				"canvasHeight〔variable〕"
			],
			[
				"sett",
				"settings〔variable〕"
			],
			[
				"pla",
				"player〔variable〕"
			],
			[
				"par",
				"parseNetworkGameObject"
			],
			[
				"obj",
				"object〔variable〕"
			],
			[
				"fun",
				"function〔keyword〕"
			],
			[
				"conn",
				"connectionData〔argument〕"
			],
			[
				"ne",
				"network\t package ρ"
			],
			[
				"s",
				"string\tbuilt-in ʈ"
			],
			[
				"clien",
				"clientData\tnetwork.ClientData ν"
			],
			[
				"prin",
				"Printf\t ƒ"
			],
			[
				"lo",
				"logger\t package ρ"
			],
			[
				"p",
				"Panicf\t ƒ"
			],
			[
				"pa",
				"Panicf\t ƒ"
			],
			[
				"Conn",
				"MakeConnectionMessage\tMessage ƒ"
			],
			[
				"con",
				"connectionMessage\tnetwork.Message ν"
			],
			[
				"make",
				"MakeConnectionMessage\tMessage ƒ"
			],
			[
				"clin",
				"clientData\t ν"
			],
			[
				"sen",
				"SendToClient\terror ƒ"
			],
			[
				"client",
				"clientData\t ν"
			],
			[
				"clie",
				"clientData\t*network.ClientData ν"
			],
			[
				"Me",
				"Message\tstruct ʈ"
			],
			[
				"Mess",
				"MessageQueue\tstruct ʈ"
			],
			[
				"new",
				"newClient\tClientData ν"
			],
			[
				"in",
				"InputQueue\t[]Message ν"
			],
			[
				"Cli",
				"ClientData\tstruct ʈ"
			],
			[
				"Prin",
				"Println\t ƒ"
			],
			[
				"web",
				"websockethandler\t package ρ"
			],
			[
				"Ad",
				"AddNewPlayer\tPlayer ƒ"
			],
			[
				"gae",
				"gameObjects\tmap[string]GameObject ν"
			],
			[
				"ba",
				"BaseRectMessage\tstruct ʈ"
			],
			[
				"build",
				"buildBaseRectData\tMessageRectData ƒ"
			],
			[
				"Oj",
				"ObjectRectData\tstruct ʈ"
			],
			[
				"ob",
				"ObjectRectData\tstruct ʈ"
			],
			[
				"Ob",
				"ObjectRectData\tstruct ʈ"
			],
			[
				"event",
				"eventMessage\tMessage ν"
			],
			[
				"broa",
				"broadcastMessages\t[]Message ν"
			],
			[
				"syn",
				"syncDataBytes\t[]byte ν"
			],
			[
				"mess",
				"message2\tMessage ν"
			],
			[
				"sy",
				"syncDataBytes\t[]byte ν"
			],
			[
				"mes",
				"messageJson\t[]byte ν"
			],
			[
				"bro",
				"broadcastBytes\t[]byte ν"
			],
			[
				"br",
				"broadcastBytes\t[]byte ν"
			],
			[
				"even",
				"event\tMessage ν"
			],
			[
				"add",
				"addBytes\t[]byte ν"
			],
			[
				"upda",
				"UpdateMessage\tstruct ʈ"
			],
			[
				"update",
				"updateBytes\t[]byte ν"
			],
			[
				"eventa",
				"eventName\tstring ν"
			],
			[
				"UPdate",
				"UpdateMessage\tstruct ʈ"
			],
			[
				"test",
				"testSlice\t[]Test ν"
			],
			[
				"Tes",
				"Tester\tstruct ʈ"
			],
			[
				"g",
				"GameObjects\tmap[string]GameObject ν"
			],
			[
				"i",
				"sourceId\tint ν"
			],
			[
				"eve",
				"eventSourceId\tint ν"
			],
			[
				"c",
				"client\t*websocket.Conn ν"
			],
			[
				"cl",
				"clients\tmap[*websocket.Conn]ClientData ν"
			],
			[
				"pro",
				"ProcessObjectEvents\tstring ƒ"
			],
			[
				"Pr",
				"Printf\t ƒ"
			],
			[
				"Syn",
				"SyncMessage\tstruct ʈ"
			],
			[
				"ru",
				"runHttpServer\t ƒ"
			],
			[
				"run",
				"runInteractiveMode\t ƒ"
			],
			[
				"err",
				"Error\t*log.Logger ν"
			],
			[
				"a",
				"RemoteAddr\tnet.Addr ƒ"
			],
			[
				"set",
				"SetOutput\t ƒ"
			],
			[
				"Upd",
				"UpdateMessage\tstruct ʈ"
			],
			[
				"Add",
				"AddRequest\tstruct ʈ"
			],
			[
				"Up",
				"UpdateMessage\tstruct ʈ"
			],
			[
				"updat",
				"updateBytes\t[]byte ν"
			],
			[
				"json",
				"jsonData\t ν"
			],
			[
				"Co",
				"channelCoordinator\tComunicationChannels ν"
			],
			[
				"time",
				"timeStep\tfloat64 ν"
			],
			[
				"ph",
				"PhysicsLoop\t ƒ"
			],
			[
				"Tick",
				"Ticker\tstruct ʈ"
			],
			[
				"pr",
				"Println\tn int, err error ƒ"
			],
			[
				"move",
				"moveChannel\tchan MoveRequest ν"
			],
			[
				"Read",
				"ReadCreatePlayerEvent\tPlayer ƒ"
			],
			[
				"data",
				"dataMessage\tAddRequest ν"
			],
			[
				"Move",
				"MoveRequest\tstruct ʈ"
			],
			[
				"Moev",
				"MoveRequest\tstruct ʈ"
			],
			[
				"Cle",
				"ClientMessage\tstruct ʈ"
			],
			[
				"ini",
				"initializeConnectionData\t ƒ"
			],
			[
				"imp",
				"import\timport (...) ʂ"
			],
			[
				"Make",
				"MakePlayerObjectFromJson\tPlayer ƒ"
			],
			[
				"Play",
				"PlayerControlledObject\tinterface ¡"
			],
			[
				"pl",
				"PlayerControlledObject\tinterface ¡"
			],
			[
				"Game",
				"GameObject\tinterface ¡"
			],
			[
				"Physi",
				"PhysicsComponent\tstruct ʈ"
			],
			[
				"Bas",
				"BasePhysicsObjData\tstruct ʈ"
			],
			[
				"PLay",
				"PlayerControlledObject\tinterface ¡"
			],
			[
				"send",
				"sendMoveEvent"
			],
			[
				"key",
				"keyListener"
			],
			[
				"fu",
				"function"
			],
			[
				"Mo",
				"MovableObject\tstruct ʈ"
			],
			[
				"x",
				"XVel\tint ν"
			],
			[
				"no",
				"Now\ttime.Time ƒ"
			],
			[
				"debu",
				"debugNetwork"
			],
			[
				"de",
				"debugDraw"
			],
			[
				"frame",
				"frameId"
			],
			[
				"this",
				"thisFrameFPS"
			],
			[
				"fram",
				"frameId"
			]
		]
	},
	"buffers":
	[
		{
			"file": "networkplayground.sublime-project",
			"settings":
			{
				"buffer_size": 359,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "CC := clang++\nLDFLAGS=\n# BASE_INC_FLAG=networkplayground/include/networking\n# BASE_INC_FLAG=networkplaygroundclient/include/networking\nBASE_INC_FLAG=-Inetworkplayground/include/\nCLIENT_INC_FLAG=-Inetworkplaygroundclient/include/\n\nEXECUTABLE=test\n\nCC_FLAGS=-std=c++11 $(BASE_INC_FLAG)\n\n# mark the main files so we can exclude them these during unit tests\nCLIENT_MAIN=networkplaygroundclient/src/main.cpp\nCLIENT_MAIN_OBJ=networkplaygroundclient/src/main.o\nSERVER_MAIN=networkplaygroundserver/src/main.cpp\nSERVER_MAIN_OBJ=networkplaygroundserver/src/main.o\n\n# Test data\nGTEST_INCLUDE=/opt/gtest/googletest/include/\nGTEST_LIB=/opt/gtest/lib/gtest_main.a\nTESTS_MAIN=unit_tests/main.cpp\nTESTS_MAIN_OBJ=unit_tests/main.o\nTEST_FLAGS=-std=c++11 -I $(GTEST_INCLUDE) -pthread $(GTEST_LIB)\nTEST_BASE_FILES=$(shell find networkplayground/tests -name '*.cpp')\n\n\nCPP_BASE := $(shell find networkplayground/src -name '*.cpp')\n# find all cpp files but exclude main.cpp, as we only want to compile the main\n# when running the client\nCPP_CLIENT := $(shell find networkplaygroundclient ! -path \"$(CLIENT_MAIN)\" -name '*.cpp')\nCPP_SERVER := $(shell find networkplaygroundserver ! -path \"$(SERVER_MAIN)\" -name '*.cpp')\n\n# BASE_OBJ_FILES := $(addprefix obj/base/,$(notdir $(CPP_BASE:.cpp=.o)))\nBASE_OBJ_FILES := $(patsubst %.cpp,%.o,$(CPP_BASE))\nCLIENT_OBJ_FILES := $(patsubst %.cpp,%.o,$(CPP_CLIENT))\nSERVER_OBJ_FILES := $(patsubst %.cpp,%.o,$(CPP_CLIENT))\n\n# .SUFFIXES: .o .h .c .hpp .cpp\n\nclient: $(BASE_OBJ_FILES) $(CLIENT_OBJ_FILES) $(CLIENT_MAIN_OBJ)\n\t$(CC) $^ -o bin/$@\n\nserver: $(BASE_OBJ_FILES) $(SERVER_OBJ_FILES) $(SERVER_MAIN_OBJ)\n\t$(CC) $^ -o bin/$@\n\nrun_tests: tests\n\tbin/tests\n\nrun_server: server\n\t@echo \"\\033[0;36mStarting Server...\\033[0m\"\n\t@bin/server\n\ntests: $(BASE_OBJ_FILES) $(CLIENT_OBJ_FILES) $(TESTS_MAIN_OBJ) $(TEST_BASE_FILES)\n\t$(CC) $(BASE_INC_FLAG) $(TEST_FLAGS) $^ -o bin/$@\n\n# TODO: Make this better?\nunit_tests/main.o: unit_tests/main.cpp\n\t$(CC) $(BASE_INC_FLAG) $(TEST_FLAGS) -c -o $@ $<\n\n%.o: %.cpp\n\t$(CC) $(CLIENT_INC_FLAG) $(CC_FLAGS) -c -o $@ $<\n\nclean:\n\tfind . -name '*.o' -delete\n\trm bin/*\n\n# list all targets in the make file\n.PHONY: list\nlist:\n\t@$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ \"^[#.]\") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | xargs\n",
			"file": "Makefile",
			"file_size": 2372,
			"file_write_time": 131356251860000000,
			"settings":
			{
				"buffer_size": 2371,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/include/networking/NetworkManager.h",
			"settings":
			{
				"buffer_size": 2934,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/networking/NetworkManager.cpp",
			"settings":
			{
				"buffer_size": 5335,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nBracketHighlighter\n------------------\n\n  # BracketHighlighter 2.18.0\n  \n  ## New\n  \n  - Added **experimental** option `show_offscreen_bracket_popup` for ST 3 version 3116+ to show a popup showing line context of other off screen bracket when hovering over visible bracket.  Also provides a link to jump to off screen bracket.  Disabled by default.  Depending on how it is received, it may stick around. See documentation for more info.\n\n  # BracketHighlighter 2.17.0\n  \n  ## New\n  \n  - Added `show_in_widgets` in `bh_core.sublime-settings` to allow bracket highlighting in widgets (such as regex search box).\n  \n  - If `show_in_widgets` is enabled, a plugin can prevent highlighting in an output panel (or other widget if the view can be targeted) by setting `bracket_highlighter.ignore` to `True` in the view settings.\n  \n  - Added CMake highlighting\n\n\nEvernote\n--------\n\n  What's new in v2.7.1\n  ====================\n  If you like this plugin and would like to support its development please consider donating through a [paypal donation].\n  \n  Check out the [wiki] for documentation. There is also a [gitter] chat room for additional support. \n  \n  + Fix: solved incompatibility with [Markdown Preview](https://packagecontrol.io/packages/Markdown%20Preview) plugin (fixes #119)\n  + Fix: multiple metadata headers now supported (thanks [@xdutaotao](https://github.com/bordaigorl/sublime-evernote/issues/127#issuecomment-208210297))\n  + Fix: long CSS for body now properly supported (fixes #128)\n  + Fix: url/filepath detection fixed for Windows (fixes #137, thanks @358463121)\n  + **Open note**: accept links as `note_guid` and offer options to load from clipboard/prompt (see [wiki](https://github.com/bordaigorl/sublime-evernote/wiki/The-Open-Note-Command))\n  + **Insert Note Link**: now accepts `template` and `to` arguments\n  \n  [paypal donation]: <https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=JFWLSUZYXUHAQ>\n  \n  [wiki]: <https://github.com/bordaigorl/sublime-evernote/wiki/>\n  [gitter]: <https://gitter.im/bordaigorl/sublime-evernote>\n  [special syntax]: <https://github.com/bordaigorl/sublime-evernote/wiki/Supported-Markdown>\n",
			"settings":
			{
				"buffer_size": 2210,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "test_commands.sh",
			"settings":
			{
				"buffer_size": 141,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundserver/src/main.cpp",
			"settings":
			{
				"buffer_size": 615,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"timing/Timing.h\"\n#include \"networking/StringUtils.h\"\n\n#if !_WIN32\n#include <chrono>\nusing namespace std::chrono;\n#endif\n\nTiming Timing::sInstance;\n\nnamespace\n{\n#if _WIN32\nLARGE_INTEGER sStartTime = {0};\n#else\nhigh_resolution_clock::time_point sStartTime;\n#endif\n}\n\nTiming::Timing()\n{\n#if _WIN32\n    LARGE_INTEGER perfFreq;\n    QueryPerformanceFrequency( &perfFreq );\n    mPerfCountDuration = 1.0 / perfFreq.QuadPart;\n\n    QueryPerformanceCounter( &sStartTime );\n\n    mLastFrameStartTime = GetTime();\n#else\n    sStartTime = high_resolution_clock::now();\n    LOG(\"Time is %f\", sStartTime)\n#endif\n}\n\nvoid Timing::Update()\n{\n\n    double currentTime = GetTime();\n\n    mDeltaTime = (float)( currentTime - mLastFrameStartTime );\n\n    mLastFrameStartTime = currentTime;\n    mFrameStartTimef = static_cast<float>( mLastFrameStartTime );\n    // LOG(\"currentTime %f, mDeltaTime %f, mLastFrameStartTime %f, mFrameStartTimef %f\", currentTime, mDeltaTime, mLastFrameStartTime, mFrameStartTimef);\n\n}\ndouble Timing::GetTime() const\n{\n#if _WIN32\n    LARGE_INTEGER curTime, timeSinceStart;\n    QueryPerformanceCounter( &curTime );\n\n    timeSinceStart.QuadPart = curTime.QuadPart - sStartTime.QuadPart;\n\n    return timeSinceStart.QuadPart * mPerfCountDuration;\n#else\n    auto now = high_resolution_clock::now();\n    auto ms = duration_cast<milliseconds>( now - sStartTime ).count();\n    // a little uncool to then convert into a double just to go back, but oh\n    // well.\n    return static_cast<double>( ms ) / 1000;\n#endif\n}",
			"file": "networkplayground/src/timing/Timing.cpp",
			"file_size": 1483,
			"file_write_time": 131361509490000000,
			"settings":
			{
				"buffer_size": 1517,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/include/timing/timing.h",
			"settings":
			{
				"buffer_size": 528,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/networking/SocketAddress.cpp",
			"settings":
			{
				"buffer_size": 538,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/include/IO/MemoryBitStream.h",
			"settings":
			{
				"buffer_size": 5613,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n#include <RoboCatClientPCH.h>\n\n#if _WIN32\nint WINAPI WinMain( _In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine, _In_ int nCmdShow )\n{\n    UNREFERENCED_PARAMETER( hPrevInstance );\n    UNREFERENCED_PARAMETER( lpCmdLine );\n    \n    if( Client::StaticInit() )\n    {\n        return Client::sInstance->Run();\n    }\n    else\n    {\n        SDL_Quit();\n        //error\n        return 1;\n    }\n    \n}\n#else\nconst char** __argv;\nint __argc;\nint main(int argc, const char** argv)\n{\n    __argc = argc;\n    __argv = argv;\n    \n    if( Client::StaticInit() )\n    {\n        return Client::sInstance->Run();\n    }\n    else\n    {\n        SDL_Quit();\n        //error\n        return 1;\n    }\n}\n#endif\n\nclass Client : public Engine\n{\npublic:\n    \n    static bool StaticInit( );\n    \nprotected:\n    \n    Client();\n    \n    virtual void\tDoFrame() override;\n    virtual void\tHandleEvent( SDL_Event* inEvent ) override;\n    \nprivate:\n    \n    \n    \n};\n\n\n#include <RoboCatClientPCH.h>\n\nbool Client::StaticInit() {\n    // Create the Client pointer first because it initializes SDL\n    Client *client = new Client();\n    \n    if (WindowManager::StaticInit() == false) {\n        return false;\n    }\n    \n    if (GraphicsDriver::StaticInit(WindowManager::sInstance->GetMainWindow()) ==\n        false) {\n        return false;\n    }\n    \n    TextureManager::StaticInit();\n    RenderManager::StaticInit();\n    InputManager::StaticInit();\n    \n    HUD::StaticInit();\n    \n    sInstance.reset(client);\n    \n    return true;\n}\n\nClient::Client() {\n    GameObjectRegistry::sInstance->RegisterCreationFunction(\n                                                            'RCAT', RoboCatClient::StaticCreate);\n    GameObjectRegistry::sInstance->RegisterCreationFunction(\n                                                            'MOUS', MouseClient::StaticCreate);\n    GameObjectRegistry::sInstance->RegisterCreationFunction(\n                                                            'YARN', YarnClient::StaticCreate);\n    \n    //\tstring destination = StringUtils::GetCommandLineArg( 1 );\n    string destination = \"127.0.0.1:45000\";\n    string name = StringUtils::GetCommandLineArg(2);\n    \n    SocketAddressPtr serverAddress =\n    SocketAddressFactory::CreateIPv4FromString(destination);\n    \n    NetworkManagerClient::StaticInit(*serverAddress, \"DUDUD\");\n    \n    // NetworkManagerClient::sInstance->SetDropPacketChance( 0.6f );\n    // NetworkManagerClient::sInstance->SetSimulatedLatency( 0.25f );\n    // NetworkManagerClient::sInstance->SetSimulatedLatency( 0.5f );\n    // NetworkManagerClient::sInstance->SetSimulatedLatency( 0.1f );\n}\n\nvoid Client::DoFrame() {\n    InputManager::sInstance->Update();\n    \n    Engine::DoFrame();\n    \n    NetworkManagerClient::sInstance->ProcessIncomingPackets();\n    \n    RenderManager::sInstance->Render();\n    \n    NetworkManagerClient::sInstance->SendOutgoingPackets();\n}\n\nvoid Client::HandleEvent(SDL_Event *inEvent) {\n    switch (inEvent->type) {\n        case SDL_KEYDOWN:\n            InputManager::sInstance->HandleInput(EIA_Pressed, inEvent->key.keysym.sym);\n            break;\n        case SDL_KEYUP:\n            InputManager::sInstance->HandleInput(EIA_Released, inEvent->key.keysym.sym);\n            break;\n        default:\n            break;\n    }\n}\n\n#include <RoboCatPCH.h>\n#include <SDL.h>\n#include <iostream>\n#include <time.h>\n\nstd::unique_ptr<Engine> Engine::sInstance;\n\nEngine::Engine() : mShouldKeepRunning(true) {\n    SocketUtil::StaticInit();\n    \n    srand(static_cast<uint32_t>(time(nullptr)));\n    \n    GameObjectRegistry::StaticInit();\n    \n    World::StaticInit();\n    \n    ScoreBoardManager::StaticInit();\n    \n    SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO);\n}\n\nEngine::~Engine() {\n    SocketUtil::CleanUp();\n    \n    SDL_Quit();\n}\n\nint Engine::Run() { return DoRunLoop(); }\n\nvoid Engine::HandleEvent(SDL_Event *inEvent) {\n    // Default implementation does nothing, up to derived classes to handle them,\n    // if they so choose\n    (void)inEvent;\n}\n\nint Engine::DoRunLoop() {\n    // Main message loop\n    bool quit = false;\n    SDL_Event event;\n    memset(&event, 0, sizeof(SDL_Event));\n    \n    while (!quit && mShouldKeepRunning) {\n        if (SDL_PollEvent(&event)) {\n            if (event.type == SDL_QUIT) {\n                quit = true;\n            } else {\n                HandleEvent(&event);\n            }\n        } else {\n            Timing::sInstance.Update();\n            std::cout << Timing::sInstance.GetTime() << std::endl;\n            \n            DoFrame();\n        }\n    }\n    \n    return event.type;\n}\n\nvoid Engine::DoFrame() { World::sInstance->Update(); }\n\n\n\n#include <RoboCatPCH.h>\n\n// zoom hardcoded at 100...if we want to lock players on screen, this could be\n// calculated from zoom\nconst float HALF_WORLD_HEIGHT = 3.6f;\nconst float HALF_WORLD_WIDTH = 6.4f;\n\nRoboCat::RoboCat()\n: GameObject(), mMaxRotationSpeed(5.f), mMaxLinearSpeed(50.f),\nmVelocity(Vector3::Zero), mWallRestitution(0.1f), mCatRestitution(0.1f),\nmThrustDir(0.f), mPlayerId(0), mIsShooting(false), mHealth(10) {\n    SetCollisionRadius(0.5f);\n}\n\nvoid RoboCat::ProcessInput(float inDeltaTime, const InputState &inInputState) {\n    // process our input....\n    \n    // turning...\n    float newRotation = GetRotation() +\n    inInputState.GetDesiredHorizontalDelta() *\n    mMaxRotationSpeed * inDeltaTime;\n    SetRotation(newRotation);\n    \n    // moving...\n    float inputForwardDelta = inInputState.GetDesiredVerticalDelta();\n    mThrustDir = inputForwardDelta;\n    \n    mIsShooting = inInputState.IsShooting();\n}\n\nvoid RoboCat::AdjustVelocityByThrust(float inDeltaTime) {\n    // just set the velocity based on the thrust direction -- no thrust will lead\n    // to 0 velocity\n    // simulating acceleration makes the client prediction a bit more complex\n    Vector3 forwardVector = GetForwardVector();\n    mVelocity = forwardVector * (mThrustDir * inDeltaTime * mMaxLinearSpeed);\n}\n\nvoid RoboCat::SimulateMovement(float inDeltaTime) {\n    // simulate us...\n    AdjustVelocityByThrust(inDeltaTime);\n    \n    if (mVelocity.mX != 0 || mVelocity.mY != 0) {\n        SetLocation(GetLocation() + mVelocity * inDeltaTime);\n    } else {\n        SetLocation(GetLocation() + mVelocity * inDeltaTime);\n    }\n    \n    ProcessCollisions();\n}\n\nvoid RoboCat::Update() {}\n\nvoid RoboCat::ProcessCollisions() {\n    // right now just bounce off the sides..\n    ProcessCollisionsWithScreenWalls();\n    \n    float sourceRadius = GetCollisionRadius();\n    Vector3 sourceLocation = GetLocation();\n    \n    // now let's iterate through the world and see what we hit...\n    // note: since there's a small number of objects in our game, this is fine.\n    // but in a real game, brute-force checking collisions against every other\n    // object is not efficient.\n    // it would be preferable to use a quad tree or some other structure to\n    // minimize the\n    // number of collisions that need to be tested.\n    for (auto goIt = World::sInstance->GetGameObjects().begin(),\n         end = World::sInstance->GetGameObjects().end();\n         goIt != end; ++goIt) {\n        GameObject *target = goIt->get();\n        if (target != this && !target->DoesWantToDie()) {\n            // simple collision test for spheres- are the radii summed less than the\n            // distance?\n            Vector3 targetLocation = target->GetLocation();\n            float targetRadius = target->GetCollisionRadius();\n            \n            Vector3 delta = targetLocation - sourceLocation;\n            float distSq = delta.LengthSq2D();\n            float collisionDist = (sourceRadius + targetRadius);\n            if (distSq < (collisionDist * collisionDist)) {\n                // first, tell the other guy there was a collision with a cat, so it can\n                // do something...\n                \n                if (target->HandleCollisionWithCat(this)) {\n                    // okay, you hit something!\n                    // so, project your location far enough that you're not colliding\n                    Vector3 dirToTarget = delta;\n                    dirToTarget.Normalize2D();\n                    Vector3 acceptableDeltaFromSourceToTarget =\n                    dirToTarget * collisionDist;\n                    // important note- we only move this cat. the other cat can take care\n                    // of moving itself\n                    SetLocation(targetLocation - acceptableDeltaFromSourceToTarget);\n                    \n                    Vector3 relVel = mVelocity;\n                    \n                    // if other object is a cat, it might have velocity, so there might be\n                    // relative velocity...\n                    RoboCat *targetCat = target->GetAsCat();\n                    if (targetCat) {\n                        relVel -= targetCat->mVelocity;\n                    }\n                    \n                    // got vel with dir between objects to figure out if they're moving\n                    // towards each other\n                    // and if so, the magnitude of the impulse ( since they're both just\n                    // balls )\n                    float relVelDotDir = Dot2D(relVel, dirToTarget);\n                    \n                    if (relVelDotDir > 0.f) {\n                        Vector3 impulse = relVelDotDir * dirToTarget;\n                        \n                        if (targetCat) {\n                            mVelocity -= impulse;\n                            mVelocity *= mCatRestitution;\n                        } else {\n                            mVelocity -= impulse * 2.f;\n                            mVelocity *= mWallRestitution;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nvoid RoboCat::ProcessCollisionsWithScreenWalls() {\n    Vector3 location = GetLocation();\n    float x = location.mX;\n    float y = location.mY;\n    \n    float vx = mVelocity.mX;\n    float vy = mVelocity.mY;\n    \n    float radius = GetCollisionRadius();\n    \n    // if the cat collides against a wall, the quick solution is to push it off\n    if ((y + radius) >= HALF_WORLD_HEIGHT && vy > 0) {\n        mVelocity.mY = -vy * mWallRestitution;\n        location.mY = HALF_WORLD_HEIGHT - radius;\n        SetLocation(location);\n    } else if (y <= (-HALF_WORLD_HEIGHT - radius) && vy < 0) {\n        mVelocity.mY = -vy * mWallRestitution;\n        location.mY = -HALF_WORLD_HEIGHT - radius;\n        SetLocation(location);\n    }\n    \n    if ((x + radius) >= HALF_WORLD_WIDTH && vx > 0) {\n        mVelocity.mX = -vx * mWallRestitution;\n        location.mX = HALF_WORLD_WIDTH - radius;\n        SetLocation(location);\n    } else if (x <= (-HALF_WORLD_WIDTH - radius) && vx < 0) {\n        mVelocity.mX = -vx * mWallRestitution;\n        location.mX = -HALF_WORLD_WIDTH - radius;\n        SetLocation(location);\n    }\n}\n\nuint32_t RoboCat::Write(OutputMemoryBitStream &inOutputStream,\n                        uint32_t inDirtyState) const {\n    uint32_t writtenState = 0;\n    \n    if (inDirtyState & ECRS_PlayerId) {\n        inOutputStream.Write((bool)true);\n        inOutputStream.Write(GetPlayerId());\n        \n        writtenState |= ECRS_PlayerId;\n    } else {\n        inOutputStream.Write((bool)false);\n    }\n    \n    if (inDirtyState & ECRS_Pose) {\n        inOutputStream.Write((bool)true);\n        \n        Vector3 velocity = mVelocity;\n        inOutputStream.Write(velocity.mX);\n        inOutputStream.Write(velocity.mY);\n        \n        Vector3 location = GetLocation();\n        inOutputStream.Write(location.mX);\n        inOutputStream.Write(location.mY);\n        \n        inOutputStream.Write(GetRotation());\n        \n        writtenState |= ECRS_Pose;\n    } else {\n        inOutputStream.Write((bool)false);\n    }\n    \n    // always write mThrustDir- it's just two bits\n    if (mThrustDir != 0.f) {\n        inOutputStream.Write(true);\n        inOutputStream.Write(mThrustDir > 0.f);\n    } else {\n        inOutputStream.Write(false);\n    }\n    \n    if (inDirtyState & ECRS_Color) {\n        inOutputStream.Write((bool)true);\n        inOutputStream.Write(GetColor());\n        \n        writtenState |= ECRS_Color;\n    } else {\n        inOutputStream.Write((bool)false);\n    }\n    \n    if (inDirtyState & ECRS_Health) {\n        inOutputStream.Write((bool)true);\n        inOutputStream.Write(mHealth, 4);\n        \n        writtenState |= ECRS_Health;\n    } else {\n        inOutputStream.Write((bool)false);\n    }\n    \n    return writtenState;\n}\n\n\nclass RoboCat : public GameObject\n{\npublic:\n    CLASS_IDENTIFICATION( 'RCAT', GameObject )\n    \n{    enum ECatReplicationState\n        {\n            ECRS_Pose = 1 << 0,\n            ECRS_Color = 1 << 1,\n            ECRS_PlayerId = 1 << 2,\n            ECRS_Health = 1 << 3,\n            \n            ECRS_AllState = ECRS_Pose | ECRS_Color | ECRS_PlayerId | ECRS_Health\n        };\n    }    \n    \n    static\tGameObject*\tStaticCreate()\t\t\t{ return new RoboCat(); }\n    \n    virtual uint32_t GetAllStateMask()\tconst override\t{ return ECRS_AllState; }\n    \n    virtual\tRoboCat*\tGetAsCat()\t{ return this; }\n    \n    virtual void Update()\toverride;\n    \n    void ProcessInput( float inDeltaTime, const InputState& inInputState );\n    void SimulateMovement( float inDeltaTime );\n    \n    void ProcessCollisions();\n    void ProcessCollisionsWithScreenWalls();\n    \n    void\t\tSetPlayerId( uint32_t inPlayerId )\t\t\t{ mPlayerId = inPlayerId; }\n    uint32_t\tGetPlayerId()\t\t\t\t\t\tconst \t{ return mPlayerId; }\n    \n    void\t\t\tSetVelocity( const Vector3& inVelocity )\t{ mVelocity = inVelocity; }\n    const Vector3&\tGetVelocity()\t\t\t\t\t\tconst\t{ return mVelocity; }\n    \n    virtual uint32_t\tWrite( OutputMemoryBitStream& inOutputStream, uint32_t inDirtyState ) const override;\n    \nprotected:\n    RoboCat();\n    \nprivate:\n    \n    \n    void\tAdjustVelocityByThrust( float inDeltaTime );\n    \n    Vector3\t\t\t\tmVelocity;\n    \n    \n    float\t\t\t\tmMaxLinearSpeed;\n    float\t\t\t\tmMaxRotationSpeed;\n    \n    //bounce fraction when hitting various things\n    float\t\t\t\tmWallRestitution;\n    float\t\t\t\tmCatRestitution;\n    \n    \n    uint32_t\t\t\tmPlayerId;\n    \nprotected:\n    \n    ///move down here for padding reasons...\n    \n    float\t\t\t\tmLastMoveTimestamp;\n    \n    float\t\t\t\tmThrustDir;\n    int\t\t\t\t\tmHealth;\n    \n    bool\t\t\t\tmIsShooting;\n    \n    \n    \n    \n    \n};\n\ntypedef shared_ptr< RoboCat >\tRoboCatPtr;\n\n\n\n\n\n\n\n\n\n\n\nenum ECatControlType { ESCT_Human, ESCT_AI };\n\nclass RoboCatServer : public RoboCat {\npublic:\n    static GameObjectPtr StaticCreate() {\n        return NetworkManagerServer::sInstance->RegisterAndReturn(\n                                                                  new RoboCatServer());\n    }\n    virtual void HandleDying() override;\n    \n    virtual void Update();\n    \n    void SetCatControlType(ECatControlType inCatControlType) {\n        mCatControlType = inCatControlType;\n    }\n    \n    void TakeDamage(int inDamagingPlayerId);\n    \nprotected:\n    RoboCatServer();\n    \nprivate:\n    void HandleShooting();\n    \n    ECatControlType mCatControlType;\n    \n    float mTimeOfNextShot;\n    float mTimeBetweenShots;\n};\n\n\n#include <RoboCatServerPCH.h>\n\nRoboCatServer::RoboCatServer() :\nmCatControlType( ESCT_Human ),\nmTimeOfNextShot( 0.f ),\nmTimeBetweenShots( 0.2f )\n{}\n\nvoid RoboCatServer::HandleDying()\n{\n    NetworkManagerServer::sInstance->UnregisterGameObject( this );\n}\n\nvoid RoboCatServer::Update()\n{\n    RoboCat::Update();\n    \n    Vector3 oldLocation = GetLocation();\n    Vector3 oldVelocity = GetVelocity();\n    float oldRotation = GetRotation();\n    \n    //are you controlled by a player?\n    //if so, is there a move we haven't processed yet?\n    if( mCatControlType == ESCT_Human )\n    {\n        ClientProxyPtr client = NetworkManagerServer::sInstance->GetClientProxy( GetPlayerId() );\n        if( client )\n        {\n            MoveList& moveList = client->GetUnprocessedMoveList();\n            for( const Move& unprocessedMove : moveList )\n            {\n                const InputState& currentState = unprocessedMove.GetInputState();\n                \n                float deltaTime = unprocessedMove.GetDeltaTime();\n                \n                ProcessInput( deltaTime, currentState );\n                SimulateMovement( deltaTime );\n                \n                //LOG( \"Server Move Time: %3.4f deltaTime: %3.4f left rot at %3.4f\", unprocessedMove.GetTimestamp(), deltaTime, GetRotation() );\n                \n            }\n            \n            moveList.Clear();\n        }\n    }\n    else\n    {\n        //do some AI stuff\n        SimulateMovement( Timing::sInstance.GetDeltaTime() );\n    }\n    \n    HandleShooting();\n    \n    if( !RoboMath::Is2DVectorEqual( oldLocation, GetLocation() ) ||\n       !RoboMath::Is2DVectorEqual( oldVelocity, GetVelocity() ) ||\n       oldRotation != GetRotation() )\n    {\n        NetworkManagerServer::sInstance->SetStateDirty( GetNetworkId(), ECRS_Pose );\n    }\n    \n}\n\nvoid RoboCatServer::HandleShooting()\n{\n    float time = Timing::sInstance.GetFrameStartTime();\n    if( mIsShooting && Timing::sInstance.GetFrameStartTime() > mTimeOfNextShot )\n    {\n        //not exact, but okay\n        mTimeOfNextShot = time + mTimeBetweenShots;\n        \n        //fire!\n        YarnPtr yarn = std::static_pointer_cast< Yarn >( GameObjectRegistry::sInstance->CreateGameObject( 'YARN' ) );\n        yarn->InitFromShooter( this );\n    }\n}\n\nvoid RoboCatServer::TakeDamage( int inDamagingPlayerId )\n{\n    mHealth--;\n    if( mHealth <= 0.f )\n    {\n        //score one for damaging player...\n        ScoreBoardManager::sInstance->IncScore( inDamagingPlayerId, 1 );\n        \n        //and you want to die\n        SetDoesWantToDie( true );\n        \n        //tell the client proxy to make you a new cat\n        ClientProxyPtr clientProxy = NetworkManagerServer::sInstance->GetClientProxy( GetPlayerId() );\n        if( clientProxy )\n        {\n            clientProxy->HandleCatDied();\n        }\n    }\n    \n    //tell the world our health dropped\n    NetworkManagerServer::sInstance->SetStateDirty( GetNetworkId(), ECRS_Health );\n}\n\n\n#include <RoboCatClientPCH.h>\n\n\n\nRoboCatClient::RoboCatClient() :\nmTimeLocationBecameOutOfSync( 0.f ),\nmTimeVelocityBecameOutOfSync( 0.f )\n{\n    mSpriteComponent.reset( new SpriteComponent( this ) );\n    mSpriteComponent->SetTexture( TextureManager::sInstance->GetTexture( \"cat\" ) );\n}\n\nvoid RoboCatClient::HandleDying()\n{\n    RoboCat::HandleDying();\n    \n    //and if we're local, tell the hud so our health goes away!\n    if( GetPlayerId() == NetworkManagerClient::sInstance->GetPlayerId() )\n    {\n        HUD::sInstance->SetPlayerHealth( 0 );\n    }\n}\n\n\nvoid RoboCatClient::Update()\n{\n    //is this the cat owned by us?\n    if( GetPlayerId() == NetworkManagerClient::sInstance->GetPlayerId() )\n    {\n        const Move* pendingMove = InputManager::sInstance->GetAndClearPendingMove();\n        //in theory, only do this if we want to sample input this frame / if there's a new move ( since we have to keep in sync with server )\n        if( pendingMove ) //is it time to sample a new move...\n        {\n            float deltaTime = pendingMove->GetDeltaTime();\n            \n            //apply that input\n            \n            ProcessInput( deltaTime, pendingMove->GetInputState() );\n            \n            //and simulate!\n            \n            SimulateMovement( deltaTime );\n            \n            //LOG( \"Client Move Time: %3.4f deltaTime: %3.4f left rot at %3.4f\", latestMove.GetTimestamp(), deltaTime, GetRotation() );\n        }\n    }\n    else\n    {\n        SimulateMovement( Timing::sInstance.GetDeltaTime() );\n        \n        if( RoboMath::Is2DVectorEqual( GetVelocity(), Vector3::Zero ) )\n        {\n            //we're in sync if our velocity is 0\n            mTimeLocationBecameOutOfSync = 0.f;\n        }\n    }\n}\n\nvoid RoboCatClient::Read( InputMemoryBitStream& inInputStream )\n{\n    bool stateBit;\n    \n    uint32_t readState = 0;\n    \n    inInputStream.Read( stateBit );\n    if( stateBit )\n    {\n        uint32_t playerId;\n        inInputStream.Read( playerId );\n        SetPlayerId( playerId );\n        readState |= ECRS_PlayerId;\n    }\n    \n    float oldRotation = GetRotation();\n    Vector3 oldLocation = GetLocation();\n    Vector3 oldVelocity = GetVelocity();\n    \n    float replicatedRotation;\n    Vector3 replicatedLocation;\n    Vector3 replicatedVelocity;\n    \n    inInputStream.Read( stateBit );\n    if( stateBit )\n    {\n        inInputStream.Read( replicatedVelocity.mX );\n        inInputStream.Read( replicatedVelocity.mY );\n        \n        SetVelocity( replicatedVelocity );\n        \n        inInputStream.Read( replicatedLocation.mX );\n        inInputStream.Read( replicatedLocation.mY );\n        \n        SetLocation( replicatedLocation );\n        \n        inInputStream.Read( replicatedRotation );\n        SetRotation( replicatedRotation );\n        \n        readState |= ECRS_Pose;\n    }\n    \n    inInputStream.Read( stateBit );\n    if( stateBit )\n    {\n        inInputStream.Read( stateBit );\n        mThrustDir = stateBit ? 1.f : -1.f;\n    }\n    else\n    {\n        mThrustDir = 0.f;\n    }\n    \n    inInputStream.Read( stateBit );\n    if( stateBit )\n    {\n        Vector3 color;\n        inInputStream.Read( color );\n        SetColor( color );\n        readState |= ECRS_Color;\n    }\n    \n    inInputStream.Read( stateBit );\n    if( stateBit )\n    {\n        mHealth = 0;\n        inInputStream.Read( mHealth, 4 );\n        readState |= ECRS_Health;\n    }\n    \n    if( GetPlayerId() == NetworkManagerClient::sInstance->GetPlayerId() )\n    {\n        //did we get health? if so, tell the hud!\n        if( ( readState & ECRS_Health ) != 0 )\n        {\n            HUD::sInstance->SetPlayerHealth( mHealth );\n        }\n        \n        DoClientSidePredictionAfterReplicationForLocalCat( readState );\n        \n        //if this is a create packet, don't interpolate\n        if( ( readState & ECRS_PlayerId ) == 0 )\n        {\n            InterpolateClientSidePrediction( oldRotation, oldLocation, oldVelocity, false );\n        }\n    }\n    else\n    {\n        DoClientSidePredictionAfterReplicationForRemoteCat( readState );\n        \n        //will this smooth us out too? it'll interpolate us just 10% of the way there...\n        if( ( readState & ECRS_PlayerId ) == 0 )\n        {\n            InterpolateClientSidePrediction( oldRotation, oldLocation, oldVelocity, true );\n        }\n        \n    }\n    \n    \n}\n\n\n\n\nvoid RoboCatClient::DoClientSidePredictionAfterReplicationForLocalCat( uint32_t inReadState )\n{\n    if( ( inReadState & ECRS_Pose ) != 0 )\n    {\n        //simulate pose only if we received new pose- might have just gotten thrustDir\n        //in which case we don't need to replay moves because we haven't warped backwards\n        \n        //all processed moves have been removed, so all that are left are unprocessed moves\n        //so we must apply them...\n        const MoveList& moveList = InputManager::sInstance->GetMoveList();\n        \n        for( const Move& move : moveList )\n        {\n            float deltaTime = move.GetDeltaTime();\n            ProcessInput( deltaTime, move.GetInputState() );\n            \n            SimulateMovement( deltaTime );\n        }\n    }\n    \n    \n    \n}\n\n\nvoid RoboCatClient::InterpolateClientSidePrediction( float inOldRotation, const Vector3& inOldLocation, const Vector3& inOldVelocity, bool inIsForRemoteCat )\n{\n    if( inOldRotation != GetRotation() && !inIsForRemoteCat )\n    {\n        LOG( \"ERROR! Move replay ended with incorrect rotation!\", 0 );\n    }\n    \n    float roundTripTime = NetworkManagerClient::sInstance->GetRoundTripTime();\n    \n    if( !RoboMath::Is2DVectorEqual( inOldLocation, GetLocation() ) )\n    {\n        //LOG( \"ERROR! Move replay ended with incorrect location!\", 0 );\n        \n        //have we been out of sync, or did we just become out of sync?\n        float time = Timing::sInstance.GetFrameStartTime();\n        if( mTimeLocationBecameOutOfSync == 0.f )\n        {\n            mTimeLocationBecameOutOfSync = time;\n        }\n        \n        float durationOutOfSync = time - mTimeLocationBecameOutOfSync;\n        if( durationOutOfSync < roundTripTime )\n        {\n            SetLocation( Lerp( inOldLocation, GetLocation(), inIsForRemoteCat ? ( durationOutOfSync / roundTripTime ) : 0.1f ) );\n        }\n    }\n    else\n    {\n        //we're in sync\n        mTimeLocationBecameOutOfSync = 0.f;\n    }\n    \n    \n    if( !RoboMath::Is2DVectorEqual( inOldVelocity, GetVelocity() ) )\n    {\n        //LOG( \"ERROR! Move replay ended with incorrect velocity!\", 0 );\n        \n        //have we been out of sync, or did we just become out of sync?\n        float time = Timing::sInstance.GetFrameStartTime();\n        if( mTimeVelocityBecameOutOfSync == 0.f )\n        {\n            mTimeVelocityBecameOutOfSync = time;\n        }\n        \n        //now interpolate to the correct value...\n        float durationOutOfSync = time - mTimeVelocityBecameOutOfSync;\n        if( durationOutOfSync < roundTripTime )\n        {\n            SetVelocity( Lerp( inOldVelocity, GetVelocity(), inIsForRemoteCat ? ( durationOutOfSync / roundTripTime ) : 0.1f ) );\n        }\n        //otherwise, fine...\n        \n    }\n    else\n    {\n        //we're in sync\n        mTimeVelocityBecameOutOfSync = 0.f;\n    }\n    \n}\n\n\n//so what do we want to do here? need to do some kind of interpolation...\n\nvoid RoboCatClient::DoClientSidePredictionAfterReplicationForRemoteCat( uint32_t inReadState )\n{\n    if( ( inReadState & ECRS_Pose ) != 0 )\n    {\n        \n        //simulate movement for an additional RTT\n        float rtt = NetworkManagerClient::sInstance->GetRoundTripTime();\n        //LOG( \"Other cat came in, simulating for an extra %f\", rtt );\n        \n        //let's break into framerate sized chunks though so that we don't run through walls and do crazy things...\n        float deltaTime = 1.f / 30.f;\n        \n        while( true )\n        {\n            if( rtt < deltaTime )\n            {\n                SimulateMovement( rtt );\n                break;\n            }\n         \n            \n            else\n            {\n                SimulateMovement( deltaTime );\n                rtt -= deltaTime;\n            }\n        }\n    }\n    \n}\n\n\nclass RoboCatClient : public RoboCat\n{\npublic:\n    static\tGameObjectPtr\tStaticCreate()\t\t{ return GameObjectPtr( new RoboCatClient() ); }\n    \n    virtual void Update();\n    virtual void\tHandleDying() override;\n    \n    virtual void\tRead( InputMemoryBitStream& inInputStream ) override;\n    \n    void DoClientSidePredictionAfterReplicationForLocalCat( uint32_t inReadState );\n    void DoClientSidePredictionAfterReplicationForRemoteCat( uint32_t inReadState );\n    \n    \n    \nprotected:\n    RoboCatClient();\n    \n    \nprivate:\n    \n    void InterpolateClientSidePrediction( float inOldRotation, const Vector3& inOldLocation, const Vector3& inOldVelocity, bool inIsForRemoteCat );\n    \n    float\t\t\t\tmTimeLocationBecameOutOfSync;\n    float\t\t\t\tmTimeVelocityBecameOutOfSync;\n    \n    SpriteComponentPtr\tmSpriteComponent;\n};",
			"file": "scratch.cpp",
			"file_size": 26914,
			"file_write_time": 131194259020000000,
			"settings":
			{
				"buffer_size": 26952,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/gameobjects/Player.cpp",
			"settings":
			{
				"buffer_size": 1309,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/src/input/InputManager.cpp",
			"settings":
			{
				"buffer_size": 2676,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/gameobjects/MoveList.cpp",
			"settings":
			{
				"buffer_size": 1248,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "N",
			"settings":
			{
				"buffer_size": 1,
				"line_ending": "Unix",
				"name": "N"
			}
		},
		{
			"contents": "/Users/erikparreira/Dropbox/Programming/networkplayground/bin/Debug/networkplaygroundclient\nInitializing NetworkManager at port 0\n'DUDUD' was welcomed on client as player 1\nRead 0 packet\nDoing move 0.01\nMoving Player by 50.00 and -0.00, from location 0.00, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 1.65, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 3.30, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 4.95, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 6.60, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 8.25, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 9.90, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 11.55, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 13.20, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 14.85, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 16.50, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 18.15, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 19.80, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 21.45, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 23.10, 0.00 time 0.03\nRead 1 packet\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 24.75, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 26.40, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 28.05, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 29.70, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 31.35, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 33.00, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 34.65, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 36.30, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 37.95, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 39.60, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 41.25, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 42.90, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 44.55, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 46.20, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 47.85, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 49.50, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 51.15, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 52.80, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 54.45, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 56.10, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 57.75, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 59.40, 0.00 time 0.03\nRead 2 packet\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 61.05, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 62.70, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 64.35, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 66.00, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 67.65, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 69.30, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 70.95, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 72.60, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 74.25, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 75.90, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 77.55, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 79.20, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 80.85, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 82.50, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 84.15, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 85.80, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 87.45, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 89.10, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 90.75, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 92.40, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 94.05, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 95.70, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 97.35, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 99.00, 0.00 time 0.03\nRead 3 packet\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 100.65, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 102.30, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 103.95, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 105.60, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 107.25, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 108.90, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 110.55, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 112.20, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 113.85, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 115.50, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 117.15, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 118.80, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 120.45, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 122.10, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 123.75, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 125.40, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 127.05, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 128.70, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 130.35, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 132.00, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 133.65, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 135.30, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 136.95, 0.00 time 0.03\nRead 4 packet\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 138.60, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 140.25, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 141.90, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 143.55, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 145.20, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 146.85, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 148.50, 0.00 time 0.03\nRead 5 packet\nDoing move 0.35\nMoving Player by 50.00 and -0.00, from location 150.15, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 151.80, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 153.45, 0.00 time 0.03\nRead 6 packet\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 155.10, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 156.75, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 158.40, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 160.05, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 161.70, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 163.35, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 165.00, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 166.65, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 168.30, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 169.95, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 171.60, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 173.25, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 174.90, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 176.55, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 178.20, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 179.85, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 181.50, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 183.15, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 184.80, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 186.45, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 188.10, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 189.75, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 191.40, 0.00 time 0.03\nRead 7 packet\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 193.05, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 194.70, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 196.35, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 198.00, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 199.65, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 201.30, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 202.95, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 204.60, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 206.25, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 207.90, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 209.55, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 211.20, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 212.85, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 214.50, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 216.15, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 217.80, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 219.45, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 221.10, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 222.75, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 224.40, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 226.05, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 227.70, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 229.35, 0.00 time 0.03\nRead 8 packet\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 231.00, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 232.65, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 234.30, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 235.95, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 237.60, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 239.25, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 240.90, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 242.55, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 244.20, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 245.85, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 247.50, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 249.15, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 250.80, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 252.45, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 254.10, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 255.75, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 257.40, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 259.05, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 260.70, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 262.35, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 264.00, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 265.65, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 267.30, 0.00 time 0.03\nRead 9 packet\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 268.95, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 270.60, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 272.25, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 273.90, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 275.55, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 277.20, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 278.85, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 280.50, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 282.15, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 283.80, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 285.45, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 287.10, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 288.75, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 290.40, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 292.05, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 293.70, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 295.35, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 297.00, 0.00 time 0.03\nDoing move 0.00\nMoving Player by 50.00 and -0.00, from location 298.65, 0.00 time 0.03\nRead 10 packet\n",
			"settings":
			{
				"buffer_size": 16094,
				"line_ending": "Unix",
				"name": "/Users/erikparreira/Dropbox/Programming/networkpla"
			}
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 347,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/include/networking/NetworkManagerClient.h",
			"settings":
			{
				"buffer_size": 2378,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/src/networking/NetworkManagerClient.cpp",
			"settings":
			{
				"buffer_size": 4988,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/src/gameobjects/Client.cpp",
			"settings":
			{
				"buffer_size": 2903,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/include/input/InputManager.h",
			"settings":
			{
				"buffer_size": 967,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/networking/StringUtils.cpp",
			"settings":
			{
				"buffer_size": 2412,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/include/networking/StringUtils.h",
			"settings":
			{
				"buffer_size": 739,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/include/networking/SocketAddress.h",
			"settings":
			{
				"buffer_size": 2466,
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 3899,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/include/gameobjects/Engine.h",
			"settings":
			{
				"buffer_size": 543,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundserver/src/networking/NetworkManagerServer.cpp",
			"settings":
			{
				"buffer_size": 9936,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/Users/erikparreira/Dropbox/Programming/networkplayground/bin/Debug/networkplaygroundserver\nInitializing NetworkManager at port 45000\nWelcomed new client 'DUDUD' as player 1\nRead 0 packet\nProccessing 3 Moves\nAdding move with timestamp 9678.1230468750 and delta 0.0000000000\nAdding move with timestamp 9678.1250000000 and delta 0.0019531250\nAdding move with timestamp 9678.1259765625 and delta 0.0009765625\nMoving Player by 50.00 and -0.00, from location 0.00, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 1.65, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 3.30, 0.00 time 0.03\nRead 1 packet\nProccessing 3 Moves\nAdding move with timestamp 9678.1582031250 and delta 0.0322265625\nAdding move with timestamp 9678.1591796875 and delta 0.0009765625\nAdding move with timestamp 9678.1611328125 and delta 0.0019531250\nMoving Player by 50.00 and -0.00, from location 4.95, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 6.60, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 8.25, 0.00 time 0.03\nRead 2 packet\nNo success handler for 2\nProccessing 3 Moves\nAdding move with timestamp 9678.1914062500 and delta 0.0302734375\nAdding move with timestamp 9678.1933593750 and delta 0.0019531250\nAdding move with timestamp 9678.1943359375 and delta 0.0009765625\nMoving Player by 50.00 and -0.00, from location 9.90, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 11.55, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 13.20, 0.00 time 0.03\nRead 3 packet\nNo success handler for 2\nProccessing 3 Moves\nAdding move with timestamp 9678.2255859375 and delta 0.0312500000\nAdding move with timestamp 9678.2275390625 and delta 0.0019531250\nAdding move with timestamp 9678.2285156250 and delta 0.0009765625\nMoving Player by 50.00 and -0.00, from location 14.85, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 16.50, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 18.15, 0.00 time 0.03\nRead 4 packet\nNo success handler for 2\nProccessing 3 Moves\nAdding move with timestamp 9678.2626953125 and delta 0.0341796875\nAdding move with timestamp 9678.2646484375 and delta 0.0019531250\nAdding move with timestamp 9678.2656250000 and delta 0.0009765625\nMoving Player by 50.00 and -0.00, from location 19.80, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 21.45, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 23.10, 0.00 time 0.03\nRead 5 packet\nNo success handler for 2\nProccessing 3 Moves\nAdding move with timestamp 9678.2773437500 and delta 0.0117187500\nAdding move with timestamp 9678.2783203125 and delta 0.0009765625\nAdding move with timestamp 9678.2802734375 and delta 0.0019531250\nMoving Player by 50.00 and -0.00, from location 24.75, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 26.40, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 28.05, 0.00 time 0.03\nRead 6 packet\nNo success handler for 2\nProccessing 1 Moves\nAdding move with timestamp 9678.6337890625 and delta 0.3535156250\nMoving Player by 50.00 and -0.00, from location 29.70, 0.00 time 0.03\nRead 7 packet\nNo success handler for 2\nProccessing 3 Moves\nAdding move with timestamp 9678.6640625000 and delta 0.0302734375\nAdding move with timestamp 9678.6660156250 and delta 0.0019531250\nAdding move with timestamp 9678.6669921875 and delta 0.0009765625\nMoving Player by 50.00 and -0.00, from location 31.35, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 33.00, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 34.65, 0.00 time 0.03\nRead 8 packet\nNo success handler for 2\nProccessing 3 Moves\nAdding move with timestamp 9678.6992187500 and delta 0.0322265625\nAdding move with timestamp 9678.7001953125 and delta 0.0009765625\nAdding move with timestamp 9678.7021484375 and delta 0.0019531250\nMoving Player by 50.00 and -0.00, from location 36.30, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 37.95, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 39.60, 0.00 time 0.03\nRead 9 packet\nNo success handler for 2\nProccessing 3 Moves\nAdding move with timestamp 9678.7333984375 and delta 0.0312500000\nAdding move with timestamp 9678.7343750000 and delta 0.0009765625\nAdding move with timestamp 9678.7363281250 and delta 0.0019531250\nMoving Player by 50.00 and -0.00, from location 41.25, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 42.90, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 44.55, 0.00 time 0.03\nRead 10 packet\nNo success handler for 2\nProccessing 3 Moves\nAdding move with timestamp 9678.7636718750 and delta 0.0273437500\nAdding move with timestamp 9678.7656250000 and delta 0.0019531250\nAdding move with timestamp 9678.7666015625 and delta 0.0009765625\nMoving Player by 50.00 and -0.00, from location 46.20, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 47.85, 0.00 time 0.03\nMoving Player by 50.00 and -0.00, from location 49.50, 0.00 time 0.03\n",
			"settings":
			{
				"buffer_size": 4983,
				"line_ending": "Unix",
				"name": "/Users/erikparreira/Dropbox/Programming/networkpla"
			}
		},
		{
			"file": "networkplayground/include/networking/DeliveryNotificationManager.h",
			"settings":
			{
				"buffer_size": 2527,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/networking/DeliveryNotificationManager.cpp",
			"settings":
			{
				"buffer_size": 5390,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "2017-04-08 12:05:01.355974-0700 RoboCatActionClient[36944:2882372] WARNING: The Gestalt selector gestaltSystemVersion is returning 10.9.4 instead of 10.12.4. This is not a bug in Gestalt -- it is a documented limitation. Use NSProcessInfo's operatingSystemVersion property to get correct system version number.\nCall location:\n2017-04-08 12:05:01.356270-0700 RoboCatActionClient[36944:2882372] 0   CarbonCore                          0x00007fff77e971b1 ___Gestalt_SystemVersion_block_invoke + 121\n2017-04-08 12:05:01.356287-0700 RoboCatActionClient[36944:2882372] 1   libdispatch.dylib                   0x000000010034778c _dispatch_client_callout + 8\n2017-04-08 12:05:01.356297-0700 RoboCatActionClient[36944:2882372] 2   libdispatch.dylib                   0x000000010034776c dispatch_once_f + 272\n2017-04-08 12:05:01.356307-0700 RoboCatActionClient[36944:2882372] 3   CarbonCore                          0x00007fff77e25292 _Gestalt_SystemVersion + 976\n2017-04-08 12:05:01.356316-0700 RoboCatActionClient[36944:2882372] 4   CarbonCore                          0x00007fff77e24aad Gestalt + 139\n2017-04-08 12:05:01.356325-0700 RoboCatActionClient[36944:2882372] 5   libSDL2-2.0.0.dylib                 0x00000001001f6733 Cocoa_CreateDevice + 83\n2017-04-08 12:05:01.356334-0700 RoboCatActionClient[36944:2882372] 6   libSDL2-2.0.0.dylib                 0x00000001001ec4e2 SDL_VideoInit_REAL + 274\nInitializing NetworkManager at port 0\nTime 0.290000 and 0.000000\nTime 0.302000 and 0.030000\nTime 0.323000 and 0.060000\nTime 0.330000 and 0.090000\nTime 0.333000 and 0.120000\nTime 0.347000 and 0.150000\nTime 0.363000 and 0.180000\nTime 0.365000 and 0.210000\nTime 0.380000 and 0.240000\nTime 0.383000 and 0.270000\nTime 0.400000 and 0.300000\nTime 0.417000 and 0.330000\nTime 0.433000 and 0.360000\nTime 0.450000 and 0.390000\nTime 0.466000 and 0.420000\nTime 0.483000 and 0.450000\nTime 0.496000 and 0.480000\nTime 0.518000 and 0.510000\nTime 0.520000 and 0.540000\nTime 0.536000 and 0.540000\nTime 0.536000 and 0.540000\nTime 0.546000 and 0.540000\nTime 0.548000 and 0.570000\nTime 0.565000 and 0.570000\nTime 0.565000 and 0.570000\nTime 0.567000 and 0.570000\nTime 0.569000 and 0.570000\nTime 0.571000 and 0.570000\nTime 0.573000 and 0.600000\nTime 0.574000 and 0.600000\nTime 0.576000 and 0.600000\nTime 0.578000 and 0.600000\nTime 0.580000 and 0.600000\nTime 0.581000 and 0.600000\nTime 0.583000 and 0.600000\nTime 0.586000 and 0.600000\nTime 0.587000 and 0.600000\nTime 0.589000 and 0.600000\nTime 0.591000 and 0.600000\nTime 0.592000 and 0.600000\nTime 0.594000 and 0.600000\nTime 0.597000 and 0.600000\nTime 0.600000 and 0.600000\nTime 0.601000 and 0.630000\nTime 0.603000 and 0.630000\nTime 0.605000 and 0.630000\nTime 0.607000 and 0.630000\nTime 0.609000 and 0.630000\nTime 0.610000 and 0.630000\nTime 0.612000 and 0.630000\nTime 0.614000 and 0.630000\nTime 0.615000 and 0.630000\nTime 0.617000 and 0.630000\nTime 0.619000 and 0.630000\nTime 0.621000 and 0.630000\nTime 0.623000 and 0.630000\nTime 0.625000 and 0.630000\nTime 0.626000 and 0.630000\nTime 0.628000 and 0.630000\nTime 0.631000 and 0.630000\nTime 0.633000 and 0.660000\nTime 0.649000 and 0.660000\nTime 0.651000 and 0.660000\nTime 0.663000 and 0.660000\nTime 0.664000 and 0.690000\nTime 0.666000 and 0.690000\nTime 0.668000 and 0.690000\nTime 0.670000 and 0.690000\nTime 0.671000 and 0.690000\nTime 0.673000 and 0.690000\nTime 0.676000 and 0.690000\nTime 0.677000 and 0.690000\nTime 0.679000 and 0.690000\nTime 0.681000 and 0.690000\nTime 0.682000 and 0.690000\nTime 0.684000 and 0.690000\nTime 0.686000 and 0.690000\nTime 0.687000 and 0.690000\nTime 0.689000 and 0.690000\nTime 0.690000 and 0.690000\nTime 0.692000 and 0.720000\nTime 0.694000 and 0.720000\nTime 0.695000 and 0.720000\nTime 0.698000 and 0.720000\nTime 0.699000 and 0.720000\nTime 0.701000 and 0.720000\nTime 0.703000 and 0.720000\nTime 0.704000 and 0.720000\nTime 0.706000 and 0.720000\nTime 0.709000 and 0.720000\nTime 0.711000 and 0.720000\nTime 0.713000 and 0.720000\nTime 0.714000 and 0.720000\nTime 0.716000 and 0.720000\nTime 0.718000 and 0.720000\nTime 0.719000 and 0.720000\nTime 0.721000 and 0.720000\nTime 0.723000 and 0.750000\nTime 0.724000 and 0.750000\nTime 0.726000 and 0.750000\nTime 0.728000 and 0.750000\nTime 0.729000 and 0.750000\nTime 0.732000 and 0.750000\nTime 0.734000 and 0.750000\nTime 0.735000 and 0.750000\nTime 0.737000 and 0.750000\nTime 0.739000 and 0.750000\nTime 0.741000 and 0.750000\nTime 0.743000 and 0.750000\nTime 0.745000 and 0.750000\nTime 0.747000 and 0.750000\nTime 0.751000 and 0.750000\nTime 0.753000 and 0.780000\nTime 0.763000 and 0.780000\nTime 0.765000 and 0.780000\nTime 0.767000 and 0.780000\nTime 0.769000 and 0.780000\nTime 0.770000 and 0.780000\nTime 0.772000 and 0.780000\nTime 0.774000 and 0.780000\nTime 0.776000 and 0.780000\nTime 0.778000 and 0.780000\nTime 0.780000 and 0.780000\nTime 0.796000 and 0.810000\nTime 0.798000 and 0.810000\nTime 0.800000 and 0.810000\nTime 0.801000 and 0.810000\nTime 0.803000 and 0.810000\nTime 0.806000 and 0.810000\nTime 0.808000 and 0.810000\nTime 0.810000 and 0.810000\nTime 0.812000 and 0.840000\nTime 0.815000 and 0.840000\nTime 0.816000 and 0.840000\nTime 0.818000 and 0.840000\nTime 0.820000 and 0.840000\nTime 0.821000 and 0.840000\nTime 0.823000 and 0.840000\nTime 0.825000 and 0.840000\nTime 0.827000 and 0.840000\nTime 0.828000 and 0.840000\nTime 0.830000 and 0.840000\nTime 0.832000 and 0.840000\nTime 0.833000 and 0.840000\nTime 0.835000 and 0.840000\nTime 0.840000 and 0.840000\nTime 0.841000 and 0.870000\nTime 0.843000 and 0.870000\nTime 0.845000 and 0.870000\nTime 0.846000 and 0.870000\nTime 0.848000 and 0.870000\nTime 0.850000 and 0.870000\nTime 0.852000 and 0.870000\nTime 0.853000 and 0.870000\nTime 0.855000 and 0.870000\nTime 0.857000 and 0.870000\nTime 0.859000 and 0.870000\nTime 0.861000 and 0.870000\nTime 0.862000 and 0.870000\nTime 0.864000 and 0.870000\nTime 0.881000 and 0.870000\nTime 0.883000 and 0.900000\nTime 0.898000 and 0.900000\nTime 0.900000 and 0.900000\nTime 0.901000 and 0.930000\nTime 0.903000 and 0.930000\nTime 0.905000 and 0.930000\nTime 0.907000 and 0.930000\nTime 0.908000 and 0.930000\nTime 0.910000 and 0.930000\nTime 0.912000 and 0.930000\nTime 0.914000 and 0.930000\nTime 0.915000 and 0.930000\nTime 0.917000 and 0.930000\nTime 0.919000 and 0.930000\nTime 0.920000 and 0.930000\nTime 0.922000 and 0.930000\nTime 0.924000 and 0.930000\nTime 0.926000 and 0.930000\nTime 0.927000 and 0.930000\nTime 0.929000 and 0.930000\nTime 0.931000 and 0.930000\nTime 0.932000 and 0.960000\nTime 0.935000 and 0.960000\nTime 0.937000 and 0.960000\nTime 0.939000 and 0.960000\nTime 0.940000 and 0.960000\nTime 0.942000 and 0.960000\nTime 0.944000 and 0.960000\nTime 0.945000 and 0.960000\nTime 0.947000 and 0.960000\nTime 0.949000 and 0.960000\nTime 0.951000 and 0.960000\nTime 0.952000 and 0.960000\nTime 0.954000 and 0.960000\nTime 0.956000 and 0.960000\nTime 0.957000 and 0.960000\nTime 0.959000 and 0.960000\nTime 0.961000 and 0.960000\nTime 0.963000 and 0.990000\nTime 0.964000 and 0.990000\nTime 0.966000 and 0.990000\nTime 0.968000 and 0.990000\nTime 0.970000 and 0.990000\nTime 0.972000 and 0.990000\nTime 0.974000 and 0.990000\nTime 0.976000 and 0.990000\nTime 0.978000 and 0.990000\nTime 0.982000 and 0.990000\nTime 0.995000 and 0.990000\nTime 0.997000 and 1.020000\nTime 1.013000 and 1.020000\nTime 1.015000 and 1.020000\nTime 1.017000 and 1.020000\n'DUDUD' was welcomed on client as player 1\nTime 1.018000 and 1.020000\nTime 1.020000 and 1.020000\nTime 1.022000 and 1.049999\nTime 1.025000 and 1.049999\nTime 1.029000 and 1.049999\nTime 1.031000 and 1.049999\nTime 1.034000 and 1.049999\nTime 1.036000 and 1.049999\nTime 1.038000 and 1.049999\nTime 1.040000 and 1.049999\nTime 1.042000 and 1.049999\nTime 1.044000 and 1.049999\nTime 1.047000 and 1.049999\nTime 1.049000 and 1.049999\nTime 1.051000 and 1.049999\nTime 1.053000 and 1.079999\nTime 1.055000 and 1.079999\nTime 1.057000 and 1.079999\nTime 1.059000 and 1.079999\nTime 1.061000 and 1.079999\nTime 1.063000 and 1.079999\nTime 1.065000 and 1.079999\nTime 1.067000 and 1.079999\nTime 1.070000 and 1.079999\nTime 1.071000 and 1.079999\nTime 1.073000 and 1.079999\nTime 1.075000 and 1.079999\nTime 1.077000 and 1.079999\nTime 1.080000 and 1.079999\nTime 1.082000 and 1.109999\nTime 1.084000 and 1.109999\nTime 1.086000 and 1.109999\nTime 1.088000 and 1.109999\nTime 1.090000 and 1.109999\nTime 1.095000 and 1.109999\nTime 1.113000 and 1.109999\nTime 1.115000 and 1.139999\nTime 1.131000 and 1.139999\nTime 1.133000 and 1.139999\nTime 1.135000 and 1.139999\nTime 1.137000 and 1.139999\nTime 1.139000 and 1.139999\nTime 1.141000 and 1.139999\nTime 1.143000 and 1.169999\nTime 1.148000 and 1.169999\nTime 1.150000 and 1.169999\nTime 1.152000 and 1.169999\nTime 1.154000 and 1.169999\nTime 1.156000 and 1.169999\nTime 1.158000 and 1.169999\nTime 1.160000 and 1.169999\nTime 1.162000 and 1.169999\nTime 1.164000 and 1.169999\nTime 1.166000 and 1.169999\nTime 1.168000 and 1.169999\nTime 1.171000 and 1.169999\nTime 1.173000 and 1.199999\nTime 1.175000 and 1.199999\nTime 1.177000 and 1.199999\nTime 1.179000 and 1.199999\nTime 1.181000 and 1.199999\nTime 1.183000 and 1.199999\nTime 1.185000 and 1.199999\nTime 1.186000 and 1.199999\nTime 1.188000 and 1.199999\nTime 1.190000 and 1.199999\nTime 1.193000 and 1.199999\nTime 1.195000 and 1.199999\nTime 1.197000 and 1.199999\nTime 1.199000 and 1.199999\nTime 1.203000 and 1.199999\nTime 1.205000 and 1.229999\nTime 1.207000 and 1.229999\nTime 1.210000 and 1.229999\nTime 1.228000 and 1.229999\nTime 1.230000 and 1.229999\nTime 1.246000 and 1.259999\nTime 1.248000 and 1.259999\nTime 1.250000 and 1.259999\nTime 1.252000 and 1.259999\nTime 1.254000 and 1.259999\nTime 1.256000 and 1.259999\nTime 1.259000 and 1.259999\nTime 1.261000 and 1.259999\nTime 1.263000 and 1.289999\nTime 1.265000 and 1.289999\nTime 1.267000 and 1.289999\nTime 1.269000 and 1.289999\nTime 1.272000 and 1.289999\nTime 1.273000 and 1.289999\nTime 1.275000 and 1.289999\nTime 1.277000 and 1.289999\nTime 1.279000 and 1.289999\nTime 1.281000 and 1.289999\nTime 1.283000 and 1.289999\nTime 1.285000 and 1.289999\nTime 1.287000 and 1.289999\nTime 1.289000 and 1.289999\nTime 1.291000 and 1.289999\nTime 1.293000 and 1.319999\nTime 1.295000 and 1.319999\nTime 1.297000 and 1.319999\nTime 1.299000 and 1.319999\nTime 1.301000 and 1.319999\nTime 1.302000 and 1.319999\nTime 1.304000 and 1.319999\nTime 1.306000 and 1.319999\nTime 1.308000 and 1.319999\nTime 1.311000 and 1.319999\nTime 1.313000 and 1.319999\nTime 1.315000 and 1.319999\nTime 1.317000 and 1.319999\nTime 1.319000 and 1.319999\nTime 1.321000 and 1.319999\nTime 1.330000 and 1.349999\nTime 1.332000 and 1.349999\nTime 1.348000 and 1.349999\nTime 1.350000 and 1.349999\nTime 1.352000 and 1.379999\nTime 1.353000 and 1.379999\nTime 1.355000 and 1.379999\nTime 1.357000 and 1.379999\nTime 1.359000 and 1.379999\nTime 1.361000 and 1.379999\nTime 1.363000 and 1.379999\nTime 1.365000 and 1.379999\nTime 1.367000 and 1.379999\nTime 1.369000 and 1.379999\nTime 1.371000 and 1.379999\nTime 1.373000 and 1.379999\nTime 1.375000 and 1.379999\nTime 1.377000 and 1.379999\nTime 1.379000 and 1.379999\nTime 1.381000 and 1.379999\nTime 1.383000 and 1.409999\nTime 1.385000 and 1.409999\nTime 1.387000 and 1.409999\nTime 1.389000 and 1.409999\nTime 1.391000 and 1.409999\nTime 1.393000 and 1.409999\nTime 1.395000 and 1.409999\nTime 1.397000 and 1.409999\nTime 1.399000 and 1.409999\nTime 1.401000 and 1.409999\nTime 1.403000 and 1.409999\nTime 1.405000 and 1.409999\nTime 1.407000 and 1.409999\nTime 1.409000 and 1.409999\nTime 1.411000 and 1.409999\nTime 1.413000 and 1.439999\nTime 1.414000 and 1.439999\nTime 1.416000 and 1.439999\nTime 1.418000 and 1.439999\nTime 1.420000 and 1.439999\nTime 1.422000 and 1.439999\nTime 1.424000 and 1.439999\nTime 1.426000 and 1.439999\nTime 1.428000 and 1.439999\nTime 1.431000 and 1.439999\nTime 1.433000 and 1.439999\nTime 1.435000 and 1.439999\nTime 1.437000 and 1.439999\nTime 1.442000 and 1.439999\nTime 1.444000 and 1.469999\nTime 1.446000 and 1.469999\nTime 1.453000 and 1.469999\nTime 1.455000 and 1.469999\nTime 1.461000 and 1.469999\nTime 1.463000 and 1.469999\nTime 1.465000 and 1.469999\nTime 1.467000 and 1.469999\nTime 1.469000 and 1.469999\nTime 1.471000 and 1.469999\nTime 1.473000 and 1.499999\nTime 1.475000 and 1.499999\nTime 1.477000 and 1.499999\nTime 1.479000 and 1.499999\nTime 1.480000 and 1.499999\nTime 1.482000 and 1.499999\nTime 1.484000 and 1.499999\nTime 1.486000 and 1.499999\nTime 1.488000 and 1.499999\nTime 1.490000 and 1.499999\nTime 1.492000 and 1.499999\nTime 1.494000 and 1.499999\nTime 1.496000 and 1.499999\nTime 1.498000 and 1.499999\nTime 1.500000 and 1.499999\nTime 1.502000 and 1.529999\nTime 1.504000 and 1.529999\nTime 1.506000 and 1.529999\nTime 1.508000 and 1.529999\nTime 1.513000 and 1.529999\nTime 1.515000 and 1.529999\nTime 1.517000 and 1.529999\nTime 1.520000 and 1.529999\nTime 1.521000 and 1.529999\nTime 1.523000 and 1.529999\nTime 1.525000 and 1.529999\nTime 1.527000 and 1.529999\nTime 1.529000 and 1.529999\nTime 1.531000 and 1.529999\nTime 1.533000 and 1.559999\nTime 1.535000 and 1.559999\nTime 1.537000 and 1.559999\nTime 1.539000 and 1.559999\nTime 1.541000 and 1.559999\nTime 1.543000 and 1.559999\nTime 1.545000 and 1.559999\nTime 1.547000 and 1.559999\nTime 1.549000 and 1.559999\nTime 1.554000 and 1.559999\nTime 1.562000 and 1.559999\nTime 1.564000 and 1.589999\nTime 1.580000 and 1.589999\nTime 1.582000 and 1.589999\nTime 1.584000 and 1.589999\nTime 1.587000 and 1.589999\nTime 1.589000 and 1.589999\nTime 1.591000 and 1.589999\nTime 1.593000 and 1.619999\nTime 1.595000 and 1.619999\nTime 1.597000 and 1.619999\nTime 1.599000 and 1.619999\nTime 1.601000 and 1.619999\nTime 1.603000 and 1.619999\nTime 1.605000 and 1.619999\nTime 1.607000 and 1.619999\nTime 1.610000 and 1.619999\nTime 1.611000 and 1.619999\nTime 1.613000 and 1.619999\nTime 1.615000 and 1.619999\nTime 1.617000 and 1.619999\nTime 1.619000 and 1.619999\nTime 1.621000 and 1.619999\nTime 1.623000 and 1.649999\nTime 1.625000 and 1.649999\nTime 1.627000 and 1.649999\nTime 1.629000 and 1.649999\nTime 1.631000 and 1.649999\nTime 1.633000 and 1.649999\nTime 1.635000 and 1.649999\nTime 1.637000 and 1.649999\nTime 1.639000 and 1.649999\nTime 1.641000 and 1.649999\nTime 1.644000 and 1.649999\nTime 1.645000 and 1.649999\nTime 1.647000 and 1.649999\nTime 1.649000 and 1.649999\nTime 1.651000 and 1.649999\nTime 1.653000 and 1.679999\nTime 1.655000 and 1.679999\nTime 1.657000 and 1.679999\nTime 1.659000 and 1.679999\nTime 1.661000 and 1.679999\nTime 1.663000 and 1.679999\nTime 1.666000 and 1.679999\nTime 1.668000 and 1.679999\nTime 1.670000 and 1.679999\nTime 1.672000 and 1.679999\nTime 1.677000 and 1.679999\nTime 1.678000 and 1.679999\nTime 1.680000 and 1.679999\nTime 1.687000 and 1.709999\nTime 1.689000 and 1.709999\nTime 1.696000 and 1.709999\nTime 1.698000 and 1.709999\nTime 1.700000 and 1.709999\nTime 1.702000 and 1.709999\nTime 1.703000 and 1.709999\nTime 1.705000 and 1.709999\nTime 1.707000 and 1.709999\nTime 1.709000 and 1.709999\nTime 1.711000 and 1.709999\nTime 1.713000 and 1.739999\nTime 1.715000 and 1.739999\nTime 1.717000 and 1.739999\nTime 1.719000 and 1.739999\nTime 1.721000 and 1.739999\nTime 1.723000 and 1.739999\nTime 1.725000 and 1.739999\nTime 1.726000 and 1.739999\nTime 1.728000 and 1.739999\nTime 1.730000 and 1.739999\nTime 1.732000 and 1.739999\nTime 1.734000 and 1.739999\nTime 1.736000 and 1.739999\nTime 1.738000 and 1.739999\nTime 1.740000 and 1.739999\nTime 1.742000 and 1.769999\nTime 1.745000 and 1.769999\nTime 1.746000 and 1.769999\nTime 1.748000 and 1.769999\nTime 1.750000 and 1.769999\nTime 1.752000 and 1.769999\nTime 1.754000 and 1.769999\nTime 1.757000 and 1.769999\nTime 1.759000 and 1.769999\nTime 1.761000 and 1.769999\nTime 1.763000 and 1.769999\nTime 1.765000 and 1.769999\nTime 1.767000 and 1.769999\nTime 1.769000 and 1.769999\nTime 1.771000 and 1.769999\nTime 1.773000 and 1.799999\nTime 1.775000 and 1.799999\nTime 1.777000 and 1.799999\nTime 1.779000 and 1.799999\nTime 1.781000 and 1.799999\nTime 1.783000 and 1.799999\nTime 1.785000 and 1.799999\nTime 1.788000 and 1.799999\nTime 1.790000 and 1.799999\nTime 1.796000 and 1.799999\nTime 1.798000 and 1.799999\nTime 1.801000 and 1.799999\nTime 1.803000 and 1.829999\nTime 1.810000 and 1.829999\nTime 1.813000 and 1.829999\nTime 1.815000 and 1.829999\nTime 1.817000 and 1.829999\nTime 1.819000 and 1.829999\nTime 1.822000 and 1.829999\nTime 1.824000 and 1.829999\nTime 1.826000 and 1.829999\nTime 1.828000 and 1.829999\nTime 1.830000 and 1.829999\nTime 1.832000 and 1.859999\nTime 1.834000 and 1.859999\nTime 1.836000 and 1.859999\nTime 1.838000 and 1.859999\nTime 1.840000 and 1.859999\nTime 1.842000 and 1.859999\nTime 1.844000 and 1.859999\nTime 1.846000 and 1.859999\nTime 1.848000 and 1.859999\nTime 1.850000 and 1.859999\nTime 1.852000 and 1.859999\nTime 1.854000 and 1.859999\nTime 1.856000 and 1.859999\nTime 1.858000 and 1.859999\nTime 1.859000 and 1.859999\nTime 1.861000 and 1.859999\nTime 1.863000 and 1.889999\nTime 1.865000 and 1.889999\nTime 1.867000 and 1.889999\nTime 1.869000 and 1.889999\nTime 1.871000 and 1.889999\nTime 1.873000 and 1.889999\nTime 1.875000 and 1.889999\nTime 1.877000 and 1.889999\nTime 1.880000 and 1.889999\nTime 1.881000 and 1.889999\nTime 1.883000 and 1.889999\nTime 1.885000 and 1.889999\nTime 1.887000 and 1.889999\nTime 1.889000 and 1.889999\nTime 1.891000 and 1.889999\nTime 1.893000 and 1.919999\nTime 1.895000 and 1.919999\nTime 1.897000 and 1.919999\nTime 1.899000 and 1.919999\nTime 1.903000 and 1.919999\nTime 1.905000 and 1.919999\nTime 1.907000 and 1.919999\nTime 1.909000 and 1.919999\nTime 1.914000 and 1.919999\nTime 1.916000 and 1.919999\nTime 1.933000 and 1.919999\nTime 1.946000 and 1.949999\nTime 1.948000 and 1.949999\nTime 1.964000 and 1.949999\nTime 1.966000 and 1.979999\nTime 1.968000 and 1.979999\nTime 1.970000 and 1.979999\nTime 1.972000 and 1.979999\nTime 1.974000 and 1.979999\nTime 1.976000 and 1.979999\nTime 1.978000 and 1.979999\nTime 1.980000 and 1.979999\nTime 1.982000 and 2.009999\nTime 1.984000 and 2.009999\nTime 1.986000 and 2.009999\nTime 1.988000 and 2.009999\nTime 1.990000 and 2.009999\nTime 1.992000 and 2.009999\nTime 1.994000 and 2.009999\nTime 1.995000 and 2.009999\nTime 1.997000 and 2.009999\nTime 1.999000 and 2.009999\nTime 2.001000 and 2.009999\nTime 2.003000 and 2.009999\nTime 2.005000 and 2.009999\nTime 2.007000 and 2.009999\nTime 2.009000 and 2.009999\nTime 2.011000 and 2.009999\nTime 2.013000 and 2.039999\nTime 2.015000 and 2.039999\nTime 2.017000 and 2.039999\nTime 2.019000 and 2.039999\nTime 2.021000 and 2.039999\nTime 2.023000 and 2.039999\nTime 2.025000 and 2.039999\nTime 2.030000 and 2.039999\nTime 2.032000 and 2.039999\nTime 2.048000 and 2.039999\nTime 2.049000 and 2.069999\nTime 2.051000 and 2.069999\nTime 2.053000 and 2.069999\nTime 2.055000 and 2.069999\nTime 2.057000 and 2.069999\nTime 2.059000 and 2.069999\nTime 2.061000 and 2.069999\nTime 2.063000 and 2.069999\nTime 2.065000 and 2.069999\nTime 2.067000 and 2.069999\nTime 2.069000 and 2.069999\nTime 2.071000 and 2.069999\nTime 2.072000 and 2.099998\nTime 2.074000 and 2.099998\nTime 2.076000 and 2.099998\nTime 2.078000 and 2.099998\nTime 2.080000 and 2.099998\nTime 2.082000 and 2.099998\nTime 2.084000 and 2.099998\nTime 2.086000 and 2.099998\nTime 2.088000 and 2.099998\nTime 2.090000 and 2.099998\nTime 2.091000 and 2.099998\nTime 2.093000 and 2.099998\nTime 2.095000 and 2.099998\nTime 2.097000 and 2.099998\nTime 2.099000 and 2.099998\nTime 2.101000 and 2.099998\nTime 2.103000 and 2.129998\nTime 2.105000 and 2.129998\nTime 2.107000 and 2.129998\nTime 2.109000 and 2.129998\nTime 2.111000 and 2.129998\nTime 2.112000 and 2.129998\nTime 2.114000 and 2.129998\nTime 2.116000 and 2.129998\nTime 2.118000 and 2.129998\nTime 2.120000 and 2.129998\nTime 2.122000 and 2.129998\nTime 2.124000 and 2.129998\nTime 2.126000 and 2.129998\nTime 2.128000 and 2.129998\nTime 2.130000 and 2.129998\nTime 2.131000 and 2.159998\nTime 2.134000 and 2.159998\nTime 2.136000 and 2.159998\nTime 2.138000 and 2.159998\nTime 2.142000 and 2.159998\nTime 2.144000 and 2.159998\nTime 2.146000 and 2.159998\nTime 2.153000 and 2.159998\nTime 2.155000 and 2.159998\nTime 2.161000 and 2.159998\nTime 2.163000 and 2.189998\nTime 2.165000 and 2.189998\nTime 2.167000 and 2.189998\nTime 2.169000 and 2.189998\nTime 2.171000 and 2.189998\nTime 2.173000 and 2.189998\nTime 2.175000 and 2.189998\nTime 2.176000 and 2.189998\nTime 2.178000 and 2.189998\nTime 2.180000 and 2.189998\nTime 2.182000 and 2.189998\nTime 2.184000 and 2.189998\nTime 2.186000 and 2.189998\nTime 2.188000 and 2.189998\nTime 2.190000 and 2.189998\nTime 2.192000 and 2.219998\nTime 2.194000 and 2.219998\nTime 2.196000 and 2.219998\nTime 2.197000 and 2.219998\nTime 2.199000 and 2.219998\nTime 2.201000 and 2.219998\nTime 2.203000 and 2.219998\nTime 2.206000 and 2.219998\nTime 2.208000 and 2.219998\nTime 2.210000 and 2.219998\nTime 2.213000 and 2.219998\nTime 2.215000 and 2.219998\nTime 2.217000 and 2.219998\nTime 2.219000 and 2.219998\nTime 2.221000 and 2.219998\nTime 2.223000 and 2.249998\nTime 2.225000 and 2.249998\nTime 2.227000 and 2.249998\nTime 2.229000 and 2.249998\nTime 2.231000 and 2.249998\nTime 2.233000 and 2.249998\nTime 2.235000 and 2.249998\nTime 2.236000 and 2.249998\nTime 2.240000 and 2.249998\nTime 2.241000 and 2.249998\nTime 2.244000 and 2.249998\nTime 2.246000 and 2.249998\nTime 2.248000 and 2.249998\nTime 2.253000 and 2.249998\nTime 2.263000 and 2.279998\nTime 2.265000 and 2.279998\nTime 2.281000 and 2.279998\nTime 2.283000 and 2.309998\nTime 2.285000 and 2.309998\nTime 2.287000 and 2.309998\nTime 2.289000 and 2.309998\nTime 2.291000 and 2.309998\nTime 2.293000 and 2.309998\nTime 2.296000 and 2.309998\nTime 2.298000 and 2.309998\nTime 2.300000 and 2.309998\nTime 2.302000 and 2.309998\nTime 2.304000 and 2.309998\nTime 2.306000 and 2.309998\nTime 2.308000 and 2.309998\nTime 2.310000 and 2.309998\nTime 2.312000 and 2.339998\nTime 2.314000 and 2.339998\nTime 2.316000 and 2.339998\nTime 2.319000 and 2.339998\nTime 2.320000 and 2.339998\nTime 2.322000 and 2.339998\nTime 2.324000 and 2.339998\nTime 2.326000 and 2.339998\nTime 2.329000 and 2.339998\nTime 2.330000 and 2.339998\nTime 2.332000 and 2.339998\nTime 2.334000 and 2.339998\nTime 2.336000 and 2.339998\nTime 2.338000 and 2.339998\nTime 2.341000 and 2.339998\nTime 2.343000 and 2.369998\nTime 2.345000 and 2.369998\nTime 2.347000 and 2.369998\nTime 2.348000 and 2.369998\nTime 2.351000 and 2.369998\nTime 2.352000 and 2.369998\nTime 2.354000 and 2.369998\nTime 2.356000 and 2.369998\nTime 2.358000 and 2.369998\nTime 2.361000 and 2.369998\nTime 2.364000 and 2.369998\nTime 2.365000 and 2.369998\nTime 2.369000 and 2.369998\nTime 2.371000 and 2.369998\nTime 2.378000 and 2.399998\nTime 2.380000 and 2.399998\nTime 2.382000 and 2.399998\nTime 2.384000 and 2.399998\nTime 2.386000 and 2.399998\nTime 2.388000 and 2.399998\nTime 2.390000 and 2.399998\nTime 2.392000 and 2.399998\nTime 2.394000 and 2.399998\nTime 2.396000 and 2.399998\nTime 2.397000 and 2.399998\nTime 2.399000 and 2.399998\nTime 2.401000 and 2.399998\nTime 2.403000 and 2.429998\nTime 2.405000 and 2.429998\nTime 2.407000 and 2.429998\nTime 2.409000 and 2.429998\nTime 2.411000 and 2.429998\nTime 2.413000 and 2.429998\nTime 2.415000 and 2.429998\nTime 2.417000 and 2.429998\nTime 2.420000 and 2.429998\nTime 2.422000 and 2.429998\nTime 2.424000 and 2.429998\nTime 2.426000 and 2.429998\nTime 2.428000 and 2.429998\nTime 2.430000 and 2.429998\nTime 2.432000 and 2.459998\nTime 2.433000 and 2.459998\nTime 2.435000 and 2.459998\nTime 2.437000 and 2.459998\nTime 2.439000 and 2.459998\nTime 2.442000 and 2.459998\nTime 2.444000 and 2.459998\nTime 2.446000 and 2.459998\nTime 2.448000 and 2.459998\nTime 2.450000 and 2.459998\nTime 2.452000 and 2.459998\nTime 2.454000 and 2.459998\nTime 2.456000 and 2.459998\nTime 2.457000 and 2.459998\nTime 2.459000 and 2.459998\nTime 2.461000 and 2.459998\nTime 2.463000 and 2.489998\nTime 2.465000 and 2.489998\nTime 2.467000 and 2.489998\nTime 2.469000 and 2.489998\nTime 2.471000 and 2.489998\nTime 2.473000 and 2.489998\nTime 2.476000 and 2.489998\nTime 2.479000 and 2.489998\nTime 2.481000 and 2.489998\nTime 2.485000 and 2.489998\nTime 2.487000 and 2.489998\nTime 2.499000 and 2.489998\nTime 2.500000 and 2.519998\nTime 2.502000 and 2.519998\nTime 2.504000 and 2.519998\nTime 2.506000 and 2.519998\nTime 2.508000 and 2.519998\nTime 2.510000 and 2.519998\nTime 2.512000 and 2.519998\nTime 2.514000 and 2.519998\nTime 2.516000 and 2.519998\nTime 2.518000 and 2.519998\nTime 2.521000 and 2.519998\nTime 2.523000 and 2.549998\nTime 2.525000 and 2.549998\nTime 2.526000 and 2.549998\nTime 2.528000 and 2.549998\nTime 2.531000 and 2.549998\nTime 2.532000 and 2.549998\nTime 2.534000 and 2.549998\nTime 2.536000 and 2.549998\nTime 2.538000 and 2.549998\nTime 2.540000 and 2.549998\nTime 2.542000 and 2.549998\nTime 2.544000 and 2.549998\nTime 2.546000 and 2.549998\nTime 2.548000 and 2.549998\nTime 2.550000 and 2.549998\nTime 2.552000 and 2.579998\nTime 2.555000 and 2.579998\nTime 2.556000 and 2.579998\nTime 2.558000 and 2.579998\nTime 2.560000 and 2.579998\nTime 2.562000 and 2.579998\nTime 2.564000 and 2.579998\nTime 2.566000 and 2.579998\nTime 2.568000 and 2.579998\nTime 2.570000 and 2.579998\nTime 2.572000 and 2.579998\nTime 2.574000 and 2.579998\nTime 2.577000 and 2.579998\nTime 2.579000 and 2.579998\nTime 2.581000 and 2.579998\nTime 2.583000 and 2.609998\nTime 2.585000 and 2.609998\nTime 2.587000 and 2.609998\nTime 2.589000 and 2.609998\nTime 2.591000 and 2.609998\nTime 2.593000 and 2.609998\nTime 2.595000 and 2.609998\nTime 2.601000 and 2.609998\nTime 2.603000 and 2.609998\nTime 2.614000 and 2.609998\nTime 2.616000 and 2.639998\nTime 2.618000 and 2.639998\nTime 2.620000 and 2.639998\nTime 2.622000 and 2.639998\nTime 2.624000 and 2.639998\nTime 2.626000 and 2.639998\nTime 2.628000 and 2.639998\nTime 2.630000 and 2.639998\nTime 2.632000 and 2.639998\nTime 2.634000 and 2.639998\nTime 2.636000 and 2.639998\nTime 2.638000 and 2.639998\nTime 2.640000 and 2.639998\nTime 2.641000 and 2.669998\nTime 2.645000 and 2.669998\nTime 2.646000 and 2.669998\nTime 2.648000 and 2.669998\nTime 2.650000 and 2.669998\nTime 2.652000 and 2.669998\nTime 2.654000 and 2.669998\nTime 2.656000 and 2.669998\nTime 2.658000 and 2.669998\nTime 2.660000 and 2.669998\nTime 2.662000 and 2.669998\nTime 2.664000 and 2.669998\nTime 2.666000 and 2.669998\nTime 2.668000 and 2.669998\nTime 2.670000 and 2.669998\nTime 2.672000 and 2.699998\nTime 2.674000 and 2.699998\nTime 2.675000 and 2.699998\nTime 2.678000 and 2.699998\nTime 2.680000 and 2.699998\nTime 2.682000 and 2.699998\nTime 2.684000 and 2.699998\nTime 2.686000 and 2.699998\nTime 2.688000 and 2.699998\nTime 2.690000 and 2.699998\nTime 2.692000 and 2.699998\nTime 2.694000 and 2.699998\nTime 2.696000 and 2.699998\nTime 2.698000 and 2.699998\nTime 2.701000 and 2.699998\nTime 2.703000 and 2.729998\nTime 2.705000 and 2.729998\nTime 2.708000 and 2.729998\nTime 2.710000 and 2.729998\nTime 2.714000 and 2.729998\nTime 2.716000 and 2.729998\nTime 2.732000 and 2.729998\nTime 2.734000 and 2.759998\nTime 2.736000 and 2.759998\nTime 2.738000 and 2.759998\nTime 2.740000 and 2.759998\nTime 2.742000 and 2.759998\nTime 2.744000 and 2.759998\nTime 2.746000 and 2.759998\nTime 2.748000 and 2.759998\nTime 2.749000 and 2.759998\nTime 2.751000 and 2.759998\nTime 2.753000 and 2.759998\nTime 2.756000 and 2.759998\nTime 2.757000 and 2.759998\nTime 2.759000 and 2.759998\nTime 2.761000 and 2.759998\nTime 2.763000 and 2.789998\nTime 2.765000 and 2.789998\nTime 2.767000 and 2.789998\nTime 2.769000 and 2.789998\nTime 2.771000 and 2.789998\nTime 2.773000 and 2.789998\nTime 2.775000 and 2.789998\nTime 2.777000 and 2.789998\nTime 2.780000 and 2.789998\nTime 2.781000 and 2.789998\nTime 2.783000 and 2.789998\nTime 2.785000 and 2.789998\nTime 2.789000 and 2.789998\nTime 2.791000 and 2.789998\nTime 2.793000 and 2.819998\nTime 2.795000 and 2.819998\nTime 2.797000 and 2.819998\nTime 2.799000 and 2.819998\nTime 2.801000 and 2.819998\nTime 2.803000 and 2.819998\nTime 2.805000 and 2.819998\nTime 2.807000 and 2.819998\nTime 2.809000 and 2.819998\nTime 2.811000 and 2.819998\nTime 2.814000 and 2.819998\nTime 2.816000 and 2.819998\nTime 2.818000 and 2.819998\nTime 2.820000 and 2.819998\nTime 2.823000 and 2.849998\nTime 2.831000 and 2.849998\nTime 2.833000 and 2.849998\nTime 2.848000 and 2.849998\nTime 2.850000 and 2.849998\nTime 2.852000 and 2.879998\nTime 2.854000 and 2.879998\nTime 2.856000 and 2.879998\nTime 2.858000 and 2.879998\nTime 2.860000 and 2.879998\nTime 2.862000 and 2.879998\nTime 2.864000 and 2.879998\nTime 2.866000 and 2.879998\nTime 2.868000 and 2.879998\nTime 2.870000 and 2.879998\nTime 2.872000 and 2.879998\nTime 2.875000 and 2.879998\nTime 2.877000 and 2.879998\nTime 2.880000 and 2.879998\nTime 2.896000 and 2.909998\nTime 2.898000 and 2.909998\nTime 2.913000 and 2.909998\nTime 2.915000 and 2.939998\nTime 2.917000 and 2.939998\nTime 2.919000 and 2.939998\nTime 2.921000 and 2.939998\nTime 2.923000 and 2.939998\nTime 2.926000 and 2.939998\nTime 2.928000 and 2.939998\nTime 2.930000 and 2.939998\nTime 2.932000 and 2.939998\nTime 2.934000 and 2.939998\nTime 2.939000 and 2.939998\nTime 2.945000 and 2.939998\nTime 2.947000 and 2.969998\nTime 2.963000 and 2.969998\nTime 2.965000 and 2.969998\nTime 2.967000 and 2.969998\nTime 2.969000 and 2.969998\nTime 2.971000 and 2.969998\nTime 2.973000 and 2.999998\nTime 2.975000 and 2.999998\nTime 2.977000 and 2.999998\nTime 2.979000 and 2.999998\nTime 2.982000 and 2.999998\nTime 2.984000 and 2.999998\nTime 2.986000 and 2.999998\nTime 2.988000 and 2.999998\nTime 2.990000 and 2.999998\nTime 2.992000 and 2.999998\nTime 2.994000 and 2.999998\nTime 2.996000 and 2.999998\nTime 2.998000 and 2.999998\nTime 3.000000 and 2.999998\nTime 3.001000 and 3.029998\nTime 3.004000 and 3.029998\nTime 3.005000 and 3.029998\nTime 3.007000 and 3.029998\nTime 3.009000 and 3.029998\nTime 3.011000 and 3.029998\nTime 3.013000 and 3.029998\nTime 3.016000 and 3.029998\nTime 3.018000 and 3.029998\nTime 3.020000 and 3.029998\nTime 3.022000 and 3.029998\nTime 3.023000 and 3.029998\nTime 3.026000 and 3.029998\nTime 3.027000 and 3.029998\nTime 3.029000 and 3.029998\nTime 3.031000 and 3.029998\nTime 3.033000 and 3.059998\nTime 3.035000 and 3.059998\nTime 3.037000 and 3.059998\nTime 3.039000 and 3.059998\nTime 3.041000 and 3.059998\nTime 3.043000 and 3.059998\nTime 3.045000 and 3.059998\nTime 3.048000 and 3.059998\nTime 3.050000 and 3.059998\nTime 3.054000 and 3.059998\nTime 3.056000 and 3.059998\nTime 3.063000 and 3.059998\nTime 3.065000 and 3.089998\nTime 3.067000 and 3.089998\nTime 3.069000 and 3.089998\nTime 3.071000 and 3.089998\nTime 3.073000 and 3.089998\nTime 3.075000 and 3.089998\nTime 3.077000 and 3.089998\nTime 3.079000 and 3.089998\nTime 3.081000 and 3.089998\nTime 3.083000 and 3.089998\nTime 3.085000 and 3.089998\nTime 3.087000 and 3.089998\nTime 3.089000 and 3.089998\nTime 3.091000 and 3.089998\nTime 3.093000 and 3.119998\nTime 3.095000 and 3.119998\nTime 3.097000 and 3.119998\nTime 3.099000 and 3.119998\nTime 3.101000 and 3.119998\nTime 3.103000 and 3.119998\nTime 3.105000 and 3.119998\nTime 3.106000 and 3.119998\nTime 3.108000 and 3.119998\nTime 3.110000 and 3.119998\nTime 3.112000 and 3.119998\nTime 3.114000 and 3.119998\nTime 3.117000 and 3.119998\nTime 3.119000 and 3.119998\nTime 3.121000 and 3.119998\nTime 3.123000 and 3.149997\nTime 3.125000 and 3.149997\nTime 3.127000 and 3.149997\nTime 3.129000 and 3.149997\nTime 3.131000 and 3.149997\nTime 3.133000 and 3.149997\nTime 3.134000 and 3.149997\nTime 3.136000 and 3.149997\nTime 3.138000 and 3.149997\nTime 3.140000 and 3.149997\nTime 3.142000 and 3.149997\nTime 3.144000 and 3.149997\nTime 3.146000 and 3.149997\nTime 3.148000 and 3.149997\nTime 3.151000 and 3.149997\nTime 3.153000 and 3.179997\nTime 3.155000 and 3.179997\nTime 3.157000 and 3.179997\nTime 3.159000 and 3.179997\nTime 3.161000 and 3.179997\nTime 3.163000 and 3.179997\nTime 3.165000 and 3.179997\nTime 3.170000 and 3.179997\nTime 3.178000 and 3.179997\nTime 3.180000 and 3.179997\nTime 3.197000 and 3.209997\nTime 3.199000 and 3.209997\nTime 3.201000 and 3.209997\nTime 3.203000 and 3.209997\nTime 3.205000 and 3.209997\nTime 3.207000 and 3.209997\nTime 3.209000 and 3.209997\nTime 3.211000 and 3.209997\nTime 3.213000 and 3.239997\nTime 3.215000 and 3.239997\nTime 3.217000 and 3.239997\nTime 3.219000 and 3.239997\nTime 3.221000 and 3.239997\nTime 3.223000 and 3.239997\nTime 3.225000 and 3.239997\nTime 3.227000 and 3.239997\nTime 3.230000 and 3.239997\nTime 3.231000 and 3.239997\nTime 3.233000 and 3.239997\nTime 3.235000 and 3.239997\nTime 3.237000 and 3.239997\nTime 3.239000 and 3.239997\nTime 3.241000 and 3.239997\nTime 3.243000 and 3.269997\nTime 3.245000 and 3.269997\nTime 3.247000 and 3.269997\nTime 3.249000 and 3.269997\nTime 3.251000 and 3.269997\nTime 3.253000 and 3.269997\nTime 3.255000 and 3.269997\nTime 3.257000 and 3.269997\nTime 3.258000 and 3.269997\nTime 3.260000 and 3.269997\nTime 3.263000 and 3.269997\nTime 3.265000 and 3.269997\nTime 3.267000 and 3.269997\nTime 3.269000 and 3.269997\nTime 3.271000 and 3.269997\nTime 3.273000 and 3.299997\nTime 3.275000 and 3.299997\nTime 3.277000 and 3.299997\nTime 3.280000 and 3.299997\nTime 3.282000 and 3.299997\nTime 3.285000 and 3.299997\nTime 3.297000 and 3.299997\nTime 3.299000 and 3.299997\nTime 3.311000 and 3.299997\nTime 3.313000 and 3.329997\nTime 3.315000 and 3.329997\nTime 3.317000 and 3.329997\nTime 3.320000 and 3.329997\nTime 3.322000 and 3.329997\nTime 3.323000 and 3.329997\nTime 3.325000 and 3.329997\nTime 3.327000 and 3.329997\nTime 3.330000 and 3.329997\nTime 3.331000 and 3.359997\nTime 3.333000 and 3.359997\nTime 3.335000 and 3.359997\nTime 3.337000 and 3.359997\nTime 3.339000 and 3.359997\nTime 3.342000 and 3.359997\nTime 3.344000 and 3.359997\nTime 3.346000 and 3.359997\nTime 3.348000 and 3.359997\nTime 3.350000 and 3.359997\nTime 3.352000 and 3.359997\nTime 3.354000 and 3.359997\nTime 3.356000 and 3.359997\nTime 3.358000 and 3.359997\nTime 3.360000 and 3.359997\nTime 3.362000 and 3.389997\nTime 3.365000 and 3.389997\nTime 3.367000 and 3.389997\nTime 3.369000 and 3.389997\nTime 3.371000 and 3.389997\nTime 3.373000 and 3.389997\nTime 3.375000 and 3.389997\nTime 3.377000 and 3.389997\nTime 3.379000 and 3.389997\nTime 3.381000 and 3.389997\nTime 3.383000 and 3.389997\nTime 3.386000 and 3.389997\nTime 3.388000 and 3.389997\nTime 3.390000 and 3.389997\nTime 3.392000 and 3.419997\nTime 3.394000 and 3.419997\nTime 3.397000 and 3.419997\nTime 3.414000 and 3.419997\nTime 3.417000 and 3.419997\nTime 3.430000 and 3.419997\nTime 3.432000 and 3.449997\nTime 3.449000 and 3.449997\nTime 3.451000 and 3.449997\nTime 3.453000 and 3.479997\nTime 3.455000 and 3.479997\nTime 3.458000 and 3.479997\nTime 3.460000 and 3.479997\nTime 3.462000 and 3.479997\nTime 3.464000 and 3.479997\nTime 3.466000 and 3.479997\nTime 3.468000 and 3.479997\nTime 3.470000 and 3.479997\nTime 3.472000 and 3.479997\nTime 3.474000 and 3.479997\nTime 3.476000 and 3.479997\nTime 3.478000 and 3.479997\nTime 3.480000 and 3.479997\nTime 3.482000 and 3.509997\nTime 3.484000 and 3.509997\nTime 3.486000 and 3.509997\nTime 3.489000 and 3.509997\nTime 3.491000 and 3.509997\nTime 3.492000 and 3.509997\nTime 3.494000 and 3.509997\nTime 3.496000 and 3.509997\nTime 3.498000 and 3.509997\nTime 3.500000 and 3.509997\nTime 3.502000 and 3.509997\nTime 3.505000 and 3.509997\nTime 3.507000 and 3.509997\nTime 3.509000 and 3.509997\nTime 3.514000 and 3.509997\nTime 3.516000 and 3.539997\nTime 3.527000 and 3.539997\nTime 3.529000 and 3.539997\nTime 3.532000 and 3.539997\nTime 3.533000 and 3.539997\nTime 3.535000 and 3.539997\nTime 3.537000 and 3.539997\nTime 3.539000 and 3.539997\nTime 3.541000 and 3.539997\nTime 3.543000 and 3.569997\nTime 3.545000 and 3.569997\nTime 3.547000 and 3.569997\nTime 3.549000 and 3.569997\nTime 3.551000 and 3.569997\nTime 3.553000 and 3.569997\nTime 3.555000 and 3.569997\nTime 3.557000 and 3.569997\nTime 3.559000 and 3.569997\nTime 3.561000 and 3.569997\nTime 3.563000 and 3.569997\nTime 3.565000 and 3.569997\nTime 3.567000 and 3.569997\nTime 3.569000 and 3.569997\nTime 3.571000 and 3.569997\nTime 3.573000 and 3.599997\nTime 3.575000 and 3.599997\nTime 3.577000 and 3.599997\nTime 3.579000 and 3.599997\nTime 3.581000 and 3.599997\nTime 3.583000 and 3.599997\nTime 3.585000 and 3.599997\nTime 3.587000 and 3.599997\nTime 3.589000 and 3.599997\nTime 3.591000 and 3.599997\nTime 3.595000 and 3.599997\nTime 3.598000 and 3.599997\nTime 3.614000 and 3.599997\nTime 3.616000 and 3.629997\nTime 3.618000 and 3.629997\nTime 3.621000 and 3.629997\nTime 3.625000 and 3.629997\nTime 3.629000 and 3.629997\nTime 3.631000 and 3.629997\nTime 3.648000 and 3.659997\nTime 3.650000 and 3.659997\nTime 3.652000 and 3.659997\nTime 3.655000 and 3.659997\nTime 3.657000 and 3.659997\nTime 3.659000 and 3.659997\nTime 3.661000 and 3.659997\nTime 3.664000 and 3.689997\nTime 3.666000 and 3.689997\nTime 3.668000 and 3.689997\nTime 3.670000 and 3.689997\nTime 3.672000 and 3.689997\nTime 3.673000 and 3.689997\nTime 3.675000 and 3.689997\nTime 3.678000 and 3.689997\nTime 3.680000 and 3.689997\nTime 3.681000 and 3.689997\nTime 3.683000 and 3.689997\nTime 3.685000 and 3.689997\nTime 3.687000 and 3.689997\nTime 3.690000 and 3.689997\nTime 3.691000 and 3.719997\nTime 3.693000 and 3.719997\nTime 3.695000 and 3.719997\nTime 3.697000 and 3.719997\nTime 3.699000 and 3.719997\nTime 3.701000 and 3.719997\nTime 3.703000 and 3.719997\nTime 3.705000 and 3.719997\nTime 3.707000 and 3.719997\nTime 3.709000 and 3.719997\nTime 3.710000 and 3.719997\nTime 3.714000 and 3.719997\nTime 3.715000 and 3.719997\nTime 3.717000 and 3.719997\nTime 3.719000 and 3.719997\nTime 3.721000 and 3.719997\nTime 3.723000 and 3.749997\nTime 3.725000 and 3.749997\nTime 3.727000 and 3.749997\nTime 3.729000 and 3.749997\nTime 3.731000 and 3.749997\nTime 3.733000 and 3.749997\nTime 3.736000 and 3.749997\nTime 3.738000 and 3.749997\nTime 3.741000 and 3.749997\nTime 3.748000 and 3.749997\nTime 3.750000 and 3.749997\nTime 3.761000 and 3.779997\nTime 3.763000 and 3.779997\nTime 3.765000 and 3.779997\nTime 3.767000 and 3.779997\nTime 3.770000 and 3.779997\nTime 3.772000 and 3.779997\nTime 3.773000 and 3.779997\nTime 3.775000 and 3.779997\nTime 3.777000 and 3.779997\nTime 3.779000 and 3.779997\nTime 3.781000 and 3.779997\nTime 3.783000 and 3.809997\nTime 3.785000 and 3.809997\nTime 3.787000 and 3.809997\nTime 3.789000 and 3.809997\nTime 3.791000 and 3.809997\nTime 3.793000 and 3.809997\nTime 3.795000 and 3.809997\nTime 3.797000 and 3.809997\nTime 3.799000 and 3.809997\nTime 3.801000 and 3.809997\nTime 3.804000 and 3.809997\nTime 3.812000 and 3.809997\nTime 3.815000 and 3.839997\nTime 3.831000 and 3.839997\nTime 3.833000 and 3.839997\nTime 3.836000 and 3.839997\nTime 3.838000 and 3.839997\nTime 3.840000 and 3.839997\nTime 3.842000 and 3.869997\nTime 3.844000 and 3.869997\nTime 3.846000 and 3.869997\nTime 3.849000 and 3.869997\nTime 3.851000 and 3.869997\nTime 3.863000 and 3.869997\nTime 3.865000 and 3.869997\nTime 3.881000 and 3.869997\nTime 3.883000 and 3.899997\nTime 3.885000 and 3.899997\nTime 3.887000 and 3.899997\nTime 3.889000 and 3.899997\nTime 3.891000 and 3.899997\nTime 3.893000 and 3.899997\nTime 3.895000 and 3.899997\nTime 3.897000 and 3.899997\nTime 3.899000 and 3.899997\nTime 3.901000 and 3.899997\nTime 3.903000 and 3.929997\nTime 3.905000 and 3.929997\nTime 3.907000 and 3.929997\nTime 3.909000 and 3.929997\nTime 3.910000 and 3.929997\nTime 3.912000 and 3.929997\nTime 3.914000 and 3.929997\nTime 3.916000 and 3.929997\nTime 3.918000 and 3.929997\nTime 3.920000 and 3.929997\nTime 3.922000 and 3.929997\nTime 3.924000 and 3.929997\nTime 3.926000 and 3.929997\nTime 3.928000 and 3.929997\nTime 3.930000 and 3.929997\nTime 3.932000 and 3.959997\nTime 3.933000 and 3.959997\nTime 3.935000 and 3.959997\nTime 3.937000 and 3.959997\nTime 3.939000 and 3.959997\nTime 3.941000 and 3.959997\nTime 3.943000 and 3.959997\nTime 3.945000 and 3.959997\nTime 3.947000 and 3.959997\nTime 3.950000 and 3.959997\nTime 3.952000 and 3.959997\nTime 3.964000 and 3.959997\nTime 3.968000 and 3.989997\nTime 3.978000 and 3.989997\nTime 3.980000 and 3.989997\nTime 3.997000 and 3.989997\nTime 3.999000 and 4.019997\nTime 4.002000 and 4.019997\nTime 4.004000 and 4.019997\nTime 4.006000 and 4.019997\nTime 4.008000 and 4.019997\nTime 4.010000 and 4.019997\nTime 4.012000 and 4.019997\nTime 4.014000 and 4.019997\nTime 4.016000 and 4.019997\nTime 4.018000 and 4.019997\nTime 4.020000 and 4.019997\nTime 4.022000 and 4.049997\nTime 4.024000 and 4.049997\nTime 4.026000 and 4.049997\nTime 4.028000 and 4.049997\nTime 4.029000 and 4.049997\nTime 4.031000 and 4.049997\nTime 4.033000 and 4.049997\nTime 4.035000 and 4.049997\nTime 4.037000 and 4.049997\nTime 4.039000 and 4.049997\nTime 4.041000 and 4.049997\nTime 4.043000 and 4.049997\nTime 4.045000 and 4.049997\nTime 4.047000 and 4.049997\nTime 4.049000 and 4.049997\nTime 4.051000 and 4.049997\nTime 4.053000 and 4.079997\nTime 4.054000 and 4.079997\nTime 4.056000 and 4.079997\nTime 4.058000 and 4.079997\nTime 4.060000 and 4.079997\nTime 4.062000 and 4.079997\nTime 4.064000 and 4.079997\nTime 4.066000 and 4.079997\nTime 4.068000 and 4.079997\nTime 4.070000 and 4.079997\nTime 4.072000 and 4.079997\nTime 4.074000 and 4.079997\nTime 4.076000 and 4.079997\nTime 4.080000 and 4.079997\nTime 4.082000 and 4.109997\nTime 4.102000 and 4.109997\nTime 4.103000 and 4.109997\nTime 4.105000 and 4.109997\nTime 4.107000 and 4.109997\nTime 4.109000 and 4.109997\nTime 4.111000 and 4.109997\nTime 4.113000 and 4.139997\nTime 4.115000 and 4.139997\nTime 4.117000 and 4.139997\nTime 4.119000 and 4.139997\nTime 4.121000 and 4.139997\nTime 4.123000 and 4.139997\nTime 4.125000 and 4.139997\nTime 4.126000 and 4.139997\nTime 4.128000 and 4.139997\nTime 4.130000 and 4.139997\nTime 4.132000 and 4.139997\nTime 4.134000 and 4.139997\nTime 4.136000 and 4.139997\nTime 4.138000 and 4.139997\nTime 4.140000 and 4.139997\nTime 4.142000 and 4.169998\nTime 4.144000 and 4.169998\nTime 4.146000 and 4.169998\nTime 4.148000 and 4.169998\nTime 4.150000 and 4.169998\nTime 4.152000 and 4.169998\nTime 4.153000 and 4.169998\nTime 4.155000 and 4.169998\nTime 4.157000 and 4.169998\nTime 4.159000 and 4.169998\nTime 4.161000 and 4.169998\nTime 4.163000 and 4.169998\nTime 4.165000 and 4.169998\nTime 4.167000 and 4.169998\nTime 4.169000 and 4.169998\nTime 4.171000 and 4.169998\nTime 4.173000 and 4.199998\nTime 4.175000 and 4.199998\nTime 4.177000 and 4.199998\nTime 4.179000 and 4.199998\nTime 4.181000 and 4.199998\nTime 4.183000 and 4.199998\nTime 4.185000 and 4.199998\nTime 4.187000 and 4.199998\nTime 4.189000 and 4.199998\nTime 4.191000 and 4.199998\nTime 4.195000 and 4.199998\nTime 4.197000 and 4.199998\nTime 4.199000 and 4.199998\nTime 4.205000 and 4.199998\nTime 4.207000 and 4.229998\nTime 4.214000 and 4.229998\nTime 4.215000 and 4.229998\nTime 4.217000 and 4.229998\nTime 4.219000 and 4.229998\nTime 4.221000 and 4.229998\nTime 4.223000 and 4.229998\nTime 4.225000 and 4.229998\nTime 4.227000 and 4.229998\nTime 4.229000 and 4.229998\nTime 4.231000 and 4.229998\nTime 4.233000 and 4.259998\nTime 4.235000 and 4.259998\nTime 4.237000 and 4.259998\nTime 4.239000 and 4.259998\nTime 4.240000 and 4.259998\nTime 4.242000 and 4.259998\nTime 4.244000 and 4.259998\nTime 4.246000 and 4.259998\nTime 4.248000 and 4.259998\nTime 4.250000 and 4.259998\nTime 4.252000 and 4.259998\nTime 4.254000 and 4.259998\nTime 4.256000 and 4.259998\nTime 4.257000 and 4.259998\nTime 4.259000 and 4.259998\nTime 4.261000 and 4.259998\nTime 4.263000 and 4.289999\nTime 4.265000 and 4.289999\nTime 4.267000 and 4.289999\nTime 4.269000 and 4.289999\nTime 4.271000 and 4.289999\nTime 4.273000 and 4.289999\nTime 4.275000 and 4.289999\nTime 4.276000 and 4.289999\nTime 4.278000 and 4.289999\nTime 4.280000 and 4.289999\nTime 4.282000 and 4.289999\nTime 4.284000 and 4.289999\nTime 4.286000 and 4.289999\nTime 4.288000 and 4.289999\nTime 4.290000 and 4.289999\nTime 4.292000 and 4.319999\nTime 4.294000 and 4.319999\nTime 4.295000 and 4.319999\nTime 4.297000 and 4.319999\nTime 4.299000 and 4.319999\nTime 4.301000 and 4.319999\nTime 4.303000 and 4.319999\nTime 4.305000 and 4.319999\nTime 4.307000 and 4.319999\nTime 4.309000 and 4.319999\nTime 4.314000 and 4.319999\nTime 4.317000 and 4.319999\nTime 4.328000 and 4.319999\nTime 4.329000 and 4.349999\nTime 4.331000 and 4.349999\nTime 4.333000 and 4.349999\nTime 4.335000 and 4.349999\nTime 4.337000 and 4.349999\nTime 4.339000 and 4.349999\nTime 4.341000 and 4.349999\nTime 4.343000 and 4.349999\nTime 4.345000 and 4.349999\nTime 4.347000 and 4.349999\nTime 4.349000 and 4.349999\nTime 4.351000 and 4.349999\nTime 4.353000 and 4.379999\nTime 4.355000 and 4.379999\nTime 4.357000 and 4.379999\nTime 4.358000 and 4.379999\nTime 4.360000 and 4.379999\nTime 4.362000 and 4.379999\nTime 4.364000 and 4.379999\nTime 4.366000 and 4.379999\nTime 4.368000 and 4.379999\nTime 4.370000 and 4.379999\nTime 4.372000 and 4.379999\nTime 4.374000 and 4.379999\nTime 4.376000 and 4.379999\nTime 4.378000 and 4.379999\nTime 4.379000 and 4.379999\nTime 4.381000 and 4.379999\nTime 4.383000 and 4.409999\nTime 4.385000 and 4.409999\nTime 4.387000 and 4.409999\nTime 4.389000 and 4.409999\nTime 4.391000 and 4.409999\nTime 4.393000 and 4.409999\nTime 4.395000 and 4.409999\nTime 4.397000 and 4.409999\nTime 4.399000 and 4.409999\nTime 4.400000 and 4.409999\nTime 4.402000 and 4.409999\nTime 4.404000 and 4.409999\nTime 4.406000 and 4.409999\nTime 4.408000 and 4.409999\nTime 4.410000 and 4.409999\nTime 4.412000 and 4.440000\nTime 4.414000 and 4.440000\nTime 4.416000 and 4.440000\nTime 4.418000 and 4.440000\nTime 4.420000 and 4.440000\nTime 4.422000 and 4.440000\nTime 4.431000 and 4.440000\nTime 4.433000 and 4.440000\nTime 4.448000 and 4.440000\nTime 4.450000 and 4.470000\nTime 4.452000 and 4.470000\nTime 4.454000 and 4.470000\nTime 4.456000 and 4.470000\nTime 4.458000 and 4.470000\nTime 4.460000 and 4.470000\nTime 4.462000 and 4.470000\nTime 4.464000 and 4.470000\nTime 4.466000 and 4.470000\nTime 4.467000 and 4.470000\nTime 4.469000 and 4.470000\nTime 4.471000 and 4.470000\nTime 4.473000 and 4.500000\nTime 4.475000 and 4.500000\nTime 4.478000 and 4.500000\nTime 4.480000 and 4.500000\nTime 4.483000 and 4.500000\nTime 4.484000 and 4.500000\nTime 4.486000 and 4.500000\nTime 4.488000 and 4.500000\nTime 4.490000 and 4.500000\nTime 4.492000 and 4.500000\nTime 4.494000 and 4.500000\nTime 4.496000 and 4.500000\nTime 4.498000 and 4.500000\nTime 4.499000 and 4.500000\nTime 4.501000 and 4.500000\nTime 4.503000 and 4.530000\nTime 4.505000 and 4.530000\nTime 4.507000 and 4.530000\nTime 4.509000 and 4.530000\nTime 4.511000 and 4.530000\nTime 4.513000 and 4.530000\nTime 4.515000 and 4.530000\nTime 4.517000 and 4.530000\nTime 4.519000 and 4.530000\nTime 4.521000 and 4.530000\nTime 4.524000 and 4.530000\nTime 4.526000 and 4.530000\nTime 4.529000 and 4.530000\nTime 4.532000 and 4.530000\nTime 4.535000 and 4.560000\nTime 4.537000 and 4.560000\nTime 4.539000 and 4.560000\nTime 4.541000 and 4.560000\nTime 4.546000 and 4.560000\nTime 4.548000 and 4.560000\nTime 4.565000 and 4.560000\nTime 4.567000 and 4.590001\nTime 4.569000 and 4.590001\nTime 4.571000 and 4.590001\nTime 4.573000 and 4.590001\nTime 4.575000 and 4.590001\nTime 4.578000 and 4.590001\nTime 4.580000 and 4.590001\nTime 4.582000 and 4.590001\nTime 4.585000 and 4.590001\nTime 4.587000 and 4.590001\nTime 4.589000 and 4.590001\nTime 4.591000 and 4.590001\nTime 4.594000 and 4.620001\nTime 4.596000 and 4.620001\nTime 4.598000 and 4.620001\nTime 4.601000 and 4.620001\nTime 4.603000 and 4.620001\nTime 4.612000 and 4.620001\nTime 4.614000 and 4.620001\nTime 4.631000 and 4.620001\nTime 4.633000 and 4.650001\nTime 4.636000 and 4.650001\nTime 4.638000 and 4.650001\nTime 4.640000 and 4.650001\nTime 4.642000 and 4.650001\nTime 4.644000 and 4.650001\nTime 4.646000 and 4.650001\nTime 4.648000 and 4.650001\nTime 4.651000 and 4.650001\nTime 4.653000 and 4.680001\nTime 4.659000 and 4.680001\nTime 4.661000 and 4.680001\nTime 4.663000 and 4.680001\nTime 4.669000 and 4.680001\nTime 4.671000 and 4.680001\nTime 4.673000 and 4.680001\nTime 4.679000 and 4.680001\nTime 4.681000 and 4.680001\nTime 4.683000 and 4.710001\nTime 4.685000 and 4.710001\nTime 4.687000 and 4.710001\nTime 4.689000 and 4.710001\nTime 4.692000 and 4.710001\nTime 4.693000 and 4.710001\nTime 4.695000 and 4.710001\nTime 4.697000 and 4.710001\nTime 4.699000 and 4.710001\nTime 4.701000 and 4.710001\nTime 4.703000 and 4.710001\nTime 4.705000 and 4.710001\nTime 4.707000 and 4.710001\nTime 4.709000 and 4.710001\nTime 4.711000 and 4.710001\nTime 4.713000 and 4.740002\nTime 4.715000 and 4.740002\nTime 4.717000 and 4.740002\nTime 4.719000 and 4.740002\nTime 4.721000 and 4.740002\nTime 4.723000 and 4.740002\nTime 4.725000 and 4.740002\nTime 4.727000 and 4.740002\nTime 4.729000 and 4.740002\nTime 4.731000 and 4.740002\nTime 4.732000 and 4.740002\nTime 4.734000 and 4.740002\nTime 4.736000 and 4.740002\nTime 4.738000 and 4.740002\nTime 4.740000 and 4.740002\nTime 4.742000 and 4.740002\nTime 4.744000 and 4.770002\nTime 4.746000 and 4.770002\nTime 4.748000 and 4.770002\nTime 4.750000 and 4.770002\nTime 4.752000 and 4.770002\nTime 4.754000 and 4.770002\nTime 4.755000 and 4.770002\nTime 4.758000 and 4.770002\nTime 4.760000 and 4.770002\nTime 4.762000 and 4.770002\nTime 4.764000 and 4.770002\nTime 4.766000 and 4.770002\nTime 4.768000 and 4.770002\nTime 4.770000 and 4.770002\nTime 4.772000 and 4.770002\nTime 4.776000 and 4.800002\nTime 4.777000 and 4.800002\nTime 4.779000 and 4.800002\nTime 4.786000 and 4.800002\nTime 4.788000 and 4.800002\nTime 4.795000 and 4.800002\nTime 4.797000 and 4.800002\nTime 4.799000 and 4.800002\nTime 4.801000 and 4.800002\nTime 4.803000 and 4.830002\nTime 4.805000 and 4.830002\nTime 4.807000 and 4.830002\nTime 4.809000 and 4.830002\nTime 4.811000 and 4.830002\nTime 4.813000 and 4.830002\nTime 4.815000 and 4.830002\nTime 4.817000 and 4.830002\nTime 4.819000 and 4.830002\nTime 4.821000 and 4.830002\nTime 4.823000 and 4.830002\nTime 4.825000 and 4.830002\nTime 4.827000 and 4.830002\nTime 4.829000 and 4.830002\nTime 4.831000 and 4.830002\nTime 4.833000 and 4.860003\nTime 4.835000 and 4.860003\nTime 4.837000 and 4.860003\nTime 4.839000 and 4.860003\nTime 4.841000 and 4.860003\nTime 4.843000 and 4.860003\nTime 4.845000 and 4.860003\nTime 4.847000 and 4.860003\nTime 4.849000 and 4.860003\nTime 4.851000 and 4.860003\nTime 4.852000 and 4.860003\nTime 4.854000 and 4.860003\nTime 4.856000 and 4.860003\nTime 4.858000 and 4.860003\nTime 4.860000 and 4.860003\nTime 4.862000 and 4.860003\nTime 4.864000 and 4.890003\nTime 4.866000 and 4.890003\nTime 4.868000 and 4.890003\nTime 4.870000 and 4.890003\nTime 4.872000 and 4.890003\nTime 4.874000 and 4.890003\nTime 4.875000 and 4.890003\nTime 4.878000 and 4.890003\nTime 4.880000 and 4.890003\nTime 4.882000 and 4.890003\nTime 4.885000 and 4.890003\nTime 4.887000 and 4.890003\nTime 4.889000 and 4.890003\nTime 4.897000 and 4.890003\nTime 4.899000 and 4.920003\nTime 4.916000 and 4.920003\nTime 4.918000 and 4.920003\nTime 4.920000 and 4.920003\nTime 4.922000 and 4.920003\nTime 4.929000 and 4.950003\nTime 4.931000 and 4.950003\nTime 4.947000 and 4.950003\nTime 4.949000 and 4.950003\nTime 4.951000 and 4.950003\nTime 4.953000 and 4.980003\nTime 4.955000 and 4.980003\nTime 4.957000 and 4.980003\nTime 4.959000 and 4.980003\nTime 4.961000 and 4.980003\nTime 4.963000 and 4.980003\nTime 4.965000 and 4.980003\nTime 4.967000 and 4.980003\nTime 4.969000 and 4.980003\nTime 4.971000 and 4.980003\nTime 4.973000 and 4.980003\nTime 4.975000 and 4.980003\nTime 4.977000 and 4.980003\nTime 4.978000 and 4.980003\nTime 4.980000 and 4.980003\nTime 4.982000 and 4.980003\nTime 4.984000 and 5.010004\nTime 4.987000 and 5.010004\nTime 4.989000 and 5.010004\nTime 4.991000 and 5.010004\nTime 4.993000 and 5.010004\nTime 4.995000 and 5.010004\nTime 4.998000 and 5.010004\nTime 5.000000 and 5.010004\nTime 5.002000 and 5.010004\nTime 5.004000 and 5.010004\nTime 5.006000 and 5.010004\nTime 5.012000 and 5.010004\nTime 5.014000 and 5.040004\nTime 5.030000 and 5.040004\nTime 5.032000 and 5.040004\nTime 5.034000 and 5.040004\nTime 5.036000 and 5.040004\nTime 5.038000 and 5.040004\nTime 5.040000 and 5.040004\nTime 5.042000 and 5.040004\nTime 5.044000 and 5.070004\nTime 5.046000 and 5.070004\nTime 5.048000 and 5.070004\nTime 5.050000 and 5.070004\nTime 5.052000 and 5.070004\nTime 5.054000 and 5.070004\nTime 5.056000 and 5.070004\nTime 5.058000 and 5.070004\nTime 5.060000 and 5.070004\nTime 5.063000 and 5.070004\nTime 5.065000 and 5.070004\nTime 5.067000 and 5.070004\nTime 5.069000 and 5.070004\nTime 5.071000 and 5.070004\nTime 5.073000 and 5.100004\nTime 5.075000 and 5.100004\nTime 5.077000 and 5.100004\nTime 5.079000 and 5.100004\nTime 5.080000 and 5.100004\nTime 5.083000 and 5.100004\nTime 5.085000 and 5.100004\nTime 5.087000 and 5.100004\nTime 5.089000 and 5.100004\nTime 5.090000 and 5.100004\nTime 5.092000 and 5.100004\nTime 5.094000 and 5.100004\nTime 5.096000 and 5.100004\nTime 5.098000 and 5.100004\nTime 5.100000 and 5.100004\nTime 5.102000 and 5.100004\nTime 5.104000 and 5.130004\nTime 5.106000 and 5.130004\nTime 5.108000 and 5.130004\nTime 5.111000 and 5.130004\nTime 5.113000 and 5.130004\nTime 5.115000 and 5.130004\nTime 5.117000 and 5.130004\nTime 5.120000 and 5.130004\nTime 5.122000 and 5.130004\nTime 5.124000 and 5.130004\nTime 5.126000 and 5.130004\nTime 5.129000 and 5.130004\nTime 5.131000 and 5.130004\nTime 5.147000 and 5.160005\nTime 5.149000 and 5.160005\nTime 5.151000 and 5.160005\nTime 5.153000 and 5.160005\nTime 5.155000 and 5.160005\nTime 5.157000 and 5.160005\nTime 5.159000 and 5.160005\nTime 5.161000 and 5.160005\nTime 5.163000 and 5.190005\nTime 5.165000 and 5.190005\nTime 5.167000 and 5.190005\nTime 5.168000 and 5.190005\nTime 5.170000 and 5.190005\nTime 5.172000 and 5.190005\nTime 5.174000 and 5.190005\nTime 5.176000 and 5.190005\nTime 5.178000 and 5.190005\nTime 5.180000 and 5.190005\nTime 5.182000 and 5.190005\nTime 5.184000 and 5.190005\nTime 5.186000 and 5.190005\nTime 5.187000 and 5.190005\nTime 5.189000 and 5.190005\nTime 5.193000 and 5.190005\nTime 5.193000 and 5.220005\nTime 5.195000 and 5.220005\nTime 5.197000 and 5.220005\nTime 5.199000 and 5.220005\nTime 5.201000 and 5.220005\nTime 5.204000 and 5.220005\nTime 5.205000 and 5.220005\nTime 5.207000 and 5.220005\nTime 5.209000 and 5.220005\nTime 5.211000 and 5.220005\nTime 5.213000 and 5.220005\nTime 5.215000 and 5.220005\nTime 5.217000 and 5.220005\nTime 5.219000 and 5.220005\nTime 5.221000 and 5.220005\nTime 5.223000 and 5.250005\nTime 5.225000 and 5.250005\nTime 5.227000 and 5.250005\nTime 5.229000 and 5.250005\nTime 5.231000 and 5.250005\nTime 5.233000 and 5.250005\nTime 5.235000 and 5.250005\nTime 5.237000 and 5.250005\nTime 5.241000 and 5.250005\nTime 5.245000 and 5.250005\nTime 5.247000 and 5.250005\nTime 5.263000 and 5.250005\nTime 5.265000 and 5.280005\nTime 5.267000 and 5.280005\nTime 5.269000 and 5.280005\nTime 5.271000 and 5.280005\nTime 5.273000 and 5.280005\nTime 5.275000 and 5.280005\nTime 5.277000 and 5.280005\nTime 5.279000 and 5.280005\nTime 5.281000 and 5.280005\nTime 5.283000 and 5.310006\nTime 5.285000 and 5.310006\nTime 5.287000 and 5.310006\nTime 5.289000 and 5.310006\nTime 5.291000 and 5.310006\nTime 5.293000 and 5.310006\nTime 5.294000 and 5.310006\nTime 5.296000 and 5.310006\nTime 5.298000 and 5.310006\nTime 5.300000 and 5.310006\nTime 5.302000 and 5.310006\nTime 5.304000 and 5.310006\nTime 5.306000 and 5.310006\nTime 5.308000 and 5.310006\nTime 5.310000 and 5.310006\nTime 5.312000 and 5.310006\nTime 5.314000 and 5.340006\nTime 5.316000 and 5.340006\nTime 5.318000 and 5.340006\nTime 5.320000 and 5.340006\nTime 5.322000 and 5.340006\nTime 5.324000 and 5.340006\nTime 5.326000 and 5.340006\nTime 5.328000 and 5.340006\nTime 5.330000 and 5.340006\nTime 5.332000 and 5.340006\nTime 5.334000 and 5.340006\nTime 5.336000 and 5.340006\nTime 5.338000 and 5.340006\nTime 5.341000 and 5.340006\nTime 5.343000 and 5.370006\nTime 5.345000 and 5.370006\nTime 5.348000 and 5.370006\nTime 5.350000 and 5.370006\nTime 5.352000 and 5.370006\nTime 5.355000 and 5.370006\nTime 5.357000 and 5.370006\nTime 5.359000 and 5.370006\nTime 5.361000 and 5.370006\nTime 5.368000 and 5.370006\nTime 5.370000 and 5.370006\nTime 5.381000 and 5.370006\nTime 5.383000 and 5.400006\nTime 5.385000 and 5.400006\nTime 5.387000 and 5.400006\nTime 5.390000 and 5.400006\nTime 5.392000 and 5.400006\nTime 5.394000 and 5.400006\nTime 5.396000 and 5.400006\nTime 5.398000 and 5.400006\nTime 5.400000 and 5.400006\nTime 5.402000 and 5.400006\nTime 5.404000 and 5.430007\nTime 5.406000 and 5.430007\nTime 5.408000 and 5.430007\nTime 5.410000 and 5.430007\nTime 5.412000 and 5.430007\nTime 5.414000 and 5.430007\nTime 5.416000 and 5.430007\nTime 5.418000 and 5.430007\nTime 5.420000 and 5.430007\nTime 5.422000 and 5.430007\nTime 5.424000 and 5.430007\nTime 5.426000 and 5.430007\nTime 5.428000 and 5.430007\nTime 5.430000 and 5.430007\nTime 5.432000 and 5.430007\nTime 5.434000 and 5.460007\nTime 5.436000 and 5.460007\nTime 5.438000 and 5.460007\nTime 5.440000 and 5.460007\nTime 5.442000 and 5.460007\nTime 5.444000 and 5.460007\nTime 5.446000 and 5.460007\nTime 5.448000 and 5.460007\nTime 5.450000 and 5.460007\nTime 5.452000 and 5.460007\nTime 5.454000 and 5.460007\nTime 5.456000 and 5.460007\nTime 5.458000 and 5.460007\nTime 5.460000 and 5.460007\nTime 5.462000 and 5.460007\nTime 5.464000 and 5.490007\nTime 5.467000 and 5.490007\nTime 5.469000 and 5.490007\nTime 5.471000 and 5.490007\nTime 5.474000 and 5.490007\nTime 5.476000 and 5.490007\nTime 5.478000 and 5.490007\nTime 5.482000 and 5.490007\nTime 5.484000 and 5.490007\nTime 5.497000 and 5.490007\nTime 5.499000 and 5.520007\nTime 5.501000 and 5.520007\nTime 5.503000 and 5.520007\nTime 5.505000 and 5.520007\nTime 5.508000 and 5.520007\nTime 5.513000 and 5.520007\nTime 5.516000 and 5.520007\nTime 5.531000 and 5.520007\nTime 5.534000 and 5.550007\nTime 5.536000 and 5.550007\nTime 5.538000 and 5.550007\nTime 5.540000 and 5.550007\nTime 5.542000 and 5.550007\nTime 5.544000 and 5.550007\nTime 5.546000 and 5.550007\nTime 5.548000 and 5.550007\nTime 5.549000 and 5.550007\nTime 5.551000 and 5.550007\nTime 5.553000 and 5.580008\nTime 5.555000 and 5.580008\nTime 5.557000 and 5.580008\nTime 5.559000 and 5.580008\nTime 5.561000 and 5.580008\nTime 5.563000 and 5.580008\nTime 5.565000 and 5.580008\nTime 5.567000 and 5.580008\nTime 5.569000 and 5.580008\nTime 5.571000 and 5.580008\nTime 5.572000 and 5.580008\nTime 5.574000 and 5.580008\nTime 5.576000 and 5.580008\nTime 5.578000 and 5.580008\nTime 5.581000 and 5.580008\nTime 5.583000 and 5.610008\nTime 5.585000 and 5.610008\nTime 5.588000 and 5.610008\nTime 5.590000 and 5.610008\nTime 5.596000 and 5.610008\nTime 5.598000 and 5.610008\nTime 5.615000 and 5.610008\nTime 5.617000 and 5.640008\nTime 5.619000 and 5.640008\nTime 5.621000 and 5.640008\nTime 5.622000 and 5.640008\nTime 5.625000 and 5.640008\nTime 5.626000 and 5.640008\nTime 5.628000 and 5.640008\nTime 5.630000 and 5.640008\nTime 5.632000 and 5.640008\nTime 5.634000 and 5.640008\nTime 5.636000 and 5.640008\nTime 5.638000 and 5.640008\nTime 5.640000 and 5.640008\nTime 5.642000 and 5.640008\nTime 5.644000 and 5.670008\nTime 5.646000 and 5.670008\nTime 5.648000 and 5.670008\nTime 5.651000 and 5.670008\nTime 5.653000 and 5.670008\nTime 5.655000 and 5.670008\nTime 5.657000 and 5.670008\nTime 5.659000 and 5.670008\nTime 5.661000 and 5.670008\nTime 5.663000 and 5.670008\nTime 5.665000 and 5.670008\nTime 5.667000 and 5.670008\nTime 5.669000 and 5.670008\nTime 5.671000 and 5.670008\nTime 5.673000 and 5.700008\nTime 5.675000 and 5.700008\nTime 5.677000 and 5.700008\nTime 5.679000 and 5.700008\nTime 5.681000 and 5.700008\nTime 5.683000 and 5.700008\nTime 5.685000 and 5.700008\nTime 5.687000 and 5.700008\nTime 5.689000 and 5.700008\nTime 5.691000 and 5.700008\nTime 5.694000 and 5.700008\nTime 5.696000 and 5.700008\nTime 5.698000 and 5.700008\nTime 5.700000 and 5.700008\nTime 5.703000 and 5.700008\nTime 5.705000 and 5.730009\nTime 5.713000 and 5.730009\nTime 5.715000 and 5.730009\nTime 5.730000 and 5.730009\nTime 5.732000 and 5.730009\nTime 5.749000 and 5.760009\nTime 5.751000 and 5.760009\nTime 5.753000 and 5.760009\nTime 5.755000 and 5.760009\nTime 5.757000 and 5.760009\nTime 5.759000 and 5.760009\nTime 5.761000 and 5.760009\nTime 5.763000 and 5.790009\nTime 5.765000 and 5.790009\nTime 5.767000 and 5.790009\nTime 5.769000 and 5.790009\nTime 5.772000 and 5.790009\nTime 5.774000 and 5.790009\nTime 5.776000 and 5.790009\nTime 5.778000 and 5.790009\nTime 5.780000 and 5.790009\nTime 5.782000 and 5.790009\nTime 5.784000 and 5.790009\nTime 5.786000 and 5.790009\nTime 5.788000 and 5.790009\nTime 5.790000 and 5.790009\nTime 5.792000 and 5.790009\nTime 5.795000 and 5.820009\nTime 5.797000 and 5.820009\nTime 5.799000 and 5.820009\nTime 5.801000 and 5.820009\nTime 5.803000 and 5.820009\nTime 5.806000 and 5.820009\nTime 5.808000 and 5.820009\nTime 5.810000 and 5.820009\nTime 5.813000 and 5.820009\nTime 5.815000 and 5.820009\nTime 5.818000 and 5.820009\nTime 5.831000 and 5.820009\nTime 5.846000 and 5.850009\nTime 5.848000 and 5.850009\nTime 5.864000 and 5.850009\nTime 5.879000 and 5.880010\nTime 5.881000 and 5.880010\nTime 5.898000 and 5.910010\nTime 5.899000 and 5.910010\nTime 5.902000 and 5.910010\nTime 5.904000 and 5.910010\nTime 5.907000 and 5.910010\nTime 5.909000 and 5.910010\nTime 5.911000 and 5.910010\nTime 5.913000 and 5.940010\nTime 5.915000 and 5.940010\nTime 5.919000 and 5.940010\nTime 5.921000 and 5.940010\nTime 5.923000 and 5.940010\nTime 5.926000 and 5.940010\nTime 5.928000 and 5.940010\nTime 5.932000 and 5.940010\nTime 5.946000 and 5.940010\nTime 5.948000 and 5.970010\nTime 5.964000 and 5.970010\nTime 5.966000 and 5.970010\nTime 5.968000 and 5.970010\nTime 5.970000 and 5.970010\nTime 5.972000 and 5.970010\nTime 5.974000 and 6.000010\nTime 5.976000 and 6.000010\nTime 5.978000 and 6.000010\nTime 5.980000 and 6.000010\nTime 5.982000 and 6.000010\nTime 5.984000 and 6.000010\nTime 5.986000 and 6.000010\nTime 5.988000 and 6.000010\nTime 5.990000 and 6.000010\nTime 5.992000 and 6.000010\nTime 5.994000 and 6.000010\nTime 5.996000 and 6.000010\nTime 5.998000 and 6.000010\nTime 5.999000 and 6.000010\nTime 6.001000 and 6.000010\nTime 6.003000 and 6.030011\nTime 6.005000 and 6.030011\nTime 6.008000 and 6.030011\nTime 6.010000 and 6.030011\nTime 6.012000 and 6.030011\nTime 6.014000 and 6.030011\nTime 6.016000 and 6.030011\nTime 6.018000 and 6.030011\nTime 6.019000 and 6.030011\nTime 6.021000 and 6.030011\nTime 6.023000 and 6.030011\nTime 6.025000 and 6.030011\nTime 6.027000 and 6.030011\nTime 6.029000 and 6.030011\nTime 6.031000 and 6.030011\nTime 6.033000 and 6.060011\nTime 6.035000 and 6.060011\nTime 6.037000 and 6.060011\nTime 6.039000 and 6.060011\nTime 6.041000 and 6.060011\nTime 6.043000 and 6.060011\nTime 6.045000 and 6.060011\nTime 6.047000 and 6.060011\nTime 6.049000 and 6.060011\nTime 6.053000 and 6.060011\nTime 6.055000 and 6.060011\nTime 6.062000 and 6.060011\nTime 6.064000 and 6.090011\nTime 6.066000 and 6.090011\nTime 6.068000 and 6.090011\nTime 6.069000 and 6.090011\nTime 6.071000 and 6.090011\nTime 6.073000 and 6.090011\nTime 6.075000 and 6.090011\nTime 6.077000 and 6.090011\nTime 6.079000 and 6.090011\nTime 6.081000 and 6.090011\nTime 6.083000 and 6.090011\nTime 6.085000 and 6.090011\nTime 6.087000 and 6.090011\nTime 6.089000 and 6.090011\nTime 6.091000 and 6.090011\nTime 6.092000 and 6.120011\nTime 6.094000 and 6.120011\nTime 6.096000 and 6.120011\nTime 6.098000 and 6.120011\nTime 6.100000 and 6.120011\nTime 6.102000 and 6.120011\nTime 6.104000 and 6.120011\nTime 6.106000 and 6.120011\nTime 6.108000 and 6.120011\nTime 6.110000 and 6.120011\nTime 6.112000 and 6.120011\nTime 6.114000 and 6.120011\nTime 6.116000 and 6.120011\nTime 6.118000 and 6.120011\nTime 6.120000 and 6.120011\nTime 6.122000 and 6.120011\nTime 6.124000 and 6.150012\nTime 6.125000 and 6.150012\nTime 6.127000 and 6.150012\nTime 6.129000 and 6.150012\nTime 6.131000 and 6.150012\nTime 6.133000 and 6.150012\nTime 6.135000 and 6.150012\nTime 6.137000 and 6.150012\nTime 6.139000 and 6.150012\nTime 6.141000 and 6.150012\nTime 6.143000 and 6.150012\nTime 6.144000 and 6.150012\nTime 6.147000 and 6.150012\nTime 6.149000 and 6.150012\nTime 6.151000 and 6.150012\nTime 6.153000 and 6.180012\nTime 6.155000 and 6.180012\nTime 6.158000 and 6.180012\nTime 6.160000 and 6.180012\nTime 6.162000 and 6.180012\nTime 6.164000 and 6.180012\nTime 6.166000 and 6.180012\nTime 6.181000 and 6.180012\nTime 6.183000 and 6.210012\nTime 6.195000 and 6.210012\nTime 6.198000 and 6.210012\nTime 6.200000 and 6.210012\nTime 6.202000 and 6.210012\nTime 6.204000 and 6.210012\nTime 6.206000 and 6.210012\nTime 6.208000 and 6.210012\nTime 6.211000 and 6.210012\nTime 6.212000 and 6.240012\nTime 6.214000 and 6.240012\nTime 6.217000 and 6.240012\nTime 6.219000 and 6.240012\nTime 6.221000 and 6.240012\nTime 6.229000 and 6.240012\nTime 6.231000 and 6.240012\nTime 6.249000 and 6.240012\nTime 6.250000 and 6.270012\nTime 6.252000 and 6.270012\nTime 6.256000 and 6.270012\nTime 6.258000 and 6.270012\nTime 6.260000 and 6.270012\nTime 6.262000 and 6.270012\nTime 6.264000 and 6.270012\nTime 6.266000 and 6.270012\nTime 6.268000 and 6.270012\nTime 6.270000 and 6.270012\nTime 6.272000 and 6.270012\nTime 6.274000 and 6.300013\nTime 6.276000 and 6.300013\nTime 6.279000 and 6.300013\nTime 6.282000 and 6.300013\nTime 6.298000 and 6.300013\nTime 6.300000 and 6.300013\nTime 6.311000 and 6.300013\nTime 6.313000 and 6.330013\nTime 6.315000 and 6.330013\nTime 6.317000 and 6.330013\nTime 6.319000 and 6.330013\nTime 6.321000 and 6.330013\nTime 6.324000 and 6.330013\nTime 6.326000 and 6.330013\nTime 6.327000 and 6.330013\nTime 6.329000 and 6.330013\nTime 6.331000 and 6.330013\nTime 6.334000 and 6.360013\nTime 6.336000 and 6.360013\nTime 6.338000 and 6.360013\nTime 6.339000 and 6.360013\nTime 6.341000 and 6.360013\nTime 6.343000 and 6.360013\nTime 6.346000 and 6.360013\nTime 6.348000 and 6.360013\nTime 6.350000 and 6.360013\nTime 6.352000 and 6.360013\nTime 6.354000 and 6.360013\nTime 6.356000 and 6.360013\nTime 6.358000 and 6.360013\nTime 6.360000 and 6.360013\nTime 6.362000 and 6.360013\nTime 6.364000 and 6.390013\nTime 6.366000 and 6.390013\nTime 6.369000 and 6.390013\nTime 6.371000 and 6.390013\nTime 6.373000 and 6.390013\nTime 6.375000 and 6.390013\nTime 6.377000 and 6.390013\nTime 6.380000 and 6.390013\nTime 6.382000 and 6.390013\nTime 6.385000 and 6.390013\nTime 6.387000 and 6.390013\nTime 6.390000 and 6.390013\nTime 6.392000 and 6.390013\nTime 6.394000 and 6.420013\nTime 6.395000 and 6.420013\nTime 6.398000 and 6.420013\nTime 6.414000 and 6.420013\nTime 6.416000 and 6.420013\nTime 6.428000 and 6.420013\nTime 6.430000 and 6.450014\nTime 6.432000 and 6.450014\nTime 6.434000 and 6.450014\nTime 6.436000 and 6.450014\nTime 6.438000 and 6.450014\nTime 6.440000 and 6.450014\nTime 6.442000 and 6.450014\nTime 6.444000 and 6.450014\nTime 6.447000 and 6.450014\nTime 6.449000 and 6.450014\nTime 6.451000 and 6.450014\nTime 6.453000 and 6.480014\nTime 6.455000 and 6.480014\nTime 6.457000 and 6.480014\nTime 6.459000 and 6.480014\nTime 6.461000 and 6.480014\nTime 6.463000 and 6.480014\nTime 6.465000 and 6.480014\nTime 6.467000 and 6.480014\nTime 6.470000 and 6.480014\nTime 6.472000 and 6.480014\nTime 6.474000 and 6.480014\nTime 6.476000 and 6.480014\nTime 6.478000 and 6.480014\nTime 6.481000 and 6.480014\nTime 6.483000 and 6.510014\nTime 6.485000 and 6.510014\nTime 6.487000 and 6.510014\nTime 6.489000 and 6.510014\nTime 6.492000 and 6.510014\nTime 6.494000 and 6.510014\nTime 6.496000 and 6.510014\nTime 6.498000 and 6.510014\nTime 6.500000 and 6.510014\nTime 6.503000 and 6.510014\nTime 6.504000 and 6.510014\nTime 6.507000 and 6.510014\nTime 6.509000 and 6.510014\nTime 6.514000 and 6.510014\nTime 6.516000 and 6.540014\nTime 6.528000 and 6.540014\nTime 6.529000 and 6.540014\nTime 6.531000 and 6.540014\nTime 6.533000 and 6.540014\nTime 6.536000 and 6.540014\nTime 6.538000 and 6.540014\nTime 6.540000 and 6.540014\nTime 6.542000 and 6.540014\nTime 6.545000 and 6.570014\nTime 6.547000 and 6.570014\nTime 6.549000 and 6.570014\nTime 6.551000 and 6.570014\nTime 6.553000 and 6.570014\nTime 6.555000 and 6.570014\nTime 6.557000 and 6.570014\nTime 6.559000 and 6.570014\nTime 6.561000 and 6.570014\nTime 6.563000 and 6.570014\nTime 6.565000 and 6.570014\nTime 6.566000 and 6.570014\nTime 6.568000 and 6.570014\nTime 6.571000 and 6.570014\nTime 6.573000 and 6.600015\nTime 6.575000 and 6.600015\nTime 6.577000 and 6.600015\nTime 6.579000 and 6.600015\nTime 6.581000 and 6.600015\nTime 6.583000 and 6.600015\nTime 6.585000 and 6.600015\nTime 6.587000 and 6.600015\nTime 6.589000 and 6.600015\nTime 6.591000 and 6.600015\nTime 6.594000 and 6.600015\nTime 6.595000 and 6.600015\nTime 6.597000 and 6.600015\nTime 6.599000 and 6.600015\nTime 6.601000 and 6.600015\nTime 6.603000 and 6.630015\nTime 6.605000 and 6.630015\nTime 6.607000 and 6.630015\nTime 6.609000 and 6.630015\nTime 6.611000 and 6.630015\nTime 6.613000 and 6.630015\nTime 6.615000 and 6.630015\nTime 6.617000 and 6.630015\nTime 6.619000 and 6.630015\nTime 6.621000 and 6.630015\nTime 6.623000 and 6.630015\nTime 6.625000 and 6.630015\nTime 6.627000 and 6.630015\nTime 6.632000 and 6.630015\nTime 6.634000 and 6.660015\nTime 6.646000 and 6.660015\nTime 6.648000 and 6.660015\nTime 6.650000 and 6.660015\nTime 6.652000 and 6.660015\nTime 6.654000 and 6.660015\nTime 6.656000 and 6.660015\nTime 6.658000 and 6.660015\nTime 6.661000 and 6.660015\nTime 6.663000 and 6.690015\nTime 6.665000 and 6.690015\nTime 6.667000 and 6.690015\nTime 6.669000 and 6.690015\nTime 6.671000 and 6.690015\nTime 6.673000 and 6.690015\nTime 6.675000 and 6.690015\nTime 6.677000 and 6.690015\nTime 6.679000 and 6.690015\nTime 6.681000 and 6.690015\nTime 6.684000 and 6.690015\nTime 6.686000 and 6.690015\nTime 6.688000 and 6.690015\nTime 6.690000 and 6.690015\nTime 6.691000 and 6.690015\nTime 6.694000 and 6.720016\nTime 6.696000 and 6.720016\nTime 6.698000 and 6.720016\nTime 6.700000 and 6.720016\nTime 6.701000 and 6.720016\nTime 6.703000 and 6.720016\nTime 6.706000 and 6.720016\nTime 6.708000 and 6.720016\nTime 6.710000 and 6.720016\nTime 6.712000 and 6.720016\nTime 6.714000 and 6.720016\nTime 6.716000 and 6.720016\nTime 6.718000 and 6.720016\nTime 6.720000 and 6.720016\nTime 6.722000 and 6.720016\nTime 6.724000 and 6.750016\nTime 6.726000 and 6.750016\nTime 6.729000 and 6.750016\nTime 6.731000 and 6.750016\nTime 6.733000 and 6.750016\nTime 6.734000 and 6.750016\nTime 6.737000 and 6.750016\nTime 6.740000 and 6.750016\nTime 6.743000 and 6.750016\nTime 6.746000 and 6.750016\nTime 6.748000 and 6.750016\nTime 6.759000 and 6.750016\nTime 6.762000 and 6.780016\nTime 6.811000 and 6.780016\nTime 6.816000 and 6.810016\nTime 6.830000 and 6.840016\nTime 6.835000 and 6.840016\nTime 6.847000 and 6.840016\nTime 6.868000 and 6.870017\nTime 6.886000 and 6.870017\nTime 6.895000 and 6.900017\nTime 6.915000 and 6.900017\nTime 6.933000 and 6.930017\nTime 6.945000 and 6.960017\nTime 6.965000 and 6.960017\nTime 6.967000 and 6.990017\nTime 6.969000 and 6.990017\nTime 6.971000 and 6.990017\nTime 6.973000 and 6.990017\nTime 6.975000 and 6.990017\nTime 6.977000 and 6.990017\nTime 6.979000 and 6.990017\nTime 6.981000 and 6.990017\nTime 6.983000 and 6.990017\nTime 6.985000 and 6.990017\nTime 6.987000 and 6.990017\nTime 6.989000 and 6.990017\nTime 6.990000 and 6.990017\nTime 6.992000 and 6.990017\nTime 6.994000 and 7.020018\nTime 6.996000 and 7.020018\nTime 6.998000 and 7.020018\nTime 7.000000 and 7.020018\nTime 7.002000 and 7.020018\nTime 7.004000 and 7.020018\nTime 7.006000 and 7.020018\nTime 7.008000 and 7.020018\nTime 7.010000 and 7.020018\nTime 7.012000 and 7.020018\nTime 7.014000 and 7.020018\nTime 7.016000 and 7.020018\nTime 7.018000 and 7.020018\nTime 7.020000 and 7.020018\nTime 7.021000 and 7.020018\nTime 7.023000 and 7.050018\nTime 7.025000 and 7.050018\nTime 7.027000 and 7.050018\nTime 7.030000 and 7.050018\nTime 7.032000 and 7.050018\nTime 7.034000 and 7.050018\nTime 7.036000 and 7.050018\nTime 7.039000 and 7.050018\nTime 7.048000 and 7.050018\nTime 7.050000 and 7.050018\nTime 7.061000 and 7.050018\nTime 7.063000 and 7.080018\nTime 7.065000 and 7.080018\nTime 7.067000 and 7.080018\nTime 7.069000 and 7.080018\nTime 7.071000 and 7.080018\nTime 7.073000 and 7.080018\nTime 7.075000 and 7.080018\nTime 7.077000 and 7.080018\nTime 7.079000 and 7.080018\nTime 7.081000 and 7.080018\nTime 7.083000 and 7.110018\nTime 7.086000 and 7.110018\nTime 7.088000 and 7.110018\nTime 7.090000 and 7.110018\nTime 7.092000 and 7.110018\nTime 7.094000 and 7.110018\nTime 7.096000 and 7.110018\nTime 7.098000 and 7.110018\nTime 7.102000 and 7.110018\nTime 7.104000 and 7.110018\nTime 7.106000 and 7.110018\nTime 7.108000 and 7.110018\nTime 7.110000 and 7.110018\nTime 7.112000 and 7.110018\nTime 7.114000 and 7.140018\nTime 7.116000 and 7.140018\nTime 7.118000 and 7.140018\nTime 7.120000 and 7.140018\nTime 7.123000 and 7.140018\nTime 7.125000 and 7.140018\nTime 7.126000 and 7.140018\nTime 7.128000 and 7.140018\nTime 7.130000 and 7.140018\nTime 7.132000 and 7.140018\nTime 7.134000 and 7.140018\nTime 7.136000 and 7.140018\nTime 7.138000 and 7.140018\nTime 7.140000 and 7.140018\nTime 7.142000 and 7.140018\nTime 7.145000 and 7.170019\nTime 7.147000 and 7.170019\nTime 7.149000 and 7.170019\nTime 7.152000 and 7.170019\nTime 7.154000 and 7.170019\nTime 7.156000 and 7.170019\nTime 7.159000 and 7.170019\nTime 7.164000 and 7.170019\nTime 7.166000 and 7.170019\nTime 7.182000 and 7.170019\nTime 7.184000 and 7.200019\nTime 7.186000 and 7.200019\nTime 7.188000 and 7.200019\nTime 7.190000 and 7.200019\nTime 7.192000 and 7.200019\nTime 7.194000 and 7.200019\nTime 7.196000 and 7.200019\nTime 7.198000 and 7.200019\nTime 7.200000 and 7.200019\nTime 7.202000 and 7.200019\nTime 7.204000 and 7.230019\nTime 7.206000 and 7.230019\nTime 7.208000 and 7.230019\nTime 7.209000 and 7.230019\nTime 7.213000 and 7.230019\nTime 7.215000 and 7.230019\nTime 7.217000 and 7.230019\nTime 7.218000 and 7.230019\nTime 7.220000 and 7.230019\nTime 7.222000 and 7.230019\nTime 7.224000 and 7.230019\nTime 7.226000 and 7.230019\nTime 7.228000 and 7.230019\nTime 7.230000 and 7.230019\nTime 7.232000 and 7.230019\nTime 7.234000 and 7.260019\nTime 7.236000 and 7.260019\nTime 7.238000 and 7.260019\nTime 7.240000 and 7.260019\nTime 7.241000 and 7.260019\nTime 7.243000 and 7.260019\nTime 7.246000 and 7.260019\nTime 7.248000 and 7.260019\nTime 7.250000 and 7.260019\nTime 7.252000 and 7.260019\nTime 7.254000 and 7.260019\nTime 7.256000 and 7.260019\nTime 7.258000 and 7.260019\nTime 7.259000 and 7.260019\nTime 7.262000 and 7.260019\nTime 7.264000 and 7.290020\nTime 7.266000 and 7.290020\nTime 7.268000 and 7.290020\nTime 7.270000 and 7.290020\nTime 7.272000 and 7.290020\nTime 7.274000 and 7.290020\nTime 7.277000 and 7.290020\nTime 7.284000 and 7.290020\nTime 7.286000 and 7.290020\nTime 7.297000 and 7.290020\nTime 7.299000 and 7.320020\nTime 7.301000 and 7.320020\nTime 7.303000 and 7.320020\nTime 7.305000 and 7.320020\nTime 7.307000 and 7.320020\nTime 7.309000 and 7.320020\nTime 7.311000 and 7.320020\nTime 7.313000 and 7.320020\nTime 7.315000 and 7.320020\nTime 7.317000 and 7.320020\nTime 7.319000 and 7.320020\nTime 7.321000 and 7.320020\nTime 7.323000 and 7.350020\nTime 7.325000 and 7.350020\nTime 7.326000 and 7.350020\nTime 7.328000 and 7.350020\nTime 7.330000 and 7.350020\nTime 7.332000 and 7.350020\nTime 7.334000 and 7.350020\nTime 7.336000 and 7.350020\nTime 7.338000 and 7.350020\nTime 7.340000 and 7.350020\nTime 7.342000 and 7.350020\nTime 7.344000 and 7.350020\nTime 7.346000 and 7.350020\nTime 7.348000 and 7.350020\nTime 7.349000 and 7.350020\nTime 7.351000 and 7.350020\nTime 7.353000 and 7.380020\nTime 7.355000 and 7.380020\nTime 7.357000 and 7.380020\nTime 7.360000 and 7.380020\nTime 7.362000 and 7.380020\nTime 7.364000 and 7.380020\nTime 7.366000 and 7.380020\nTime 7.368000 and 7.380020\nTime 7.370000 and 7.380020\nTime 7.372000 and 7.380020\nTime 7.374000 and 7.380020\nTime 7.376000 and 7.380020\nTime 7.378000 and 7.380020\nTime 7.380000 and 7.380020\nTime 7.382000 and 7.380020\nTime 7.384000 and 7.410020\nTime 7.387000 and 7.410020\nTime 7.389000 and 7.410020\nTime 7.391000 and 7.410020\nTime 7.393000 and 7.410020\nTime 7.398000 and 7.410020\nTime 7.400000 and 7.410020\nTime 7.411000 and 7.410020\nTime 7.413000 and 7.440021\nTime 7.415000 and 7.440021\nTime 7.417000 and 7.440021\nTime 7.419000 and 7.440021\nTime 7.422000 and 7.440021\nTime 7.424000 and 7.440021\nTime 7.426000 and 7.440021\nTime 7.428000 and 7.440021\nTime 7.430000 and 7.440021\nTime 7.432000 and 7.440021\nTime 7.434000 and 7.440021\nTime 7.436000 and 7.440021\nTime 7.438000 and 7.440021\nTime 7.440000 and 7.440021\nTime 7.441000 and 7.440021\nTime 7.443000 and 7.470021\nTime 7.445000 and 7.470021\nTime 7.447000 and 7.470021\nTime 7.450000 and 7.470021\nTime 7.453000 and 7.470021\nTime 7.464000 and 7.470021\nTime 7.466000 and 7.470021\nTime 7.478000 and 7.470021\nTime 7.480000 and 7.500021\nTime 7.482000 and 7.500021\nTime 7.484000 and 7.500021\nTime 7.486000 and 7.500021\nTime 7.488000 and 7.500021\nTime 7.490000 and 7.500021\nTime 7.492000 and 7.500021\nTime 7.493000 and 7.500021\nTime 7.495000 and 7.500021\nTime 7.497000 and 7.500021\nTime 7.499000 and 7.500021\nTime 7.501000 and 7.500021\nTime 7.503000 and 7.530021\nTime 7.505000 and 7.530021\nTime 7.507000 and 7.530021\nTime 7.508000 and 7.530021\nTime 7.510000 and 7.530021\nTime 7.512000 and 7.530021\nTime 7.514000 and 7.530021\nTime 7.516000 and 7.530021\nTime 7.518000 and 7.530021\nTime 7.520000 and 7.530021\nTime 7.522000 and 7.530021\nTime 7.525000 and 7.530021\nTime 7.528000 and 7.530021\nTime 7.530000 and 7.530021\nTime 7.532000 and 7.530021\nTime 7.534000 and 7.560021\nTime 7.536000 and 7.560021\nTime 7.538000 and 7.560021\nTime 7.541000 and 7.560021\nTime 7.545000 and 7.560021\nTime 7.548000 and 7.560021\nTime 7.577000 and 7.560021\nTime 7.581000 and 7.590022\nTime 7.583000 and 7.590022\nTime 7.596000 and 7.590022\nTime 7.601000 and 7.620022\nTime 7.603000 and 7.620022\nTime 7.614000 and 7.620022\nTime 7.616000 and 7.620022\nTime 7.618000 and 7.620022\nTime 7.620000 and 7.620022\nTime 7.622000 and 7.620022\nTime 7.624000 and 7.650022\nTime 7.626000 and 7.650022\nTime 7.627000 and 7.650022\nTime 7.629000 and 7.650022\nTime 7.631000 and 7.650022\nTime 7.633000 and 7.650022\nTime 7.635000 and 7.650022\nTime 7.637000 and 7.650022\nTime 7.639000 and 7.650022\nTime 7.641000 and 7.650022\nTime 7.643000 and 7.650022\nTime 7.645000 and 7.650022\nTime 7.646000 and 7.650022\nTime 7.649000 and 7.650022\nTime 7.651000 and 7.650022\nTime 7.653000 and 7.680022\nTime 7.655000 and 7.680022\nTime 7.657000 and 7.680022\nTime 7.659000 and 7.680022\nTime 7.661000 and 7.680022\nTime 7.662000 and 7.680022\nTime 7.664000 and 7.680022\nTime 7.666000 and 7.680022\nTime 7.668000 and 7.680022\nTime 7.670000 and 7.680022\nTime 7.672000 and 7.680022\nTime 7.674000 and 7.680022\nTime 7.676000 and 7.680022\nTime 7.678000 and 7.680022\nTime 7.680000 and 7.680022\nTime 7.681000 and 7.680022\nTime 7.683000 and 7.710022\nTime 7.685000 and 7.710022\nTime 7.687000 and 7.710022\nTime 7.689000 and 7.710022\nTime 7.691000 and 7.710022\nTime 7.693000 and 7.710022\nTime 7.695000 and 7.710022\nTime 7.698000 and 7.710022\nTime 7.700000 and 7.710022\nTime 7.702000 and 7.710022\nTime 7.715000 and 7.710022\nTime 7.717000 and 7.740023\nTime 7.729000 and 7.740023\nTime 7.731000 and 7.740023\nTime 7.733000 and 7.740023\nTime 7.735000 and 7.740023\nTime 7.737000 and 7.740023\nTime 7.739000 and 7.740023\nTime 7.741000 and 7.740023\nTime 7.743000 and 7.770023\nTime 7.744000 and 7.770023\nTime 7.746000 and 7.770023\nTime 7.748000 and 7.770023\nTime 7.750000 and 7.770023\nTime 7.752000 and 7.770023\nTime 7.754000 and 7.770023\nTime 7.756000 and 7.770023\nTime 7.758000 and 7.770023\nTime 7.760000 and 7.770023\nTime 7.762000 and 7.770023\nTime 7.764000 and 7.770023\nTime 7.767000 and 7.770023\nTime 7.769000 and 7.770023\nTime 7.771000 and 7.770023\nTime 7.773000 and 7.800023\nTime 7.775000 and 7.800023\nTime 7.777000 and 7.800023\nTime 7.779000 and 7.800023\nTime 7.785000 and 7.800023\nTime 7.787000 and 7.800023\nTime 7.798000 and 7.800023\nTime 7.800000 and 7.800023\nTime 7.802000 and 7.800023\nTime 7.804000 and 7.830023\nTime 7.813000 and 7.830023\nTime 7.829000 and 7.830023\nTime 7.831000 and 7.830023\nTime 7.847000 and 7.860023\nTime 7.849000 and 7.860023\nTime 7.851000 and 7.860023\nTime 7.853000 and 7.860023\nTime 7.855000 and 7.860023\nTime 7.857000 and 7.860023\nTime 7.860000 and 7.860023\nTime 7.862000 and 7.860023\nTime 7.864000 and 7.890024\nTime 7.865000 and 7.890024\nTime 7.867000 and 7.890024\nTime 7.869000 and 7.890024\nTime 7.871000 and 7.890024\nTime 7.873000 and 7.890024\nTime 7.875000 and 7.890024\nTime 7.877000 and 7.890024\nTime 7.879000 and 7.890024\nTime 7.881000 and 7.890024\nTime 7.883000 and 7.890024\nTime 7.885000 and 7.890024\nTime 7.887000 and 7.890024\nTime 7.889000 and 7.890024\nTime 7.892000 and 7.890024\nTime 7.894000 and 7.920024\nTime 7.899000 and 7.920024\nTime 7.901000 and 7.920024\nTime 7.912000 and 7.920024\nTime 7.914000 and 7.920024\nTime 7.916000 and 7.920024\nTime 7.918000 and 7.920024\nTime 7.920000 and 7.920024\nTime 7.922000 and 7.920024\nTime 7.924000 and 7.950024\nTime 7.925000 and 7.950024\nTime 7.927000 and 7.950024\nTime 7.929000 and 7.950024\nTime 7.931000 and 7.950024\nTime 7.933000 and 7.950024\nTime 7.935000 and 7.950024\nTime 7.937000 and 7.950024\nTime 7.939000 and 7.950024\nTime 7.941000 and 7.950024\nTime 7.943000 and 7.950024\nTime 7.945000 and 7.950024\nTime 7.946000 and 7.950024\nTime 7.948000 and 7.950024\nTime 7.950000 and 7.950024\nTime 7.952000 and 7.950024\nTime 7.954000 and 7.980024\nTime 7.956000 and 7.980024\nTime 7.958000 and 7.980024\nTime 7.960000 and 7.980024\nTime 7.962000 and 7.980024\nTime 7.964000 and 7.980024\nTime 7.965000 and 7.980024\nTime 7.967000 and 7.980024\nTime 7.969000 and 7.980024\nTime 7.971000 and 7.980024\nTime 7.973000 and 7.980024\nTime 7.975000 and 7.980024\nTime 7.977000 and 7.980024\nTime 7.979000 and 7.980024\nTime 7.981000 and 7.980024\nTime 7.983000 and 8.010024\nTime 7.985000 and 8.010024\nTime 7.987000 and 8.010024\nTime 7.989000 and 8.010024\nTime 7.991000 and 8.010024\nTime 7.992000 and 8.010024\nTime 7.994000 and 8.010024\nTime 7.996000 and 8.010024\nTime 7.999000 and 8.010024\nTime 8.001000 and 8.010024\nTime 8.003000 and 8.010024\nTime 8.005000 and 8.010024\nTime 8.007000 and 8.010024\nTime 8.009000 and 8.010024\nTime 8.011000 and 8.010024\nTime 8.013000 and 8.040024\nTime 8.015000 and 8.040024\nTime 8.019000 and 8.040024\nTime 8.021000 and 8.040024\nTime 8.027000 and 8.040024\nTime 8.030000 and 8.040024\nTime 8.032000 and 8.040024\nTime 8.034000 and 8.040024\nTime 8.037000 and 8.040024\nTime 8.040000 and 8.040024\nTime 8.042000 and 8.040024\nTime 8.044000 and 8.070024\nTime 8.046000 and 8.070024\nTime 8.048000 and 8.070024\nTime 8.050000 and 8.070024\nTime 8.053000 and 8.070024\nTime 8.055000 and 8.070024\nTime 8.057000 and 8.070024\nTime 8.058000 and 8.070024\nTime 8.060000 and 8.070024\nTime 8.062000 and 8.070024\nTime 8.064000 and 8.070024\nTime 8.066000 and 8.070024\nTime 8.068000 and 8.070024\nTime 8.070000 and 8.070024\nTime 8.072000 and 8.070024\nTime 8.074000 and 8.100023\nTime 8.076000 and 8.100023\nTime 8.078000 and 8.100023\nTime 8.080000 and 8.100023\nTime 8.082000 and 8.100023\nTime 8.084000 and 8.100023\nTime 8.087000 and 8.100023\nTime 8.089000 and 8.100023\nTime 8.091000 and 8.100023\nTime 8.093000 and 8.100023\nTime 8.096000 and 8.100023\nTime 8.098000 and 8.100023\nTime 8.100000 and 8.100023\nTime 8.102000 and 8.100023\nTime 8.104000 and 8.130023\nTime 8.106000 and 8.130023\nTime 8.108000 and 8.130023\nTime 8.110000 and 8.130023\nTime 8.111000 and 8.130023\nTime 8.113000 and 8.130023\nTime 8.115000 and 8.130023\nTime 8.117000 and 8.130023\nTime 8.119000 and 8.130023\nTime 8.122000 and 8.130023\nTime 8.124000 and 8.130023\nTime 8.126000 and 8.130023\nTime 8.128000 and 8.130023\nTime 8.130000 and 8.130023\nTime 8.132000 and 8.130023\nTime 8.134000 and 8.160023\nTime 8.136000 and 8.160023\nTime 8.139000 and 8.160023\nTime 8.142000 and 8.160023\nTime 8.148000 and 8.160023\nTime 8.150000 and 8.160023\nTime 8.152000 and 8.160023\nTime 8.154000 and 8.160023\nTime 8.156000 and 8.160023\nTime 8.158000 and 8.160023\nTime 8.159000 and 8.160023\nTime 8.161000 and 8.160023\nTime 8.163000 and 8.190022\nTime 8.165000 and 8.190022\nTime 8.167000 and 8.190022\nTime 8.169000 and 8.190022\nTime 8.171000 and 8.190022\nTime 8.173000 and 8.190022\nTime 8.175000 and 8.190022\nTime 8.177000 and 8.190022\nTime 8.179000 and 8.190022\nTime 8.181000 and 8.190022\nTime 8.182000 and 8.190022\nTime 8.184000 and 8.190022\nTime 8.186000 and 8.190022\nTime 8.188000 and 8.190022\nTime 8.190000 and 8.190022\nTime 8.192000 and 8.190022\nTime 8.194000 and 8.220022\nTime 8.196000 and 8.220022\nTime 8.198000 and 8.220022\nTime 8.200000 and 8.220022\nTime 8.201000 and 8.220022\nTime 8.203000 and 8.220022\nTime 8.205000 and 8.220022\nTime 8.207000 and 8.220022\nTime 8.209000 and 8.220022\nTime 8.211000 and 8.220022\nTime 8.213000 and 8.220022\nTime 8.215000 and 8.220022\nTime 8.218000 and 8.220022\nTime 8.220000 and 8.220022\nTime 8.222000 and 8.220022\nTime 8.224000 and 8.250022\nTime 8.226000 and 8.250022\nTime 8.227000 and 8.250022\nTime 8.229000 and 8.250022\nTime 8.231000 and 8.250022\nTime 8.233000 and 8.250022\nTime 8.235000 and 8.250022\nTime 8.237000 and 8.250022\nTime 8.239000 and 8.250022\nTime 8.242000 and 8.250022\nTime 8.244000 and 8.250022\nTime 8.246000 and 8.250022\nTime 8.249000 and 8.250022\nTime 8.251000 and 8.250022\nTime 8.253000 and 8.280022\nTime 8.265000 and 8.280022\nTime 8.267000 and 8.280022\nTime 8.279000 and 8.280022\nTime 8.281000 and 8.280022\nTime 8.282000 and 8.310021\nTime 8.284000 and 8.310021\nTime 8.286000 and 8.310021\nTime 8.288000 and 8.310021\nTime 8.290000 and 8.310021\nTime 8.292000 and 8.310021\nTime 8.294000 and 8.310021\nTime 8.296000 and 8.310021\nTime 8.298000 and 8.310021\nTime 8.300000 and 8.310021\nTime 8.302000 and 8.310021\nTime 8.303000 and 8.310021\nTime 8.305000 and 8.310021\nTime 8.307000 and 8.310021\nTime 8.309000 and 8.310021\nTime 8.311000 and 8.310021\nTime 8.313000 and 8.340021\nTime 8.315000 and 8.340021\nTime 8.317000 and 8.340021\nTime 8.319000 and 8.340021\nTime 8.321000 and 8.340021\nTime 8.323000 and 8.340021\nTime 8.324000 and 8.340021\nTime 8.326000 and 8.340021\nTime 8.328000 and 8.340021\nTime 8.330000 and 8.340021\nTime 8.332000 and 8.340021\nTime 8.334000 and 8.340021\nTime 8.336000 and 8.340021\nTime 8.338000 and 8.340021\nTime 8.340000 and 8.340021\nTime 8.342000 and 8.340021\nTime 8.343000 and 8.370021\nTime 8.345000 and 8.370021\nTime 8.347000 and 8.370021\nTime 8.349000 and 8.370021\nTime 8.351000 and 8.370021\nTime 8.353000 and 8.370021\nTime 8.355000 and 8.370021\nTime 8.357000 and 8.370021\nTime 8.359000 and 8.370021\nTime 8.361000 and 8.370021\nTime 8.363000 and 8.370021\nTime 8.366000 and 8.370021\nTime 8.368000 and 8.370021\nTime 8.370000 and 8.370021\nTime 8.372000 and 8.370021\nTime 8.375000 and 8.400021\nTime 8.380000 and 8.400021\nTime 8.382000 and 8.400021\nTime 8.398000 and 8.400021\nTime 8.400000 and 8.400021\nTime 8.402000 and 8.400021\nTime 8.404000 and 8.430020\nTime 8.406000 and 8.430020\nTime 8.408000 and 8.430020\nTime 8.410000 and 8.430020\nTime 8.412000 and 8.430020\nTime 8.413000 and 8.430020\nTime 8.415000 and 8.430020\nTime 8.417000 and 8.430020\nTime 8.419000 and 8.430020\nTime 8.422000 and 8.430020\nTime 8.424000 and 8.430020\nTime 8.426000 and 8.430020\nTime 8.428000 and 8.430020\nTime 8.430000 and 8.430020\nTime 8.432000 and 8.430020\nTime 8.434000 and 8.460020\nTime 8.436000 and 8.460020\nTime 8.438000 and 8.460020\nTime 8.440000 and 8.460020\nTime 8.442000 and 8.460020\nTime 8.444000 and 8.460020\nTime 8.445000 and 8.460020\nTime 8.447000 and 8.460020\nTime 8.449000 and 8.460020\nTime 8.451000 and 8.460020\nTime 8.453000 and 8.460020\nTime 8.455000 and 8.460020\nTime 8.457000 and 8.460020\nTime 8.459000 and 8.460020\nTime 8.461000 and 8.460020\nTime 8.463000 and 8.490020\nTime 8.465000 and 8.490020\nTime 8.466000 and 8.490020\nTime 8.468000 and 8.490020\nTime 8.470000 and 8.490020\nTime 8.472000 and 8.490020\nTime 8.474000 and 8.490020\nTime 8.476000 and 8.490020\nTime 8.478000 and 8.490020\nTime 8.480000 and 8.490020\nTime 8.482000 and 8.490020\nTime 8.484000 and 8.490020\nTime 8.487000 and 8.490020\nTime 8.489000 and 8.490020\nTime 8.491000 and 8.490020\nTime 8.493000 and 8.520020\nTime 8.497000 and 8.520020\nTime 8.499000 and 8.520020\nTime 8.515000 and 8.520020\nTime 8.517000 and 8.520020\nTime 8.519000 and 8.520020\nTime 8.521000 and 8.520020\nTime 8.523000 and 8.550019\nTime 8.525000 and 8.550019\nTime 8.526000 and 8.550019\nTime 8.528000 and 8.550019\nTime 8.530000 and 8.550019\nTime 8.532000 and 8.550019\nTime 8.534000 and 8.550019\nTime 8.536000 and 8.550019\nTime 8.538000 and 8.550019\nTime 8.540000 and 8.550019\nTime 8.542000 and 8.550019\nTime 8.544000 and 8.550019\nTime 8.546000 and 8.550019\nTime 8.547000 and 8.550019\nTime 8.549000 and 8.550019\nTime 8.551000 and 8.550019\nTime 8.553000 and 8.580019\nTime 8.555000 and 8.580019\nTime 8.557000 and 8.580019\nTime 8.559000 and 8.580019\nTime 8.561000 and 8.580019\nTime 8.563000 and 8.580019\nTime 8.565000 and 8.580019\nTime 8.566000 and 8.580019\nTime 8.568000 and 8.580019\nTime 8.570000 and 8.580019\nTime 8.572000 and 8.580019\nTime 8.574000 and 8.580019\nTime 8.576000 and 8.580019\nTime 8.578000 and 8.580019\nTime 8.580000 and 8.580019\nTime 8.582000 and 8.580019\nTime 8.584000 and 8.610019\nTime 8.585000 and 8.610019\nTime 8.587000 and 8.610019\nTime 8.589000 and 8.610019\nTime 8.591000 and 8.610019\nTime 8.593000 and 8.610019\nTime 8.595000 and 8.610019\nTime 8.598000 and 8.610019\nTime 8.600000 and 8.610019\nTime 8.601000 and 8.610019\nTime 8.604000 and 8.610019\nTime 8.606000 and 8.610019\nTime 8.608000 and 8.610019\nTime 8.614000 and 8.610019\nTime 8.616000 and 8.640018\nTime 8.627000 and 8.640018\nTime 8.629000 and 8.640018\nTime 8.631000 and 8.640018\nTime 8.633000 and 8.640018\nTime 8.635000 and 8.640018\nTime 8.637000 and 8.640018\nTime 8.639000 and 8.640018\nTime 8.641000 and 8.640018\nTime 8.643000 and 8.670018\nTime 8.644000 and 8.670018\nTime 8.646000 and 8.670018\nTime 8.648000 and 8.670018\nTime 8.650000 and 8.670018\nTime 8.652000 and 8.670018\nTime 8.654000 and 8.670018\nTime 8.656000 and 8.670018\nTime 8.658000 and 8.670018\nTime 8.660000 and 8.670018\nTime 8.662000 and 8.670018\nTime 8.664000 and 8.670018\nTime 8.666000 and 8.670018\nTime 8.668000 and 8.670018\nTime 8.669000 and 8.670018\nTime 8.671000 and 8.670018\nTime 8.673000 and 8.700018\nTime 8.675000 and 8.700018\nTime 8.677000 and 8.700018\nTime 8.679000 and 8.700018\nTime 8.681000 and 8.700018\nTime 8.683000 and 8.700018\nTime 8.685000 and 8.700018\nTime 8.687000 and 8.700018\nTime 8.689000 and 8.700018\nTime 8.691000 and 8.700018\nTime 8.692000 and 8.700018\nTime 8.694000 and 8.700018\nTime 8.696000 and 8.700018\nTime 8.698000 and 8.700018\nTime 8.700000 and 8.700018\nTime 8.702000 and 8.700018\nTime 8.704000 and 8.730018\nTime 8.706000 and 8.730018\nTime 8.708000 and 8.730018\nTime 8.710000 and 8.730018\nTime 8.712000 and 8.730018\nTime 8.714000 and 8.730018\nTime 8.716000 and 8.730018\nTime 8.718000 and 8.730018\nTime 8.720000 and 8.730018\nTime 8.722000 and 8.730018\nTime 8.724000 and 8.730018\nTime 8.726000 and 8.730018\nTime 8.728000 and 8.730018\nTime 8.733000 and 8.730018\nTime 8.735000 and 8.760017\nTime 8.749000 and 8.760017\nTime 8.754000 and 8.760017\nTime 8.755000 and 8.760017\nTime 8.762000 and 8.760017\nTime 8.764000 and 8.790017\nTime 8.766000 and 8.790017\nTime 8.768000 and 8.790017\nTime 8.770000 and 8.790017\nTime 8.772000 and 8.790017\nTime 8.773000 and 8.790017\nTime 8.775000 and 8.790017\nTime 8.777000 and 8.790017\nTime 8.779000 and 8.790017\nTime 8.781000 and 8.790017\nTime 8.783000 and 8.790017\nTime 8.785000 and 8.790017\nTime 8.787000 and 8.790017\nTime 8.789000 and 8.790017\nTime 8.791000 and 8.790017\nTime 8.793000 and 8.820017\nTime 8.795000 and 8.820017\nTime 8.797000 and 8.820017\nTime 8.799000 and 8.820017\nTime 8.801000 and 8.820017\nTime 8.804000 and 8.820017\nTime 8.813000 and 8.820017\nTime 8.815000 and 8.820017\nTime 8.831000 and 8.820017\nTime 8.834000 and 8.850017\nTime 8.836000 and 8.850017\nTime 8.839000 and 8.850017\nTime 8.841000 and 8.850017\nTime 8.843000 and 8.850017\nTime 8.845000 and 8.850017\nTime 8.848000 and 8.850017\nTime 8.853000 and 8.850017\nTime 8.864000 and 8.880016\nTime 8.866000 and 8.880016\nTime 8.869000 and 8.880016\nTime 8.870000 and 8.880016\nTime 8.872000 and 8.880016\nTime 8.874000 and 8.880016\nTime 8.876000 and 8.880016\nTime 8.878000 and 8.880016\nTime 8.880000 and 8.880016\nTime 8.882000 and 8.880016\nTime 8.884000 and 8.910016\nTime 8.886000 and 8.910016\nTime 8.888000 and 8.910016\nTime 8.890000 and 8.910016\nTime 8.892000 and 8.910016\nTime 8.893000 and 8.910016\nTime 8.895000 and 8.910016\nTime 8.897000 and 8.910016\nTime 8.899000 and 8.910016\nTime 8.901000 and 8.910016\nTime 8.903000 and 8.910016\nTime 8.905000 and 8.910016\nTime 8.907000 and 8.910016\nTime 8.909000 and 8.910016\nTime 8.911000 and 8.910016\nTime 8.913000 and 8.940016\nTime 8.914000 and 8.940016\nTime 8.916000 and 8.940016\nTime 8.918000 and 8.940016\nTime 8.920000 and 8.940016\nTime 8.922000 and 8.940016\nTime 8.924000 and 8.940016\nTime 8.926000 and 8.940016\nTime 8.928000 and 8.940016\nTime 8.930000 and 8.940016\nTime 8.931000 and 8.940016\nTime 8.933000 and 8.940016\nTime 8.935000 and 8.940016\nTime 8.937000 and 8.940016\nTime 8.939000 and 8.940016\nTime 8.941000 and 8.940016\nTime 8.943000 and 8.970016\nTime 8.945000 and 8.970016\nTime 8.947000 and 8.970016\nTime 8.949000 and 8.970016\nTime 8.951000 and 8.970016\nTime 8.953000 and 8.970016\nTime 8.955000 and 8.970016\nTime 8.958000 and 8.970016\nTime 8.960000 and 8.970016\nTime 8.964000 and 8.970016\nTime 8.966000 and 8.970016\nTime 8.978000 and 8.970016\nTime 8.980000 and 9.000015\nTime 8.982000 and 9.000015\nTime 8.984000 and 9.000015\nTime 8.986000 and 9.000015\nTime 8.989000 and 9.000015\nTime 8.995000 and 9.000015\nTime 8.997000 and 9.000015\nTime 8.999000 and 9.000015\nTime 9.001000 and 9.000015\nTime 9.003000 and 9.030015\nTime 9.005000 and 9.030015\nTime 9.007000 and 9.030015\nTime 9.009000 and 9.030015\nTime 9.011000 and 9.030015\nTime 9.013000 and 9.030015\nTime 9.015000 and 9.030015\nTime 9.017000 and 9.030015\nTime 9.019000 and 9.030015\nTime 9.021000 and 9.030015\nTime 9.022000 and 9.030015\nTime 9.024000 and 9.030015\nTime 9.026000 and 9.030015\nTime 9.028000 and 9.030015\nTime 9.030000 and 9.030015\nTime 9.032000 and 9.030015\nTime 9.034000 and 9.060015\nTime 9.036000 and 9.060015\nTime 9.038000 and 9.060015\nTime 9.040000 and 9.060015\nTime 9.042000 and 9.060015\nTime 9.044000 and 9.060015\nTime 9.046000 and 9.060015\nTime 9.047000 and 9.060015\nTime 9.049000 and 9.060015\nTime 9.051000 and 9.060015\nTime 9.053000 and 9.060015\nTime 9.055000 and 9.060015\nTime 9.057000 and 9.060015\nTime 9.059000 and 9.060015\nTime 9.062000 and 9.060015\nTime 9.064000 and 9.090014\nTime 9.067000 and 9.090014\nTime 9.069000 and 9.090014\nTime 9.071000 and 9.090014\nTime 9.073000 and 9.090014\nTime 9.075000 and 9.090014\nTime 9.077000 and 9.090014\nTime 9.082000 and 9.090014\nTime 9.084000 and 9.090014\nTime 9.098000 and 9.090014\nTime 9.100000 and 9.120014\nTime 9.102000 and 9.120014\nTime 9.105000 and 9.120014\nTime 9.107000 and 9.120014\nTime 9.109000 and 9.120014\nTime 9.111000 and 9.120014\nTime 9.113000 and 9.120014\nTime 9.115000 and 9.120014\nTime 9.117000 and 9.120014\nTime 9.119000 and 9.120014\nTime 9.121000 and 9.120014\nTime 9.123000 and 9.150014\nTime 9.125000 and 9.150014\nTime 9.128000 and 9.150014\nTime 9.130000 and 9.150014\nTime 9.132000 and 9.150014\nTime 9.134000 and 9.150014\nTime 9.136000 and 9.150014\nTime 9.138000 and 9.150014\nTime 9.140000 and 9.150014\nTime 9.142000 and 9.150014\nTime 9.144000 and 9.150014\nTime 9.146000 and 9.150014\nTime 9.148000 and 9.150014\nTime 9.150000 and 9.150014\nTime 9.152000 and 9.150014\nTime 9.154000 and 9.180014\nTime 9.156000 and 9.180014\nTime 9.158000 and 9.180014\nTime 9.160000 and 9.180014\nTime 9.162000 and 9.180014\nTime 9.164000 and 9.180014\nTime 9.166000 and 9.180014\nTime 9.168000 and 9.180014\nTime 9.170000 and 9.180014\nTime 9.172000 and 9.180014\nTime 9.173000 and 9.180014\nTime 9.175000 and 9.180014\nTime 9.177000 and 9.180014\nTime 9.179000 and 9.180014\nTime 9.181000 and 9.180014\nTime 9.183000 and 9.210013\nTime 9.185000 and 9.210013\nTime 9.187000 and 9.210013\nTime 9.190000 and 9.210013\nTime 9.192000 and 9.210013\nTime 9.194000 and 9.210013\nTime 9.201000 and 9.210013\nTime 9.203000 and 9.210013\nTime 9.214000 and 9.210013\nTime 9.216000 and 9.240013\nTime 9.218000 and 9.240013\nTime 9.220000 and 9.240013\nTime 9.222000 and 9.240013\nTime 9.224000 and 9.240013\nTime 9.225000 and 9.240013\nTime 9.227000 and 9.240013\nTime 9.229000 and 9.240013\nTime 9.231000 and 9.240013\nTime 9.233000 and 9.240013\nTime 9.235000 and 9.240013\nTime 9.237000 and 9.240013\nTime 9.239000 and 9.240013\nTime 9.241000 and 9.240013\nTime 9.243000 and 9.270013\nTime 9.245000 and 9.270013\nTime 9.247000 and 9.270013\nTime 9.248000 and 9.270013\nTime 9.250000 and 9.270013\nTime 9.252000 and 9.270013\nTime 9.254000 and 9.270013\nTime 9.256000 and 9.270013\nTime 9.258000 and 9.270013\nTime 9.260000 and 9.270013\nTime 9.262000 and 9.270013\nTime 9.264000 and 9.270013\nTime 9.265000 and 9.270013\nTime 9.267000 and 9.270013\nTime 9.269000 and 9.270013\nTime 9.271000 and 9.270013\nTime 9.273000 and 9.300013\nTime 9.275000 and 9.300013\nTime 9.277000 and 9.300013\nTime 9.279000 and 9.300013\nTime 9.281000 and 9.300013\nTime 9.283000 and 9.300013\nTime 9.285000 and 9.300013\nTime 9.287000 and 9.300013\nTime 9.289000 and 9.300013\nTime 9.291000 and 9.300013\nTime 9.293000 and 9.300013\nTime 9.295000 and 9.300013\nTime 9.297000 and 9.300013\nTime 9.299000 and 9.300013\nTime 9.301000 and 9.300013\nTime 9.303000 and 9.330012\nTime 9.305000 and 9.330012\nTime 9.309000 and 9.330012\nTime 9.311000 and 9.330012\nTime 9.313000 and 9.330012\nTime 9.319000 and 9.330012\nTime 9.326000 and 9.330012\nTime 9.328000 and 9.330012\nTime 9.330000 and 9.330012\nTime 9.332000 and 9.330012\nTime 9.334000 and 9.360012\nTime 9.336000 and 9.360012\nTime 9.339000 and 9.360012\nTime 9.341000 and 9.360012\nTime 9.343000 and 9.360012\nTime 9.345000 and 9.360012\nTime 9.347000 and 9.360012\nTime 9.349000 and 9.360012\nTime 9.351000 and 9.360012\nTime 9.353000 and 9.360012\nTime 9.355000 and 9.360012\nTime 9.357000 and 9.360012\nTime 9.359000 and 9.360012\nTime 9.361000 and 9.360012\nTime 9.363000 and 9.390012\nTime 9.364000 and 9.390012\nTime 9.366000 and 9.390012\nTime 9.368000 and 9.390012\nTime 9.370000 and 9.390012\nTime 9.372000 and 9.390012\nTime 9.374000 and 9.390012\nTime 9.376000 and 9.390012\nTime 9.378000 and 9.390012\nTime 9.380000 and 9.390012\nTime 9.382000 and 9.390012\nTime 9.383000 and 9.390012\nTime 9.385000 and 9.390012\nTime 9.387000 and 9.390012\nTime 9.389000 and 9.390012\nTime 9.391000 and 9.390012\nTime 9.393000 and 9.420012\nTime 9.395000 and 9.420012\nTime 9.397000 and 9.420012\nTime 9.399000 and 9.420012\nTime 9.401000 and 9.420012\nTime 9.403000 and 9.420012\nTime 9.405000 and 9.420012\nTime 9.407000 and 9.420012\nTime 9.409000 and 9.420012\nTime 9.411000 and 9.420012\nTime 9.413000 and 9.420012\nTime 9.415000 and 9.420012\nTime 9.417000 and 9.420012\nTime 9.420000 and 9.420012\nTime 9.422000 and 9.420012\nTime 9.424000 and 9.450011\nTime 9.426000 and 9.450011\nTime 9.430000 and 9.450011\nTime 9.432000 and 9.450011\nTime 9.448000 and 9.450011\nTime 9.450000 and 9.450011\nTime 9.452000 and 9.450011\nTime 9.453000 and 9.480011\nTime 9.455000 and 9.480011\nTime 9.457000 and 9.480011\nTime 9.460000 and 9.480011\nTime 9.462000 and 9.480011\nTime 9.464000 and 9.480011\nTime 9.465000 and 9.480011\nTime 9.467000 and 9.480011\nTime 9.469000 and 9.480011\nTime 9.471000 and 9.480011\nTime 9.473000 and 9.480011\nTime 9.475000 and 9.480011\nTime 9.477000 and 9.480011\nTime 9.479000 and 9.480011\nTime 9.481000 and 9.480011\nTime 9.483000 and 9.510011\nTime 9.485000 and 9.510011\nTime 9.487000 and 9.510011\nTime 9.489000 and 9.510011\nTime 9.491000 and 9.510011\nTime 9.493000 and 9.510011\nTime 9.495000 and 9.510011\nTime 9.497000 and 9.510011\nTime 9.499000 and 9.510011\nTime 9.500000 and 9.510011\nTime 9.502000 and 9.510011\nTime 9.504000 and 9.510011\nTime 9.506000 and 9.510011\nTime 9.508000 and 9.510011\nTime 9.510000 and 9.510011\nTime 9.512000 and 9.510011\nTime 9.514000 and 9.540010\nTime 9.516000 and 9.540010\nTime 9.518000 and 9.540010\nTime 9.520000 and 9.540010\nTime 9.522000 and 9.540010\nTime 9.524000 and 9.540010\nTime 9.526000 and 9.540010\nTime 9.528000 and 9.540010\nTime 9.530000 and 9.540010\nTime 9.532000 and 9.540010\nTime 9.534000 and 9.540010\nTime 9.536000 and 9.540010\nTime 9.539000 and 9.540010\nTime 9.541000 and 9.540010\nTime 9.543000 and 9.570010\nTime 9.547000 and 9.570010\nTime 9.549000 and 9.570010\nTime 9.565000 and 9.570010\nTime 9.567000 and 9.570010\nTime 9.569000 and 9.570010\nTime 9.571000 and 9.570010\nTime 9.573000 and 9.600010\nTime 9.575000 and 9.600010\nTime 9.577000 and 9.600010\nTime 9.579000 and 9.600010\nTime 9.580000 and 9.600010\nTime 9.582000 and 9.600010\nTime 9.584000 and 9.600010\nTime 9.586000 and 9.600010\nTime 9.588000 and 9.600010\nTime 9.590000 and 9.600010\nTime 9.592000 and 9.600010\nTime 9.594000 and 9.600010\nTime 9.596000 and 9.600010\nTime 9.598000 and 9.600010\nTime 9.600000 and 9.600010\nTime 9.602000 and 9.600010\nTime 9.603000 and 9.630010\nTime 9.605000 and 9.630010\nTime 9.607000 and 9.630010\nTime 9.609000 and 9.630010\nTime 9.611000 and 9.630010\nTime 9.613000 and 9.630010\nTime 9.615000 and 9.630010\nTime 9.617000 and 9.630010\nTime 9.619000 and 9.630010\nTime 9.621000 and 9.630010\nTime 9.623000 and 9.630010\nTime 9.624000 and 9.630010\nTime 9.626000 and 9.630010\nTime 9.628000 and 9.630010\nTime 9.630000 and 9.630010\nTime 9.632000 and 9.630010\nTime 9.634000 and 9.660009\nTime 9.636000 and 9.660009\nTime 9.638000 and 9.660009\nTime 9.640000 and 9.660009\nTime 9.642000 and 9.660009\nTime 9.643000 and 9.660009\nTime 9.646000 and 9.660009\nTime 9.648000 and 9.660009\nTime 9.650000 and 9.660009\nTime 9.652000 and 9.660009\nTime 9.655000 and 9.660009\nTime 9.659000 and 9.660009\nTime 9.661000 and 9.660009\nTime 9.663000 and 9.690009\nTime 9.670000 and 9.690009\nTime 9.676000 and 9.690009\nTime 9.678000 and 9.690009\nTime 9.680000 and 9.690009\nTime 9.682000 and 9.690009\nTime 9.684000 and 9.690009\nTime 9.686000 and 9.690009\nTime 9.688000 and 9.690009\nTime 9.690000 and 9.690009\nTime 9.692000 and 9.690009\nTime 9.694000 and 9.720009\nTime 9.696000 and 9.720009\nTime 9.698000 and 9.720009\nTime 9.699000 and 9.720009\nTime 9.701000 and 9.720009\nTime 9.703000 and 9.720009\nTime 9.705000 and 9.720009\nTime 9.707000 and 9.720009\nTime 9.709000 and 9.720009\nTime 9.711000 and 9.720009\nTime 9.713000 and 9.720009\nTime 9.715000 and 9.720009\nTime 9.717000 and 9.720009\nTime 9.719000 and 9.720009\nTime 9.721000 and 9.720009\nTime 9.723000 and 9.750009\nTime 9.725000 and 9.750009\nTime 9.727000 and 9.750009\nTime 9.729000 and 9.750009\nTime 9.731000 and 9.750009\nTime 9.733000 and 9.750009\nTime 9.735000 and 9.750009\nTime 9.737000 and 9.750009\nTime 9.739000 and 9.750009\nTime 9.741000 and 9.750009\nTime 9.744000 and 9.750009\nTime 9.746000 and 9.750009\nTime 9.748000 and 9.750009\nTime 9.750000 and 9.750009\nTime 9.752000 and 9.750009\nTime 9.753000 and 9.780008\nTime 9.756000 and 9.780008\nTime 9.758000 and 9.780008\nTime 9.760000 and 9.780008\nTime 9.762000 and 9.780008\nTime 9.764000 and 9.780008\nTime 9.767000 and 9.780008\nTime 9.769000 and 9.780008\nTime 9.771000 and 9.780008\nTime 9.775000 and 9.780008\nTime 9.777000 and 9.780008\nTime 9.779000 and 9.780008\nTime 9.781000 and 9.780008\nTime 9.782000 and 9.810008\nTime 9.784000 and 9.810008\nTime 9.786000 and 9.810008\nTime 9.789000 and 9.810008\nTime 9.791000 and 9.810008\nTime 9.793000 and 9.810008\nTime 9.795000 and 9.810008\nTime 9.797000 and 9.810008\nTime 9.799000 and 9.810008\nTime 9.802000 and 9.810008\nTime 9.805000 and 9.810008\nTime 9.813000 and 9.810008\nTime 9.815000 and 9.840008\nTime 9.831000 and 9.840008\nTime 9.834000 and 9.840008\nTime 9.836000 and 9.840008\nTime 9.838000 and 9.840008\nTime 9.841000 and 9.840008\nTime 9.844000 and 9.870008\nTime 9.846000 and 9.870008\nTime 9.848000 and 9.870008\nTime 9.850000 and 9.870008\nTime 9.852000 and 9.870008\nTime 9.854000 and 9.870008\nTime 9.857000 and 9.870008\nTime 9.859000 and 9.870008\nTime 9.861000 and 9.870008\nTime 9.863000 and 9.870008\nTime 9.865000 and 9.870008\nTime 9.868000 and 9.870008\nTime 9.870000 and 9.870008\nTime 9.872000 and 9.870008\nTime 9.874000 and 9.900007\nTime 9.876000 and 9.900007\nTime 9.879000 and 9.900007\nTime 9.881000 and 9.900007\nTime 9.883000 and 9.900007\nTime 9.885000 and 9.900007\nTime 9.887000 and 9.900007\nTime 9.890000 and 9.900007\nTime 9.894000 and 9.900007\nTime 9.896000 and 9.900007\nTime 9.898000 and 9.900007\nTime 9.909000 and 9.900007\nTime 9.911000 and 9.930007\nTime 9.913000 and 9.930007\nTime 9.915000 and 9.930007\nTime 9.917000 and 9.930007\nTime 9.919000 and 9.930007\nTime 9.921000 and 9.930007\nTime 9.923000 and 9.930007\nTime 9.925000 and 9.930007\nTime 9.927000 and 9.930007\nTime 9.928000 and 9.930007\nTime 9.930000 and 9.930007\nTime 9.932000 and 9.930007\nTime 9.935000 and 9.960007\nTime 9.937000 and 9.960007\nTime 9.939000 and 9.960007\nTime 9.941000 and 9.960007\nTime 9.943000 and 9.960007\nTime 9.945000 and 9.960007\nTime 9.947000 and 9.960007\nTime 9.949000 and 9.960007\nTime 9.951000 and 9.960007\nTime 9.953000 and 9.960007\nTime 9.955000 and 9.960007\nTime 9.957000 and 9.960007\nTime 9.959000 and 9.960007\nTime 9.961000 and 9.960007\nTime 9.963000 and 9.990006\nTime 9.965000 and 9.990006\nTime 9.967000 and 9.990006\nTime 9.969000 and 9.990006\nTime 9.971000 and 9.990006\nTime 9.973000 and 9.990006\nTime 9.975000 and 9.990006\nTime 9.977000 and 9.990006\nTime 9.979000 and 9.990006\nTime 9.981000 and 9.990006\nTime 9.983000 and 9.990006\nTime 9.985000 and 9.990006\nTime 9.986000 and 9.990006\nTime 9.988000 and 9.990006\nTime 9.990000 and 9.990006\nTime 9.992000 and 9.990006\nTime 9.995000 and 10.020006\nTime 9.997000 and 10.020006\nTime 9.999000 and 10.020006\nTime 10.001000 and 10.020006\nTime 10.003000 and 10.020006\nTime 10.006000 and 10.020006\nTime 10.008000 and 10.020006\nTime 10.010000 and 10.020006\nTime 10.012000 and 10.020006\nTime 10.016000 and 10.020006\nTime 10.017000 and 10.020006\nTime 10.029000 and 10.020006\nTime 10.031000 and 10.050006\nTime 10.033000 and 10.050006\nTime 10.035000 and 10.050006\nTime 10.037000 and 10.050006\nTime 10.038000 and 10.050006\nTime 10.040000 and 10.050006\nTime 10.042000 and 10.050006\nTime 10.044000 and 10.050006\nTime 10.046000 and 10.050006\nTime 10.048000 and 10.050006\nTime 10.050000 and 10.050006\nTime 10.052000 and 10.050006\nTime 10.054000 and 10.080006\nTime 10.056000 and 10.080006\nTime 10.058000 and 10.080006\nTime 10.060000 and 10.080006\nTime 10.062000 and 10.080006\nTime 10.064000 and 10.080006\nTime 10.066000 and 10.080006\nTime 10.068000 and 10.080006\nTime 10.070000 and 10.080006\nTime 10.072000 and 10.080006\nTime 10.074000 and 10.080006\nTime 10.075000 and 10.080006\nTime 10.077000 and 10.080006\nTime 10.079000 and 10.080006\nTime 10.081000 and 10.080006\nTime 10.083000 and 10.110005\nTime 10.085000 and 10.110005\nTime 10.087000 and 10.110005\nTime 10.089000 and 10.110005\nTime 10.091000 and 10.110005\nTime 10.093000 and 10.110005\nTime 10.095000 and 10.110005\nTime 10.096000 and 10.110005\nTime 10.098000 and 10.110005\nTime 10.100000 and 10.110005\nTime 10.102000 and 10.110005\nTime 10.104000 and 10.110005\nTime 10.106000 and 10.110005\nTime 10.108000 and 10.110005\nTime 10.110000 and 10.110005\nTime 10.112000 and 10.110005\nTime 10.114000 and 10.140005\nTime 10.116000 and 10.140005\nTime 10.119000 and 10.140005\nTime 10.122000 and 10.140005\nTime 10.125000 and 10.140005\nTime 10.127000 and 10.140005\nTime 10.129000 and 10.140005\nTime 10.131000 and 10.140005\nTime 10.133000 and 10.140005\nTime 10.135000 and 10.140005\nTime 10.140000 and 10.140005\nTime 10.142000 and 10.140005\nTime 10.148000 and 10.170005\nTime 10.150000 and 10.170005\nTime 10.153000 and 10.170005\nTime 10.155000 and 10.170005\nTime 10.157000 and 10.170005\nTime 10.159000 and 10.170005\nTime 10.160000 and 10.170005\nTime 10.162000 and 10.170005\nTime 10.164000 and 10.170005\nTime 10.166000 and 10.170005\nTime 10.168000 and 10.170005\nTime 10.170000 and 10.170005\nTime 10.172000 and 10.170005\nTime 10.174000 and 10.200005\nTime 10.176000 and 10.200005\nTime 10.178000 and 10.200005\nTime 10.180000 and 10.200005\nTime 10.182000 and 10.200005\nTime 10.184000 and 10.200005\nTime 10.185000 and 10.200005\nTime 10.187000 and 10.200005\nTime 10.189000 and 10.200005\nTime 10.191000 and 10.200005\nTime 10.193000 and 10.200005\nTime 10.195000 and 10.200005\nTime 10.197000 and 10.200005\nTime 10.199000 and 10.200005\nTime 10.201000 and 10.200005\nTime 10.203000 and 10.230004\nTime 10.205000 and 10.230004\nTime 10.206000 and 10.230004\nTime 10.208000 and 10.230004\nTime 10.210000 and 10.230004\nTime 10.212000 and 10.230004\nTime 10.214000 and 10.230004\nTime 10.216000 and 10.230004\nTime 10.218000 and 10.230004\nTime 10.220000 and 10.230004\nTime 10.222000 and 10.230004\nTime 10.224000 and 10.230004\nTime 10.226000 and 10.230004\nTime 10.228000 and 10.230004\nTime 10.229000 and 10.230004\nTime 10.231000 and 10.230004\nTime 10.233000 and 10.260004\nTime 10.235000 and 10.260004\nTime 10.237000 and 10.260004\nTime 10.239000 and 10.260004\nTime 10.241000 and 10.260004\nTime 10.243000 and 10.260004\nTime 10.246000 and 10.260004\nTime 10.248000 and 10.260004\nTime 10.250000 and 10.260004\nTime 10.254000 and 10.260004\nTime 10.262000 and 10.260004\nTime 10.264000 and 10.290004\nTime 10.279000 and 10.290004\nTime 10.281000 and 10.290004\nTime 10.283000 and 10.290004\nTime 10.285000 and 10.290004\nTime 10.287000 and 10.290004\nTime 10.289000 and 10.290004\nTime 10.291000 and 10.290004\nTime 10.293000 and 10.320004\nTime 10.295000 and 10.320004\nTime 10.297000 and 10.320004\nTime 10.299000 and 10.320004\nTime 10.301000 and 10.320004\nTime 10.303000 and 10.320004\nTime 10.305000 and 10.320004\nTime 10.307000 and 10.320004\nTime 10.309000 and 10.320004\nTime 10.311000 and 10.320004\nTime 10.313000 and 10.320004\nTime 10.315000 and 10.320004\nTime 10.317000 and 10.320004\nTime 10.320000 and 10.320004\nTime 10.322000 and 10.320004\nTime 10.324000 and 10.350003\nTime 10.325000 and 10.350003\nTime 10.327000 and 10.350003\nTime 10.329000 and 10.350003\nTime 10.346000 and 10.350003\nTime 10.348000 and 10.350003\nTime 10.366000 and 10.350003\nTime 10.368000 and 10.380003\nTime 10.370000 and 10.380003\nTime 10.372000 and 10.380003\nTime 10.376000 and 10.380003\nTime 10.378000 and 10.380003\nTime 10.380000 and 10.380003\nTime 10.392000 and 10.380003\nTime 10.394000 and 10.410003\nTime 10.396000 and 10.410003\nTime 10.398000 and 10.410003\nTime 10.400000 and 10.410003\nTime 10.402000 and 10.410003\nTime 10.404000 and 10.410003\nTime 10.407000 and 10.410003\nTime 10.408000 and 10.410003\nTime 10.410000 and 10.410003\nTime 10.412000 and 10.410003\nTime 10.414000 and 10.440002\nTime 10.416000 and 10.440002\nTime 10.418000 and 10.440002\nTime 10.420000 and 10.440002\nTime 10.422000 and 10.440002\nTime 10.424000 and 10.440002\nTime 10.426000 and 10.440002\nTime 10.428000 and 10.440002\nTime 10.430000 and 10.440002\nTime 10.432000 and 10.440002\nTime 10.434000 and 10.440002\nTime 10.436000 and 10.440002\nTime 10.438000 and 10.440002\nTime 10.440000 and 10.440002\nTime 10.442000 and 10.440002\nTime 10.443000 and 10.470002\nTime 10.445000 and 10.470002\nTime 10.447000 and 10.470002\nTime 10.449000 and 10.470002\nTime 10.451000 and 10.470002\nTime 10.453000 and 10.470002\nTime 10.455000 and 10.470002\nTime 10.457000 and 10.470002\nTime 10.459000 and 10.470002\nTime 10.461000 and 10.470002\nTime 10.462000 and 10.470002\nTime 10.464000 and 10.470002\nTime 10.466000 and 10.470002\nTime 10.468000 and 10.470002\nTime 10.470000 and 10.470002\nTime 10.472000 and 10.470002\nTime 10.474000 and 10.500002\nTime 10.477000 and 10.500002\nTime 10.479000 and 10.500002\nTime 10.481000 and 10.500002\nTime 10.484000 and 10.500002\nTime 10.486000 and 10.500002\nTime 10.488000 and 10.500002\nTime 10.496000 and 10.500002\nTime 10.498000 and 10.500002\nTime 10.514000 and 10.500002\nTime 10.516000 and 10.530002\nTime 10.518000 and 10.530002\nTime 10.520000 and 10.530002\nTime 10.522000 and 10.530002\nTime 10.523000 and 10.530002\nTime 10.525000 and 10.530002\nTime 10.527000 and 10.530002\nTime 10.529000 and 10.530002\nTime 10.531000 and 10.530002\nTime 10.533000 and 10.560001\nTime 10.535000 and 10.560001\nTime 10.537000 and 10.560001\nTime 10.539000 and 10.560001\nTime 10.541000 and 10.560001\nTime 10.543000 and 10.560001\nTime 10.545000 and 10.560001\nTime 10.547000 and 10.560001\nTime 10.549000 and 10.560001\nTime 10.551000 and 10.560001\nTime 10.553000 and 10.560001\nTime 10.555000 and 10.560001\nTime 10.558000 and 10.560001\nTime 10.560000 and 10.560001\nTime 10.562000 and 10.560001\nTime 10.565000 and 10.590001\nTime 10.567000 and 10.590001\nTime 10.578000 and 10.590001\nTime 10.580000 and 10.590001\nTime 10.609000 and 10.590001\nTime 10.614000 and 10.620001\nTime 10.616000 and 10.620001\nTime 10.635000 and 10.620001\nTime 10.641000 and 10.650001\nTime 10.647000 and 10.650001\nTime 10.665000 and 10.650001\nTime 10.667000 and 10.680000\nTime 10.682000 and 10.680000\nTime 10.685000 and 10.710000\nTime 10.702000 and 10.710000\nTime 10.734000 and 10.710000\nTime 10.742000 and 10.740000\nTime 10.754000 and 10.770000\nTime 10.771000 and 10.770000\nTime 10.787000 and 10.799999\nTime 10.789000 and 10.799999\nTime 10.796000 and 10.799999\nTime 10.800000 and 10.799999\nTime 10.803000 and 10.829999\nTime 10.806000 and 10.829999\nTime 10.808000 and 10.829999\nTime 10.810000 and 10.829999\nTime 10.815000 and 10.829999\nTime 10.830000 and 10.829999\nTime 10.834000 and 10.859999\nTime 10.848000 and 10.859999\nTime 10.852000 and 10.859999\nTime 10.865000 and 10.859999\nTime 10.867000 and 10.889998\nTime 10.878000 and 10.889998\nTime 10.880000 and 10.889998\nTime 10.882000 and 10.889998\nTime 10.884000 and 10.889998\nTime 10.886000 and 10.889998\nTime 10.888000 and 10.889998\nTime 10.890000 and 10.889998\nTime 10.892000 and 10.919998\nTime 10.894000 and 10.919998\nTime 10.896000 and 10.919998\nTime 10.898000 and 10.919998\nTime 10.899000 and 10.919998\nTime 10.901000 and 10.919998\nTime 10.903000 and 10.919998\nTime 10.905000 and 10.919998\nTime 10.907000 and 10.919998\nTime 10.909000 and 10.919998\nTime 10.911000 and 10.919998\nTime 10.914000 and 10.919998\nTime 10.916000 and 10.919998\nTime 10.918000 and 10.919998\nTime 10.920000 and 10.919998\nTime 10.922000 and 10.949998\nTime 10.923000 and 10.949998\nTime 10.928000 and 10.949998\nTime 10.930000 and 10.949998\nTime 10.931000 and 10.949998\nTime 10.944000 and 10.949998\nTime 10.946000 and 10.949998\nTime 10.948000 and 10.949998\nTime 10.955000 and 10.949998\nTime 10.962000 and 10.979998\nTime 10.964000 and 10.979998\nTime 10.967000 and 10.979998\nTime 10.985000 and 10.979998\nTime 10.991000 and 11.009997\nTime 11.002000 and 11.009997\nTime 11.021000 and 11.009997\nTime 11.036000 and 11.039997\nTime 11.051000 and 11.039997\nTime 11.069000 and 11.069997\nTime 11.085000 and 11.069997\nTime 11.108000 and 11.099997\nTime 11.119000 and 11.129996\nTime 11.137000 and 11.129996\nTime 11.153000 and 11.159996\nTime 11.168000 and 11.159996\nTime 11.185000 and 11.189996\nTime 11.202000 and 11.189996\nTime 11.217000 and 11.219995\nTime 11.233000 and 11.219995\nTime 11.245000 and 11.249995\nTime 11.247000 and 11.249995\nTime 11.248000 and 11.249995\nTime 11.251000 and 11.249995\nTime 11.253000 and 11.279995\nTime 11.255000 and 11.279995\nTime 11.257000 and 11.279995\nTime 11.259000 and 11.279995\nTime 11.261000 and 11.279995\nTime 11.263000 and 11.279995\nTime 11.265000 and 11.279995\nTime 11.266000 and 11.279995\nTime 11.268000 and 11.279995\nTime 11.270000 and 11.279995\nTime 11.272000 and 11.279995\nTime 11.274000 and 11.279995\nTime 11.276000 and 11.279995\nTime 11.278000 and 11.279995\nTime 11.280000 and 11.279995\nTime 11.281000 and 11.309995\nTime 11.283000 and 11.309995\nTime 11.285000 and 11.309995\nTime 11.287000 and 11.309995\nTime 11.289000 and 11.309995\nTime 11.291000 and 11.309995\nTime 11.293000 and 11.309995\nTime 11.295000 and 11.309995\nTime 11.297000 and 11.309995\nTime 11.298000 and 11.309995\nTime 11.300000 and 11.309995\nTime 11.302000 and 11.309995\nTime 11.304000 and 11.309995\nTime 11.306000 and 11.309995\nTime 11.308000 and 11.309995\nTime 11.310000 and 11.309995\nTime 11.312000 and 11.339994\nTime 11.314000 and 11.339994\nTime 11.316000 and 11.339994\nTime 11.319000 and 11.339994\nTime 11.322000 and 11.339994\nTime 11.328000 and 11.339994\nTime 11.331000 and 11.339994\nTime 11.332000 and 11.339994\nTime 11.334000 and 11.339994\nTime 11.336000 and 11.339994\nTime 11.338000 and 11.339994\nTime 11.340000 and 11.339994\nTime 11.342000 and 11.369994\nTime 11.344000 and 11.369994\nTime 11.346000 and 11.369994\nTime 11.347000 and 11.369994\nTime 11.349000 and 11.369994\nTime 11.351000 and 11.369994\nTime 11.353000 and 11.369994\nTime 11.355000 and 11.369994\nTime 11.357000 and 11.369994\nTime 11.359000 and 11.369994\nTime 11.360000 and 11.369994\nTime 11.362000 and 11.369994\nTime 11.364000 and 11.369994\nTime 11.366000 and 11.369994\nTime 11.368000 and 11.369994\nTime 11.370000 and 11.369994\nTime 11.372000 and 11.399994\nTime 11.373000 and 11.399994\nTime 11.376000 and 11.399994\nTime 11.377000 and 11.399994\nTime 11.379000 and 11.399994\nTime 11.381000 and 11.399994\nTime 11.383000 and 11.399994\nTime 11.385000 and 11.399994\nTime 11.387000 and 11.399994\nTime 11.389000 and 11.399994\nTime 11.390000 and 11.399994\nTime 11.392000 and 11.399994\nTime 11.394000 and 11.399994\nTime 11.396000 and 11.399994\nTime 11.398000 and 11.399994\nTime 11.400000 and 11.399994\nTime 11.402000 and 11.429994\nTime 11.403000 and 11.429994\nTime 11.405000 and 11.429994\nTime 11.407000 and 11.429994\nTime 11.409000 and 11.429994\nTime 11.411000 and 11.429994\nTime 11.413000 and 11.429994\nTime 11.415000 and 11.429994\nTime 11.417000 and 11.429994\nTime 11.418000 and 11.429994\nTime 11.420000 and 11.429994\nTime 11.423000 and 11.429994\nTime 11.425000 and 11.429994\nTime 11.427000 and 11.429994\nTime 11.429000 and 11.429994\nTime 11.431000 and 11.429994\nTime 11.433000 and 11.459993\nTime 11.435000 and 11.459993\nTime 11.446000 and 11.459993\nTime 11.448000 and 11.459993\nTime 11.465000 and 11.459993\nTime 11.467000 and 11.489993\nTime 11.469000 and 11.489993\nTime 11.471000 and 11.489993\nTime 11.473000 and 11.489993\nTime 11.475000 and 11.489993\nTime 11.477000 and 11.489993\nTime 11.479000 and 11.489993\nTime 11.481000 and 11.489993\nTime 11.483000 and 11.489993\nTime 11.484000 and 11.489993\nTime 11.486000 and 11.489993\nTime 11.488000 and 11.489993\nTime 11.490000 and 11.489993\nTime 11.492000 and 11.519993\nTime 11.494000 and 11.519993\nTime 11.495000 and 11.519993\nTime 11.497000 and 11.519993\nTime 11.499000 and 11.519993\nTime 11.501000 and 11.519993\nTime 11.503000 and 11.519993\nTime 11.505000 and 11.519993\nTime 11.506000 and 11.519993\nTime 11.508000 and 11.519993\nTime 11.510000 and 11.519993\nTime 11.512000 and 11.519993\nTime 11.514000 and 11.519993\nTime 11.516000 and 11.519993\nTime 11.517000 and 11.519993\nTime 11.519000 and 11.519993\nTime 11.521000 and 11.519993\nTime 11.523000 and 11.549993\nTime 11.525000 and 11.549993\nTime 11.527000 and 11.549993\nTime 11.529000 and 11.549993\nTime 11.530000 and 11.549993\nTime 11.532000 and 11.549993\nTime 11.534000 and 11.549993\nTime 11.536000 and 11.549993\nTime 11.538000 and 11.549993\nTime 11.540000 and 11.549993\nTime 11.542000 and 11.549993\nTime 11.544000 and 11.549993\nTime 11.547000 and 11.549993\nTime 11.549000 and 11.549993\nTime 11.550000 and 11.549993\nTime 11.552000 and 11.579992\nTime 11.556000 and 11.579992\nTime 11.558000 and 11.579992\nTime 11.565000 and 11.579992\nTime 11.566000 and 11.579992\nTime 11.568000 and 11.579992\nTime 11.570000 and 11.579992\nTime 11.572000 and 11.579992\nTime 11.574000 and 11.579992\nTime 11.576000 and 11.579992\nTime 11.578000 and 11.579992\nTime 11.579000 and 11.579992\nTime 11.581000 and 11.579992\nTime 11.583000 and 11.609992\nTime 11.585000 and 11.609992\nTime 11.587000 and 11.609992\nTime 11.590000 and 11.609992\nTime 11.592000 and 11.609992\nTime 11.598000 and 11.609992\nTime 11.600000 and 11.609992\nTime 11.602000 and 11.609992\nTime 11.604000 and 11.609992\nTime 11.605000 and 11.609992\nTime 11.607000 and 11.609992\nTime 11.609000 and 11.609992\nTime 11.613000 and 11.609992\nTime 11.614000 and 11.639992\nTime 11.630000 and 11.639992\nTime 11.632000 and 11.639992\nTime 11.634000 and 11.639992\nTime 11.636000 and 11.639992\nTime 11.638000 and 11.639992\nTime 11.640000 and 11.639992\nTime 11.642000 and 11.669991\nTime 11.643000 and 11.669991\nTime 11.646000 and 11.669991\nTime 11.647000 and 11.669991\nTime 11.649000 and 11.669991\nTime 11.651000 and 11.669991\nTime 11.653000 and 11.669991\nTime 11.655000 and 11.669991\nTime 11.657000 and 11.669991\nTime 11.659000 and 11.669991\nTime 11.661000 and 11.669991\nTime 11.664000 and 11.669991\nTime 11.666000 and 11.669991\nTime 11.668000 and 11.669991\nTime 11.683000 and 11.669991\nTime 11.685000 and 11.699991\nTime 11.696000 and 11.699991\nTime 11.698000 and 11.699991\nTime 11.700000 and 11.699991\nTime 11.702000 and 11.729991\nTime 11.704000 and 11.729991\nTime 11.705000 and 11.729991\nTime 11.707000 and 11.729991\nTime 11.709000 and 11.729991\nTime 11.711000 and 11.729991\nTime 11.713000 and 11.729991\nTime 11.715000 and 11.729991\nTime 11.717000 and 11.729991\nTime 11.719000 and 11.729991\nTime 11.720000 and 11.729991\nTime 11.722000 and 11.729991\nTime 11.724000 and 11.729991\nTime 11.726000 and 11.729991\nTime 11.728000 and 11.729991\nTime 11.730000 and 11.729991\nTime 11.732000 and 11.759991\nTime 11.734000 and 11.759991\nTime 11.735000 and 11.759991\nTime 11.737000 and 11.759991\nTime 11.739000 and 11.759991\nTime 11.741000 and 11.759991\nTime 11.743000 and 11.759991\nTime 11.745000 and 11.759991\nTime 11.747000 and 11.759991\nTime 11.749000 and 11.759991\nTime 11.750000 and 11.759991\nTime 11.752000 and 11.759991\nTime 11.754000 and 11.759991\nTime 11.756000 and 11.759991\nTime 11.758000 and 11.759991\nTime 11.760000 and 11.759991\nTime 11.762000 and 11.789990\nTime 11.764000 and 11.789990\nTime 11.765000 and 11.789990\nTime 11.767000 and 11.789990\nTime 11.769000 and 11.789990\nTime 11.771000 and 11.789990\nTime 11.773000 and 11.789990\nTime 11.775000 and 11.789990\nTime 11.777000 and 11.789990\nTime 11.780000 and 11.789990\nTime 11.782000 and 11.789990\nTime 11.784000 and 11.789990\nTime 11.786000 and 11.789990\nTime 11.788000 and 11.789990\nTime 11.792000 and 11.789990\nTime 11.794000 and 11.819990\nTime 11.796000 and 11.819990\nTime 11.812000 and 11.819990\nTime 11.814000 and 11.819990\nTime 11.816000 and 11.819990\nTime 11.819000 and 11.819990\nTime 11.821000 and 11.819990\nTime 11.824000 and 11.849990\nTime 11.826000 and 11.849990\nTime 11.828000 and 11.849990\nTime 11.830000 and 11.849990\nTime 11.832000 and 11.849990\nTime 11.834000 and 11.849990\nTime 11.836000 and 11.849990\nTime 11.838000 and 11.849990\nTime 11.840000 and 11.849990\nTime 11.842000 and 11.849990\nTime 11.844000 and 11.849990\nTime 11.846000 and 11.849990\nTime 11.848000 and 11.849990\nTime 11.850000 and 11.849990\nTime 11.852000 and 11.879990\nTime 11.853000 and 11.879990\nTime 11.855000 and 11.879990\nTime 11.857000 and 11.879990\nTime 11.859000 and 11.879990\nTime 11.861000 and 11.879990\nTime 11.863000 and 11.879990\nTime 11.865000 and 11.879990\nTime 11.867000 and 11.879990\nTime 11.869000 and 11.879990\nTime 11.871000 and 11.879990\nTime 11.872000 and 11.879990\nTime 11.874000 and 11.879990\nTime 11.876000 and 11.879990\nTime 11.878000 and 11.879990\nTime 11.880000 and 11.879990\nTime 11.882000 and 11.909989\nTime 11.884000 and 11.909989\nTime 11.886000 and 11.909989\nTime 11.888000 and 11.909989\nTime 11.889000 and 11.909989\nTime 11.891000 and 11.909989\nTime 11.893000 and 11.909989\nTime 11.895000 and 11.909989\nTime 11.897000 and 11.909989\nTime 11.899000 and 11.909989\nTime 11.901000 and 11.909989\nTime 11.903000 and 11.909989\nTime 11.905000 and 11.909989\nTime 11.907000 and 11.909989\nTime 11.909000 and 11.909989\nTime 11.911000 and 11.909989\nTime 11.916000 and 11.939989\nTime 11.918000 and 11.939989\nTime 11.930000 and 11.939989\nTime 11.932000 and 11.939989\nTime 11.933000 and 11.939989\nTime 11.936000 and 11.939989\nTime 11.938000 and 11.939989\nTime 11.939000 and 11.939989\nTime 11.941000 and 11.939989\nTime 11.943000 and 11.969989\nTime 11.945000 and 11.969989\nTime 11.947000 and 11.969989\nTime 11.949000 and 11.969989\nTime 11.951000 and 11.969989\nTime 11.953000 and 11.969989\nTime 11.955000 and 11.969989\nTime 11.957000 and 11.969989\nTime 11.959000 and 11.969989\nTime 11.960000 and 11.969989\nTime 11.962000 and 11.969989\nTime 11.964000 and 11.969989\nTime 11.966000 and 11.969989\nTime 11.968000 and 11.969989\nTime 11.970000 and 11.969989\nTime 11.972000 and 11.999989\nTime 11.974000 and 11.999989\nTime 11.976000 and 11.999989\nTime 11.977000 and 11.999989\nTime 11.979000 and 11.999989\nTime 11.981000 and 11.999989\nTime 11.983000 and 11.999989\nTime 11.985000 and 11.999989\nTime 11.987000 and 11.999989\nTime 11.988000 and 11.999989\nTime 11.990000 and 11.999989\nTime 11.992000 and 11.999989\nTime 11.994000 and 11.999989\nTime 11.996000 and 11.999989\nTime 11.998000 and 11.999989\nTime 12.000000 and 11.999989\nTime 12.001000 and 12.029988\nTime 12.003000 and 12.029988\nTime 12.005000 and 12.029988\nTime 12.007000 and 12.029988\nTime 12.009000 and 12.029988\nTime 12.011000 and 12.029988\nTime 12.013000 and 12.029988\nTime 12.015000 and 12.029988\nTime 12.017000 and 12.029988\nTime 12.019000 and 12.029988\nTime 12.021000 and 12.029988\nTime 12.023000 and 12.029988\nTime 12.025000 and 12.029988\nTime 12.027000 and 12.029988\nTime 12.034000 and 12.029988\nTime 12.035000 and 12.059988\nTime 12.047000 and 12.059988\nTime 12.048000 and 12.059988\nTime 12.053000 and 12.059988\nTime 12.055000 and 12.059988\nTime 12.057000 and 12.059988\nTime 12.059000 and 12.059988\nTime 12.061000 and 12.059988\nTime 12.063000 and 12.089988\nTime 12.065000 and 12.089988\nTime 12.067000 and 12.089988\nTime 12.069000 and 12.089988\nTime 12.071000 and 12.089988\nTime 12.073000 and 12.089988\nTime 12.075000 and 12.089988\nTime 12.076000 and 12.089988\nTime 12.078000 and 12.089988\nTime 12.080000 and 12.089988\nTime 12.082000 and 12.089988\nTime 12.084000 and 12.089988\nTime 12.086000 and 12.089988\nTime 12.088000 and 12.089988\nTime 12.090000 and 12.089988\nTime 12.091000 and 12.119987\nTime 12.093000 and 12.119987\nTime 12.095000 and 12.119987\nTime 12.097000 and 12.119987\nTime 12.099000 and 12.119987\nTime 12.101000 and 12.119987\nTime 12.103000 and 12.119987\nTime 12.105000 and 12.119987\nTime 12.107000 and 12.119987\nTime 12.109000 and 12.119987\nTime 12.111000 and 12.119987\nTime 12.112000 and 12.119987\nTime 12.114000 and 12.119987\nTime 12.116000 and 12.119987\nTime 12.118000 and 12.119987\nTime 12.120000 and 12.119987\nTime 12.122000 and 12.149987\nTime 12.124000 and 12.149987\nTime 12.125000 and 12.149987\nTime 12.127000 and 12.149987\nTime 12.129000 and 12.149987\nTime 12.132000 and 12.149987\nTime 12.134000 and 12.149987\nTime 12.136000 and 12.149987\nTime 12.139000 and 12.149987\nTime 12.141000 and 12.149987\nTime 12.143000 and 12.149987\nTime 12.145000 and 12.149987\nTime 12.147000 and 12.149987\nTime 12.152000 and 12.149987\nTime 12.155000 and 12.179987\nTime 12.161000 and 12.179987\nTime 12.163000 and 12.179987\nTime 12.165000 and 12.179987\nTime 12.167000 and 12.179987\nTime 12.169000 and 12.179987\nTime 12.170000 and 12.179987\nTime 12.172000 and 12.179987\nTime 12.174000 and 12.179987\nTime 12.176000 and 12.179987\nTime 12.178000 and 12.179987\nTime 12.180000 and 12.179987\nTime 12.182000 and 12.209987\nTime 12.183000 and 12.209987\nTime 12.185000 and 12.209987\nTime 12.187000 and 12.209987\nTime 12.189000 and 12.209987\nTime 12.191000 and 12.209987\nTime 12.193000 and 12.209987\nTime 12.195000 and 12.209987\nTime 12.197000 and 12.209987\nTime 12.199000 and 12.209987\nTime 12.200000 and 12.209987\nTime 12.202000 and 12.209987\nTime 12.204000 and 12.209987\nTime 12.206000 and 12.209987\nTime 12.208000 and 12.209987\nTime 12.210000 and 12.209987\nTime 12.212000 and 12.239986\nTime 12.213000 and 12.239986\nTime 12.215000 and 12.239986\nTime 12.217000 and 12.239986\nTime 12.219000 and 12.239986\nTime 12.221000 and 12.239986\nTime 12.223000 and 12.239986\nTime 12.225000 and 12.239986\nTime 12.227000 and 12.239986\nTime 12.228000 and 12.239986\nTime 12.230000 and 12.239986\nTime 12.232000 and 12.239986\nTime 12.234000 and 12.239986\nTime 12.236000 and 12.239986\nTime 12.238000 and 12.239986\nTime 12.240000 and 12.239986\nTime 12.242000 and 12.269986\nTime 12.243000 and 12.269986\nTime 12.245000 and 12.269986\nTime 12.247000 and 12.269986\nTime 12.249000 and 12.269986\nTime 12.251000 and 12.269986\nTime 12.253000 and 12.269986\nTime 12.255000 and 12.269986\nTime 12.257000 and 12.269986\nTime 12.259000 and 12.269986\nTime 12.261000 and 12.269986\nTime 12.264000 and 12.269986\nTime 12.266000 and 12.269986\nTime 12.267000 and 12.269986\nTime 12.281000 and 12.269986\nTime 12.283000 and 12.299986\nTime 12.294000 and 12.299986\nTime 12.296000 and 12.299986\nTime 12.298000 and 12.299986\nTime 12.300000 and 12.299986\nTime 12.302000 and 12.329986\nTime 12.303000 and 12.329986\nTime 12.305000 and 12.329986\nTime 12.307000 and 12.329986\nTime 12.309000 and 12.329986\nTime 12.311000 and 12.329986\nTime 12.313000 and 12.329986\nTime 12.315000 and 12.329986\nTime 12.316000 and 12.329986\nTime 12.318000 and 12.329986\nTime 12.320000 and 12.329986\nTime 12.322000 and 12.329986\nTime 12.324000 and 12.329986\nTime 12.326000 and 12.329986\nTime 12.327000 and 12.329986\nTime 12.329000 and 12.329986\nTime 12.331000 and 12.329986\nTime 12.333000 and 12.359985\nTime 12.335000 and 12.359985\nTime 12.337000 and 12.359985\nTime 12.338000 and 12.359985\nTime 12.340000 and 12.359985\nTime 12.342000 and 12.359985\nTime 12.344000 and 12.359985\nTime 12.346000 and 12.359985\nTime 12.348000 and 12.359985\nTime 12.350000 and 12.359985\nTime 12.352000 and 12.359985\nTime 12.354000 and 12.359985\nTime 12.355000 and 12.359985\nTime 12.357000 and 12.359985\nTime 12.359000 and 12.359985\nTime 12.361000 and 12.359985\nTime 12.363000 and 12.389985\nTime 12.365000 and 12.389985\nTime 12.367000 and 12.389985\nTime 12.368000 and 12.389985\nTime 12.370000 and 12.389985\nTime 12.372000 and 12.389985\nTime 12.375000 and 12.389985\nTime 12.377000 and 12.389985\nTime 12.380000 and 12.389985\nTime 12.382000 and 12.389985\nTime 12.384000 and 12.389985\nTime 12.397000 and 12.389985\nTime 12.399000 and 12.419985\nTime 12.415000 and 12.419985\nTime 12.417000 and 12.419985\nTime 12.419000 and 12.419985\nTime 12.421000 and 12.419985\nTime 12.423000 and 12.449985\nTime 12.424000 and 12.449985\nTime 12.426000 and 12.449985\nTime 12.428000 and 12.449985\nTime 12.430000 and 12.449985\nTime 12.432000 and 12.449985\nTime 12.434000 and 12.449985\nTime 12.436000 and 12.449985\nTime 12.438000 and 12.449985\nTime 12.440000 and 12.449985\nTime 12.442000 and 12.449985\nTime 12.443000 and 12.449985\nTime 12.445000 and 12.449985\nTime 12.447000 and 12.449985\nTime 12.449000 and 12.449985\nTime 12.451000 and 12.449985\nTime 12.453000 and 12.479984\nTime 12.455000 and 12.479984\nTime 12.456000 and 12.479984\nTime 12.458000 and 12.479984\nTime 12.460000 and 12.479984\nTime 12.462000 and 12.479984\nTime 12.464000 and 12.479984\nTime 12.466000 and 12.479984\nTime 12.467000 and 12.479984\nTime 12.469000 and 12.479984\nTime 12.471000 and 12.479984\nTime 12.473000 and 12.479984\nTime 12.475000 and 12.479984\nTime 12.477000 and 12.479984\nTime 12.479000 and 12.479984\nTime 12.481000 and 12.479984\nTime 12.483000 and 12.509984\nTime 12.485000 and 12.509984\nTime 12.487000 and 12.509984\nTime 12.489000 and 12.509984\nTime 12.491000 and 12.509984\nTime 12.493000 and 12.509984\nTime 12.496000 and 12.509984\nTime 12.498000 and 12.509984\nTime 12.500000 and 12.509984\nTime 12.502000 and 12.509984\nTime 12.504000 and 12.509984\nTime 12.508000 and 12.509984\nTime 12.511000 and 12.509984\nTime 12.513000 and 12.539984\nTime 12.519000 and 12.539984\nTime 12.526000 and 12.539984\nTime 12.528000 and 12.539984\nTime 12.529000 and 12.539984\nTime 12.532000 and 12.539984\nTime 12.534000 and 12.539984\nTime 12.536000 and 12.539984\nTime 12.538000 and 12.539984\nTime 12.539000 and 12.539984\nTime 12.541000 and 12.539984\nTime 12.543000 and 12.569983\nTime 12.545000 and 12.569983\nTime 12.547000 and 12.569983\nTime 12.549000 and 12.569983\nTime 12.551000 and 12.569983\nTime 12.553000 and 12.569983\nTime 12.555000 and 12.569983\nTime 12.557000 and 12.569983\nTime 12.559000 and 12.569983\nTime 12.560000 and 12.569983\nTime 12.562000 and 12.569983\nTime 12.564000 and 12.569983\nTime 12.566000 and 12.569983\nTime 12.568000 and 12.569983\nTime 12.570000 and 12.569983\nTime 12.572000 and 12.599983\nTime 12.574000 and 12.599983\nTime 12.575000 and 12.599983\nTime 12.577000 and 12.599983\nTime 12.580000 and 12.599983\nTime 12.582000 and 12.599983\nTime 12.584000 and 12.599983\nTime 12.586000 and 12.599983\nTime 12.588000 and 12.599983\nTime 12.590000 and 12.599983\nTime 12.592000 and 12.599983\nTime 12.594000 and 12.599983\nTime 12.596000 and 12.599983\nTime 12.597000 and 12.599983\nTime 12.599000 and 12.599983\nTime 12.601000 and 12.599983\nTime 12.603000 and 12.629983\nTime 12.605000 and 12.629983\nTime 12.607000 and 12.629983\nTime 12.609000 and 12.629983\nTime 12.611000 and 12.629983\nTime 12.613000 and 12.629983\nTime 12.615000 and 12.629983\nTime 12.617000 and 12.629983\nTime 12.619000 and 12.629983\nTime 12.621000 and 12.629983\nTime 12.622000 and 12.629983\nTime 12.630000 and 12.629983\nTime 12.631000 and 12.659983\nTime 12.647000 and 12.659983\nTime 12.649000 and 12.659983\nTime 12.651000 and 12.659983\nTime 12.653000 and 12.659983\nTime 12.655000 and 12.659983\nTime 12.657000 and 12.659983\nTime 12.659000 and 12.659983\nTime 12.661000 and 12.659983\nTime 12.663000 and 12.689982\nTime 12.665000 and 12.689982\nTime 12.667000 and 12.689982\nTime 12.669000 and 12.689982\nTime 12.670000 and 12.689982\nTime 12.672000 and 12.689982\nTime 12.674000 and 12.689982\nTime 12.676000 and 12.689982\nTime 12.678000 and 12.689982\nTime 12.680000 and 12.689982\nTime 12.682000 and 12.689982\nTime 12.683000 and 12.689982\nTime 12.685000 and 12.689982\nTime 12.687000 and 12.689982\nTime 12.689000 and 12.689982\nTime 12.691000 and 12.689982\nTime 12.693000 and 12.719982\nTime 12.695000 and 12.719982\nTime 12.696000 and 12.719982\nTime 12.698000 and 12.719982\nTime 12.700000 and 12.719982\nTime 12.702000 and 12.719982\nTime 12.704000 and 12.719982\nTime 12.706000 and 12.719982\nTime 12.708000 and 12.719982\nTime 12.710000 and 12.719982\nTime 12.712000 and 12.719982\nTime 12.714000 and 12.719982\nTime 12.715000 and 12.719982\nTime 12.717000 and 12.719982\nTime 12.719000 and 12.719982\nTime 12.721000 and 12.719982\nTime 12.723000 and 12.749982\nTime 12.725000 and 12.749982\nTime 12.727000 and 12.749982\nTime 12.729000 and 12.749982\nTime 12.731000 and 12.749982\nTime 12.734000 and 12.749982\nTime 12.736000 and 12.749982\nTime 12.741000 and 12.749982\nTime 12.743000 and 12.749982\nTime 12.746000 and 12.749982\nTime 12.748000 and 12.749982\nTime 12.750000 and 12.749982\nTime 12.751000 and 12.779982\nTime 12.753000 and 12.779982\nTime 12.755000 and 12.779982\nTime 12.757000 and 12.779982\nTime 12.759000 and 12.779982\nTime 12.761000 and 12.779982\nTime 12.763000 and 12.779982\nTime 12.764000 and 12.779982\nTime 12.766000 and 12.779982\nTime 12.768000 and 12.779982\nTime 12.770000 and 12.779982\nTime 12.772000 and 12.779982\nTime 12.774000 and 12.779982\nTime 12.776000 and 12.779982\nTime 12.777000 and 12.779982\nTime 12.780000 and 12.779982\nTime 12.781000 and 12.809981\nTime 12.783000 and 12.809981\nTime 12.785000 and 12.809981\nTime 12.787000 and 12.809981\nTime 12.789000 and 12.809981\nTime 12.791000 and 12.809981\nTime 12.793000 and 12.809981\nTime 12.795000 and 12.809981\nTime 12.796000 and 12.809981\nTime 12.798000 and 12.809981\nTime 12.800000 and 12.809981\nTime 12.802000 and 12.809981\nTime 12.804000 and 12.809981\nTime 12.808000 and 12.809981\nTime 12.810000 and 12.809981\nTime 12.812000 and 12.839981\nTime 12.814000 and 12.839981\nTime 12.829000 and 12.839981\nTime 12.831000 and 12.839981\nTime 12.847000 and 12.839981\nTime 12.850000 and 12.869981\nTime 12.852000 and 12.869981\nTime 12.854000 and 12.869981\nTime 12.855000 and 12.869981\nTime 12.857000 and 12.869981\nTime 12.861000 and 12.869981\nTime 12.866000 and 12.869981\nTime 12.868000 and 12.869981\nTime 12.880000 and 12.869981\nTime 12.882000 and 12.899981\nTime 12.884000 and 12.899981\nTime 12.886000 and 12.899981\nTime 12.888000 and 12.899981\nTime 12.890000 and 12.899981\nTime 12.892000 and 12.899981\nTime 12.894000 and 12.899981\nTime 12.896000 and 12.899981\nTime 12.898000 and 12.899981\nTime 12.899000 and 12.899981\nTime 12.901000 and 12.899981\nTime 12.903000 and 12.929980\nTime 12.905000 and 12.929980\nTime 12.907000 and 12.929980\nTime 12.909000 and 12.929980\nTime 12.911000 and 12.929980\nTime 12.913000 and 12.929980\nTime 12.915000 and 12.929980\nTime 12.916000 and 12.929980\nTime 12.918000 and 12.929980\nTime 12.920000 and 12.929980\nTime 12.922000 and 12.929980\nTime 12.924000 and 12.929980\nTime 12.926000 and 12.929980\nTime 12.927000 and 12.929980\nTime 12.929000 and 12.929980\nTime 12.931000 and 12.929980\nTime 12.933000 and 12.959980\nTime 12.935000 and 12.959980\nTime 12.937000 and 12.959980\nTime 12.939000 and 12.959980\nTime 12.941000 and 12.959980\nTime 12.943000 and 12.959980\nTime 12.944000 and 12.959980\nTime 12.946000 and 12.959980\nTime 12.948000 and 12.959980\nTime 12.950000 and 12.959980\nTime 12.952000 and 12.959980\nTime 12.954000 and 12.959980\nTime 12.956000 and 12.959980\nTime 12.958000 and 12.959980\nTime 12.960000 and 12.959980\nTime 12.961000 and 12.989980\nTime 12.963000 and 12.989980\nTime 12.966000 and 12.989980\nTime 12.968000 and 12.989980\nTime 12.970000 and 12.989980\nTime 12.972000 and 12.989980\nTime 12.974000 and 12.989980\nTime 12.976000 and 12.989980\nTime 12.978000 and 12.989980\nTime 12.980000 and 12.989980\nTime 12.983000 and 12.989980\nTime 12.985000 and 12.989980\nTime 12.996000 and 12.989980\nTime 12.998000 and 13.019979\nTime 13.000000 and 13.019979\nTime 13.002000 and 13.019979\nTime 13.003000 and 13.019979\nTime 13.005000 and 13.019979\nTime 13.007000 and 13.019979\nTime 13.009000 and 13.019979\nTime 13.011000 and 13.019979\nTime 13.013000 and 13.019979\nTime 13.015000 and 13.019979\nTime 13.017000 and 13.019979\nTime 13.019000 and 13.019979\nTime 13.021000 and 13.019979\nTime 13.023000 and 13.049979\nTime 13.025000 and 13.049979\nTime 13.027000 and 13.049979\nTime 13.029000 and 13.049979\nTime 13.031000 and 13.049979\nTime 13.033000 and 13.049979\nTime 13.034000 and 13.049979\nTime 13.036000 and 13.049979\nTime 13.038000 and 13.049979\nTime 13.040000 and 13.049979\nTime 13.042000 and 13.049979\nTime 13.044000 and 13.049979\nTime 13.046000 and 13.049979\nTime 13.047000 and 13.049979\nTime 13.049000 and 13.049979\nTime 13.051000 and 13.049979\nTime 13.053000 and 13.079979\nTime 13.055000 and 13.079979\nTime 13.057000 and 13.079979\nTime 13.059000 and 13.079979\nTime 13.061000 and 13.079979\nTime 13.063000 and 13.079979\nTime 13.065000 and 13.079979\nTime 13.066000 and 13.079979\nTime 13.068000 and 13.079979\nTime 13.070000 and 13.079979\nTime 13.072000 and 13.079979\nTime 13.074000 and 13.079979\nTime 13.076000 and 13.079979\nTime 13.078000 and 13.079979\nTime 13.079000 and 13.079979\nTime 13.081000 and 13.079979\nTime 13.084000 and 13.109979\nTime 13.086000 and 13.109979\nTime 13.088000 and 13.109979\nTime 13.090000 and 13.109979\nTime 13.092000 and 13.109979\nTime 13.094000 and 13.109979\nTime 13.096000 and 13.109979\nTime 13.101000 and 13.109979\nTime 13.102000 and 13.109979\nTime 13.113000 and 13.109979\nTime 13.115000 and 13.139978\nTime 13.117000 and 13.139978\nTime 13.119000 and 13.139978\nTime 13.121000 and 13.139978\nTime 13.123000 and 13.139978\nTime 13.125000 and 13.139978\nTime 13.127000 and 13.139978\nTime 13.128000 and 13.139978\nTime 13.130000 and 13.139978\nTime 13.132000 and 13.139978\nTime 13.134000 and 13.139978\nTime 13.136000 and 13.139978\nTime 13.138000 and 13.139978\nTime 13.140000 and 13.139978\nTime 13.141000 and 13.169978\nTime 13.143000 and 13.169978\nTime 13.145000 and 13.169978\nTime 13.147000 and 13.169978\nTime 13.149000 and 13.169978\nTime 13.151000 and 13.169978\nTime 13.153000 and 13.169978\nTime 13.155000 and 13.169978\nTime 13.157000 and 13.169978\nTime 13.158000 and 13.169978\nTime 13.160000 and 13.169978\nTime 13.162000 and 13.169978\nTime 13.164000 and 13.169978\nTime 13.166000 and 13.169978\nTime 13.168000 and 13.169978\nTime 13.170000 and 13.169978\nTime 13.171000 and 13.199978\nTime 13.173000 and 13.199978\nTime 13.175000 and 13.199978\nTime 13.177000 and 13.199978\nTime 13.179000 and 13.199978\nTime 13.181000 and 13.199978\nTime 13.182000 and 13.199978\nTime 13.184000 and 13.199978\nTime 13.186000 and 13.199978\nTime 13.188000 and 13.199978\nTime 13.190000 and 13.199978\nTime 13.192000 and 13.199978\nTime 13.194000 and 13.199978\nTime 13.196000 and 13.199978\nTime 13.198000 and 13.199978\nTime 13.200000 and 13.199978\nTime 13.202000 and 13.229978\nTime 13.204000 and 13.229978\nTime 13.205000 and 13.229978\nTime 13.207000 and 13.229978\nTime 13.209000 and 13.229978\nTime 13.212000 and 13.229978\nTime 13.214000 and 13.229978\nTime 13.216000 and 13.229978\nTime 13.217000 and 13.229978\nTime 13.223000 and 13.229978\nTime 13.225000 and 13.229978\nTime 13.231000 and 13.229978\nTime 13.233000 and 13.259977\nTime 13.235000 and 13.259977\nTime 13.237000 and 13.259977\nTime 13.239000 and 13.259977\nTime 13.241000 and 13.259977\nTime 13.243000 and 13.259977\nTime 13.244000 and 13.259977\nTime 13.246000 and 13.259977\nTime 13.248000 and 13.259977\nTime 13.250000 and 13.259977\nTime 13.252000 and 13.259977\nTime 13.254000 and 13.259977\nTime 13.255000 and 13.259977\nTime 13.257000 and 13.259977\nTime 13.259000 and 13.259977\nTime 13.261000 and 13.259977\nTime 13.263000 and 13.289977\nTime 13.265000 and 13.289977\nTime 13.266000 and 13.289977\nTime 13.268000 and 13.289977\nTime 13.270000 and 13.289977\nTime 13.272000 and 13.289977\nTime 13.274000 and 13.289977\nTime 13.276000 and 13.289977\nTime 13.278000 and 13.289977\nTime 13.280000 and 13.289977\nTime 13.282000 and 13.289977\nTime 13.283000 and 13.289977\nTime 13.285000 and 13.289977\nTime 13.287000 and 13.289977\nTime 13.289000 and 13.289977\nTime 13.291000 and 13.289977\nTime 13.293000 and 13.319977\nTime 13.295000 and 13.319977\nTime 13.297000 and 13.319977\nTime 13.298000 and 13.319977\nTime 13.300000 and 13.319977\nTime 13.302000 and 13.319977\nTime 13.304000 and 13.319977\nTime 13.306000 and 13.319977\nTime 13.308000 and 13.319977\nTime 13.310000 and 13.319977\nTime 13.312000 and 13.319977\nTime 13.314000 and 13.319977\nTime 13.316000 and 13.319977\nTime 13.317000 and 13.319977\nTime 13.319000 and 13.319977\nTime 13.321000 and 13.319977\nTime 13.323000 and 13.349977\nTime 13.325000 and 13.349977\nTime 13.327000 and 13.349977\nTime 13.330000 and 13.349977\nTime 13.333000 and 13.349977\nTime 13.335000 and 13.349977\nTime 13.337000 and 13.349977\nTime 13.342000 and 13.349977\nTime 13.344000 and 13.349977\nTime 13.345000 and 13.349977\nTime 13.352000 and 13.349977\nTime 13.358000 and 13.379976\nTime 13.360000 and 13.379976\nTime 13.362000 and 13.379976\nTime 13.364000 and 13.379976\nTime 13.366000 and 13.379976\nTime 13.368000 and 13.379976\nTime 13.370000 and 13.379976\nTime 13.371000 and 13.379976\nTime 13.373000 and 13.379976\nTime 13.375000 and 13.379976\nTime 13.377000 and 13.379976\nTime 13.379000 and 13.379976\nTime 13.381000 and 13.379976\nTime 13.383000 and 13.409976\nTime 13.385000 and 13.409976\nTime 13.387000 and 13.409976\nTime 13.388000 and 13.409976\nTime 13.390000 and 13.409976\nTime 13.392000 and 13.409976\nTime 13.394000 and 13.409976\nTime 13.396000 and 13.409976\nTime 13.398000 and 13.409976\nTime 13.400000 and 13.409976\nTime 13.402000 and 13.409976\nTime 13.403000 and 13.409976\nTime 13.405000 and 13.409976\nTime 13.407000 and 13.409976\nTime 13.409000 and 13.409976\nTime 13.411000 and 13.409976\nTime 13.413000 and 13.439976\nTime 13.415000 and 13.439976\nTime 13.417000 and 13.439976\nTime 13.419000 and 13.439976\nTime 13.421000 and 13.439976\nTime 13.423000 and 13.439976\nTime 13.425000 and 13.439976\nTime 13.426000 and 13.439976\nTime 13.428000 and 13.439976\nTime 13.430000 and 13.439976\nTime 13.432000 and 13.439976\nTime 13.434000 and 13.439976\nTime 13.436000 and 13.439976\nTime 13.438000 and 13.439976\nTime 13.440000 and 13.439976\nTime 13.442000 and 13.469975\nTime 13.444000 and 13.469975\nTime 13.446000 and 13.469975\nTime 13.448000 and 13.469975\nTime 13.450000 and 13.469975\nTime 13.452000 and 13.469975\nTime 13.454000 and 13.469975\nTime 13.464000 and 13.469975\nTime 13.466000 and 13.469975\nTime 13.481000 and 13.469975\nTime 13.483000 and 13.499975\nTime 13.485000 and 13.499975\nTime 13.487000 and 13.499975\nTime 13.488000 and 13.499975\nTime 13.490000 and 13.499975\nTime 13.492000 and 13.499975\nTime 13.494000 and 13.499975\nTime 13.496000 and 13.499975\nTime 13.498000 and 13.499975\nTime 13.500000 and 13.499975\nTime 13.501000 and 13.529975\nTime 13.503000 and 13.529975\nTime 13.505000 and 13.529975\nTime 13.507000 and 13.529975\nTime 13.509000 and 13.529975\nTime 13.511000 and 13.529975\nTime 13.513000 and 13.529975\nTime 13.515000 and 13.529975\nTime 13.516000 and 13.529975\nTime 13.518000 and 13.529975\nTime 13.520000 and 13.529975\nTime 13.522000 and 13.529975\nTime 13.524000 and 13.529975\nTime 13.526000 and 13.529975\nTime 13.528000 and 13.529975\nTime 13.529000 and 13.529975\nTime 13.531000 and 13.529975\nTime 13.533000 and 13.559975\nTime 13.535000 and 13.559975\nTime 13.537000 and 13.559975\nTime 13.539000 and 13.559975\nTime 13.540000 and 13.559975\nTime 13.542000 and 13.559975\nTime 13.544000 and 13.559975\nTime 13.546000 and 13.559975\nTime 13.548000 and 13.559975\nTime 13.550000 and 13.559975\nTime 13.552000 and 13.559975\nTime 13.553000 and 13.559975\nTime 13.555000 and 13.559975\nTime 13.557000 and 13.559975\nTime 13.559000 and 13.559975\nTime 13.561000 and 13.559975\nTime 13.563000 and 13.589974\nTime 13.566000 and 13.589974\nTime 13.568000 and 13.589974\nTime 13.579000 and 13.589974\nTime 13.581000 and 13.589974\nTime 13.597000 and 13.589974\nTime 13.599000 and 13.619974\nTime 13.601000 and 13.619974\nTime 13.603000 and 13.619974\nTime 13.604000 and 13.619974\nTime 13.606000 and 13.619974\nTime 13.608000 and 13.619974\nTime 13.610000 and 13.619974\nTime 13.612000 and 13.619974\nTime 13.614000 and 13.619974\nTime 13.615000 and 13.619974\nTime 13.617000 and 13.619974\nTime 13.619000 and 13.619974\nTime 13.621000 and 13.619974\nTime 13.623000 and 13.649974\nTime 13.625000 and 13.649974\nTime 13.627000 and 13.649974\nTime 13.629000 and 13.649974\nTime 13.630000 and 13.649974\nTime 13.632000 and 13.649974\nTime 13.634000 and 13.649974\nTime 13.636000 and 13.649974\nTime 13.638000 and 13.649974\nTime 13.640000 and 13.649974\nTime 13.641000 and 13.649974\nTime 13.643000 and 13.649974\nTime 13.645000 and 13.649974\nTime 13.647000 and 13.649974\nTime 13.649000 and 13.649974\nTime 13.651000 and 13.649974\nTime 13.653000 and 13.679974\nTime 13.654000 and 13.679974\nTime 13.656000 and 13.679974\nTime 13.659000 and 13.679974\nTime 13.660000 and 13.679974\nTime 13.662000 and 13.679974\nTime 13.664000 and 13.679974\nTime 13.666000 and 13.679974\nTime 13.668000 and 13.679974\nTime 13.670000 and 13.679974\nTime 13.672000 and 13.679974\nTime 13.674000 and 13.679974\nTime 13.676000 and 13.679974\nTime 13.678000 and 13.679974\nTime 13.680000 and 13.679974\nTime 13.682000 and 13.709973\nTime 13.684000 and 13.709973\nTime 13.686000 and 13.709973\nTime 13.690000 and 13.709973\nTime 13.691000 and 13.709973\nTime 13.698000 and 13.709973\nTime 13.700000 and 13.709973\nTime 13.701000 and 13.709973\nTime 13.703000 and 13.709973\nTime 13.705000 and 13.709973\nTime 13.707000 and 13.709973\nTime 13.709000 and 13.709973\nTime 13.711000 and 13.709973\nTime 13.713000 and 13.739973\nTime 13.715000 and 13.739973\nTime 13.717000 and 13.739973\nTime 13.718000 and 13.739973\nTime 13.720000 and 13.739973\nTime 13.722000 and 13.739973\nTime 13.724000 and 13.739973\nTime 13.726000 and 13.739973\nTime 13.727000 and 13.739973\nTime 13.729000 and 13.739973\nTime 13.731000 and 13.739973\nTime 13.733000 and 13.739973\nTime 13.735000 and 13.739973\nTime 13.737000 and 13.739973\nTime 13.738000 and 13.739973\nTime 13.740000 and 13.739973\nTime 13.742000 and 13.769973\nTime 13.744000 and 13.769973\nTime 13.746000 and 13.769973\nTime 13.748000 and 13.769973\nTime 13.749000 and 13.769973\nTime 13.751000 and 13.769973\nTime 13.753000 and 13.769973\nTime 13.755000 and 13.769973\nTime 13.757000 and 13.769973\nTime 13.759000 and 13.769973\nTime 13.760000 and 13.769973\nTime 13.762000 and 13.769973\nTime 13.764000 and 13.769973\nTime 13.766000 and 13.769973\nTime 13.768000 and 13.769973\nTime 13.770000 and 13.769973\nTime 13.771000 and 13.799973\nTime 13.773000 and 13.799973\nTime 13.775000 and 13.799973\nTime 13.777000 and 13.799973\nTime 13.779000 and 13.799973\nTime 13.780000 and 13.799973\nTime 13.782000 and 13.799973\nTime 13.784000 and 13.799973\nTime 13.786000 and 13.799973\nTime 13.788000 and 13.799973\nTime 13.790000 and 13.799973\nTime 13.792000 and 13.799973\nTime 13.794000 and 13.799973\nTime 13.797000 and 13.799973\nTime 13.800000 and 13.799973\nTime 13.802000 and 13.829972\nTime 13.807000 and 13.829972\nTime 13.812000 and 13.829972\nTime 13.816000 and 13.829972\nTime 13.829000 and 13.829972\nTime 13.831000 and 13.829972\nTime 13.848000 and 13.859972\nTime 13.850000 and 13.859972\nTime 13.852000 and 13.859972\nTime 13.854000 and 13.859972\nTime 13.856000 and 13.859972\nTime 13.858000 and 13.859972\nTime 13.860000 and 13.859972\nTime 13.862000 and 13.889972\nTime 13.863000 and 13.889972\nTime 13.865000 and 13.889972\nTime 13.867000 and 13.889972\nTime 13.869000 and 13.889972\nTime 13.871000 and 13.889972\nTime 13.873000 and 13.889972\nTime 13.874000 and 13.889972\nTime 13.876000 and 13.889972\nTime 13.878000 and 13.889972\nTime 13.880000 and 13.889972\nTime 13.882000 and 13.889972\nTime 13.884000 and 13.889972\nTime 13.885000 and 13.889972\nTime 13.887000 and 13.889972\nTime 13.889000 and 13.889972\nTime 13.891000 and 13.889972\nTime 13.893000 and 13.919971\nTime 13.895000 and 13.919971\nTime 13.897000 and 13.919971\nTime 13.898000 and 13.919971\nTime 13.900000 and 13.919971\nTime 13.902000 and 13.919971\nTime 13.904000 and 13.919971\nTime 13.906000 and 13.919971\nTime 13.908000 and 13.919971\nTime 13.910000 and 13.919971\nTime 13.912000 and 13.919971\nTime 13.914000 and 13.919971\nTime 13.916000 and 13.919971\nTime 13.918000 and 13.919971\nTime 13.919000 and 13.919971\nTime 13.921000 and 13.919971\nTime 13.923000 and 13.949971\nTime 13.927000 and 13.949971\nTime 13.929000 and 13.949971\nTime 13.931000 and 13.949971\nTime 13.942000 and 13.949971\nTime 13.944000 and 13.949971\nTime 13.946000 and 13.949971\nTime 13.947000 and 13.949971\nTime 13.949000 and 13.949971\nTime 13.951000 and 13.949971\nTime 13.953000 and 13.979971\nTime 13.955000 and 13.979971\nTime 13.957000 and 13.979971\nTime 13.959000 and 13.979971\nTime 13.961000 and 13.979971\nTime 13.962000 and 13.979971\nTime 13.965000 and 13.979971\nTime 13.967000 and 13.979971\nTime 13.969000 and 13.979971\nTime 13.971000 and 13.979971\nTime 13.973000 and 13.979971\nTime 13.975000 and 13.979971\nTime 13.978000 and 13.979971\nTime 13.980000 and 13.979971\nTime 13.982000 and 14.009971\nTime 13.983000 and 14.009971\nTime 13.985000 and 14.009971\nTime 13.987000 and 14.009971\nTime 13.989000 and 14.009971\nTime 13.991000 and 14.009971\nTime 13.993000 and 14.009971\nTime 13.995000 and 14.009971\nTime 13.996000 and 14.009971\nTime 13.998000 and 14.009971\nTime 14.000000 and 14.009971\nTime 14.002000 and 14.009971\nTime 14.004000 and 14.009971\nTime 14.006000 and 14.009971\nTime 14.008000 and 14.009971\nTime 14.010000 and 14.009971\nTime 14.011000 and 14.039970\nTime 14.013000 and 14.039970\nTime 14.015000 and 14.039970\nTime 14.017000 and 14.039970\nTime 14.019000 and 14.039970\nTime 14.021000 and 14.039970\nTime 14.022000 and 14.039970\nTime 14.024000 and 14.039970\nTime 14.026000 and 14.039970\nTime 14.028000 and 14.039970\nTime 14.030000 and 14.039970\nTime 14.032000 and 14.039970\nTime 14.034000 and 14.039970\nTime 14.036000 and 14.039970\nTime 14.039000 and 14.039970\nTime 14.040000 and 14.039970\nTime 14.043000 and 14.069970\nTime 14.045000 and 14.069970\nTime 14.048000 and 14.069970\nTime 14.051000 and 14.069970\nTime 14.064000 and 14.069970\nTime 14.066000 and 14.069970\nTime 14.077000 and 14.069970\nTime 14.079000 and 14.099970\nTime 14.081000 and 14.099970\nTime 14.083000 and 14.099970\nTime 14.084000 and 14.099970\nTime 14.086000 and 14.099970\nTime 14.088000 and 14.099970\nTime 14.090000 and 14.099970\nTime 14.092000 and 14.099970\nTime 14.094000 and 14.099970\nTime 14.095000 and 14.099970\nTime 14.097000 and 14.099970\nTime 14.099000 and 14.099970\nTime 14.101000 and 14.099970\nTime 14.103000 and 14.129970\nTime 14.104000 and 14.129970\nTime 14.106000 and 14.129970\nTime 14.108000 and 14.129970\nTime 14.110000 and 14.129970\nTime 14.112000 and 14.129970\nTime 14.113000 and 14.129970\nTime 14.115000 and 14.129970\nTime 14.117000 and 14.129970\nTime 14.119000 and 14.129970\nTime 14.121000 and 14.129970\nTime 14.123000 and 14.129970\nTime 14.124000 and 14.129970\nTime 14.126000 and 14.129970\nTime 14.128000 and 14.129970\nTime 14.130000 and 14.129970\nTime 14.132000 and 14.159969\n(lldb) ",
			"settings":
			{
				"buffer_size": 149794,
				"line_ending": "Unix",
				"name": "2017-04-08 12:05:01.355974-0700 RoboCatActionClien"
			}
		},
		{
			"contents": "<script type=\"text/javascript\">\nfunction toggle() {\n    var app_div = document.getElementById('application');\n    app_div.classList.toggle(\"open\");\n    var arrow = document.getElementById('open-arrow');\n    arrow.classList.toggle(\"rotate\");\n}\n</script>\n<style type=\"text/css\">\n#scholarship {\n    background: #162c7f;\n    color: #000000;\n    padding-right: 3000px;\n    margin-right: -3000px;\n    padding-left: 3000px;\n    margin-left: -3000px;\n    cursor: pointer;\n}\n#application-label {\n    padding-top: 10px;\n    padding-bottom: 10px;\n    color: #FFFFFF;\n}\n.revealing {\n    max-height: 0;\n    overflow: hidden;\n    -webkit-transition: height, 0.5s linear;\n    -moz-transition: height, 0.5s linear;\n    -ms-transition: height, 0.5s linear;\n    -o-transition: height, 0.5s linear;\n    transition: height, 0.5s linear;\n}\n.revealing.open {\n    max-height: 500px;\n    -webkit-transition: height, 0.5s linear;\n    -moz-transition: height, 0.5s linear;\n    -ms-transition: height, 0.5s linear;\n    -o-transition: height, 0.5s linear;\n    transition: height, 0.5s linear;\n}\n#open-arrow.rotate {\n    -o-transform:rotate(180deg);\n    -ms-transform:rotate(180deg);\n    -moz-transform:rotate(180deg);\n    -webkit-transform:rotate(180deg);\n    transform:rotate(180deg);\n}\n#open-arrow {\n    transition: 0.5s;\n}\n.full-width-input {\n    width: 100%;\n}\n</style>\n<div onclick=\"toggle()\" id=\"scholarship\">\n    <h1 id=\"application-label\">San Diego Personal Injury Scholarship<i id=\"open-arrow\" class=\"fa fa-angle-double-down\" style=\"color:white\"></i></h1>\n</div>\n<div id=\"application\" class=\"revealing\">\n    <div class=\"col-md-6\">\n        Testj lskdjt lksjt t asdlkajfldskjkl ;kaldsf asdflkjadsflkjsad fl;askdj asdfkjasdf;lkj asl;dkfj;lkj asdf;lkj asd;kfj asdl;kkjf asdlk;jf l;asd\n    </div>\n    <div class=\"col-md-6\">\n        [contact-form-7 id=\"202\" title=\"Internship\"]\n    </div>\n</div>\n",
			"file": "/Users/erikparreira/Dropbox/LawGuySite/toggle.html",
			"file_size": 1833,
			"file_write_time": 131357519760000000,
			"settings":
			{
				"buffer_size": 1871,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<div style=\"text-align: left;\"><strong>Your Name</strong> (required)\n    [text* your-name class:full-width-input] </div>\n\n<div style=\"text-align: left;\"><strong>Your Number</strong> (required)\n    [tel* tel-645 class:full-width-input]</div>\n\n<div style=\"text-align: left;\"><strong>Your Email</strong> (required)\n    [email* your-email class:full-width-input] </div>\n\n<div style=\"text-align: left;\"><strong>Your Address</strong>\n    [text* your-address class:full-width-input] </div>\n\n<div>Attach File [file file-924]</div>\n<div>[submit \"Send Request\"]</div>",
			"settings":
			{
				"buffer_size": 557,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php get_header() ?>\n\n\n\n<?php\n\nglobal $porto_settings, $porto_layout;\n\n\n\n$featured_images = porto_get_featured_images();\n\n?>\n\n    <div id=\"content\" role=\"main\">\n\n        <?php /* The loop */ ?>\n\n        <?php while ( have_posts() ) : the_post(); ?>\n\n\n\n            <article <?php post_class(); ?>>\n\n                <?php if ( count($featured_images) && ! post_password_required() ) : ?>\n\n                    <?php\n\n                    // Slideshow\n\n                    $featured_images = porto_get_featured_images();\n\n                    $image_count = count($featured_images);\n\n\n\n                    if ($image_count) : ?>\n\n                        <div class=\"page-image<?php if ($image_count == 1) echo ' single'; ?>\">\n\n                            <div class=\"page-slideshow porto-carousel owl-carousel\">\n\n                                <?php\n\n                                foreach ($featured_images as $featured_image) {\n\n                                    $attachment = porto_get_attachment($featured_image['attachment_id']);\n\n                                    if ($attachment) {\n\n                                        ?>\n\n                                        <div>\n\n                                            <div class=\"img-thumbnail\">\n\n                                                <img class=\"owl-lazy img-responsive\" width=\"<?php echo $attachment['width'] ?>\" height=\"<?php echo $attachment['height'] ?>\" data-src=\"<?php echo $attachment['src'] ?>\" alt=\"<?php echo $attachment['alt'] ?>\" />\n\n                                                <?php if ($porto_settings['page-zoom']) : ?>\n\n                                                    <span class=\"zoom\" data-src=\"<?php echo $attachment['src']; ?>\" data-title=\"<?php echo $attachment['caption']; ?>\"><i class=\"fa fa-search\"></i></span>\n\n                                                <?php endif; ?>\n\n                                            </div>\n\n                                        </div>\n\n                                    <?php\n\n                                    }\n\n                                }\n\n                                ?>\n\n                            </div>\n\n                        </div>\n\n                    <?php\n\n                    endif;\n\n                    ?>\n\n                <?php endif; ?>\n\n\n\n                <?php\n\n                $microdata = porto_get_meta_value('page_microdata');\n\n                if ($porto_settings['rich-snippets'] && 'no' !== $microdata && ('yes' === $microdata || ('yes' !== $microdata && $porto_settings['page-microdata']))) {\n\n                    porto_render_rich_snippets();\n\n                }\n\n                ?>\n\n\n\n                <div class=\"page-content\">\n\n                    <?php\n\n                    the_content();\n\n                    wp_link_pages( array(\n\n                        'before'      => '<div class=\"pagination\" role=\"navigation\">',\n\n                        'after'       => '</div>'\n\n                    ) );\n\n                    ?>\n\n                </div>\n\n            </article>\n\n\n\n            <div class=\"<?php if ($porto_layout === 'wide-left-sidebar' || $porto_layout === 'wide-right-sidebar') echo 'm-t-lg m-b-xl m-r-md m-l-md' ?>\">\n\n            <?php\n\n            $share = porto_get_meta_value('page_share');\n\n            if ($porto_settings['share-enable'] && 'no' !== $share && ('yes' === $share || ('yes' !== $share && $porto_settings['page-share']))) : ?>\n\n                <div class=\"page-share<?php echo ($porto_layout == 'widewidth') ? ' container' : '' ?>\">\n\n                    <?php if ($porto_settings['post-title-style'] == 'without-icon') : ?>\n\n\n\n                    <?php else : ?>\n\n                        <h3><i class=\"fa fa-share\"></i><?php _e('Share this post', 'porto') ?></h3>\n\n                    <?php endif; ?>\n\n                    <?php get_template_part('share') ?>\n\n                </div>\n\n            <?php endif; ?>\n\n\n\n            <?php if ($porto_settings['page-comment']) : ?>\n\n                <?php\n\n                wp_reset_postdata();\n\n                comments_template();\n\n                ?>\n\n            <?php endif; ?>\n\n            </div>\n\n\n\n        <?php endwhile; ?>\n\n\n\n    </div>\n\n\n\n<?php get_footer() ?>",
			"settings":
			{
				"buffer_size": 4222,
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/Users/erikparreira/Dropbox/Programming/networkplayground/cmake-build-debug/networkplaygroundclient\nInitializing NetworkManager at port 0\nTime 0.203000 and 0.000000\nSampling\nTime 0.261000 and 1.000000\nTime 0.262000 and 1.000000\nTime 0.266000 and 1.000000\nTime 0.286000 and 1.000000\nTime 0.289000 and 1.000000\nTime 0.298000 and 1.000000\nTime 0.316000 and 1.000000\nTime 0.333000 and 1.000000\nTime 0.349000 and 1.000000\nTime 0.374000 and 1.000000\nTime 0.383000 and 1.000000\nTime 0.386000 and 1.000000\nTime 0.398000 and 1.000000\nTime 0.400000 and 1.000000\nTime 0.402000 and 1.000000\nTime 0.404000 and 1.000000\nTime 0.406000 and 1.000000\nTime 0.408000 and 1.000000\nTime 0.410000 and 1.000000\nTime 0.411000 and 1.000000\nTime 0.413000 and 1.000000\nTime 0.416000 and 1.000000\nTime 0.418000 and 1.000000\nTime 0.420000 and 1.000000\nTime 0.421000 and 1.000000\nTime 0.423000 and 1.000000\nTime 0.425000 and 1.000000\nTime 0.426000 and 1.000000\nTime 0.429000 and 1.000000\nTime 0.430000 and 1.000000\nTime 0.432000 and 1.000000\nTime 0.434000 and 1.000000\nTime 0.436000 and 1.000000\nTime 0.437000 and 1.000000\nTime 0.439000 and 1.000000\nTime 0.440000 and 1.000000\nTime 0.442000 and 1.000000\nTime 0.445000 and 1.000000\nTime 0.446000 and 1.000000\nTime 0.448000 and 1.000000\nTime 0.449000 and 1.000000\nTime 0.451000 and 1.000000\nTime 0.453000 and 1.000000\nTime 0.455000 and 1.000000\nTime 0.456000 and 1.000000\nTime 0.458000 and 1.000000\nTime 0.460000 and 1.000000\nTime 0.461000 and 1.000000\nTime 0.463000 and 1.000000\nTime 0.465000 and 1.000000\nTime 0.466000 and 1.000000\nTime 0.468000 and 1.000000\nTime 0.469000 and 1.000000\nTime 0.471000 and 1.000000\nTime 0.472000 and 1.000000\nTime 0.474000 and 1.000000\nTime 0.476000 and 1.000000\nTime 0.477000 and 1.000000\nTime 0.479000 and 1.000000\nTime 0.481000 and 1.000000\nTime 0.483000 and 1.000000\nTime 0.484000 and 1.000000\nTime 0.486000 and 1.000000\nTime 0.487000 and 1.000000\nTime 0.489000 and 1.000000\nTime 0.491000 and 1.000000\nTime 0.492000 and 1.000000\nTime 0.494000 and 1.000000\nTime 0.496000 and 1.000000\nTime 0.498000 and 1.000000\nTime 0.500000 and 1.000000\nTime 0.502000 and 1.000000\nTime 0.504000 and 1.000000\nTime 0.506000 and 1.000000\nTime 0.507000 and 1.000000\nTime 0.509000 and 1.000000\nTime 0.511000 and 1.000000\nTime 0.513000 and 1.000000\nTime 0.514000 and 1.000000\nTime 0.516000 and 1.000000\nTime 0.517000 and 1.000000\nTime 0.519000 and 1.000000\nTime 0.521000 and 1.000000\nTime 0.522000 and 1.000000\nTime 0.524000 and 1.000000\nTime 0.525000 and 1.000000\nTime 0.527000 and 1.000000\nTime 0.529000 and 1.000000\nTime 0.533000 and 1.000000\nTime 0.548000 and 1.000000\nTime 0.566000 and 1.000000\nTime 0.582000 and 1.000000\nTime 0.598000 and 1.000000\nTime 0.615000 and 1.000000\nTime 0.633000 and 1.000000\nTime 0.650000 and 1.000000\nTime 0.665000 and 1.000000\nTime 0.681000 and 1.000000\nTime 0.682000 and 1.000000\nTime 0.695000 and 1.000000\nTime 0.701000 and 1.000000\nTime 0.703000 and 1.000000\nTime 0.704000 and 1.000000\nTime 0.706000 and 1.000000\nTime 0.708000 and 1.000000\nTime 0.709000 and 1.000000\nTime 0.711000 and 1.000000\nTime 0.712000 and 1.000000\nTime 0.714000 and 1.000000\nTime 0.715000 and 1.000000\nTime 0.717000 and 1.000000\nTime 0.718000 and 1.000000\nTime 0.720000 and 1.000000\nTime 0.721000 and 1.000000\nTime 0.723000 and 1.000000\nTime 0.724000 and 1.000000\nTime 0.728000 and 1.000000\nTime 0.729000 and 1.000000\nTime 0.732000 and 1.000000\nTime 0.733000 and 1.000000\nTime 0.735000 and 1.000000\nTime 0.737000 and 1.000000\nTime 0.738000 and 1.000000\nTime 0.740000 and 1.000000\nTime 0.741000 and 1.000000\nTime 0.743000 and 1.000000\nTime 0.744000 and 1.000000\nTime 0.746000 and 1.000000\nTime 0.747000 and 1.000000\nTime 0.749000 and 1.000000\nTime 0.751000 and 1.000000\nTime 0.753000 and 1.000000\nTime 0.755000 and 1.000000\nTime 0.756000 and 1.000000\nTime 0.765000 and 1.000000\nTime 0.767000 and 1.000000\nTime 0.787000 and 1.000000\nTime 0.799000 and 1.000000\nTime 0.817000 and 1.000000\nTime 0.832000 and 1.000000\nTime 0.834000 and 1.000000\nTime 0.850000 and 1.000000\nTime 0.854000 and 1.000000\nTime 0.888000 and 1.000000\nTime 0.900000 and 1.000000\nTime 0.915000 and 1.000000\nTime 0.917000 and 1.000000\nTime 0.928000 and 1.000000\nTime 0.934000 and 1.000000\nTime 0.936000 and 1.000000\nTime 0.938000 and 1.000000\nTime 0.939000 and 1.000000\nTime 0.941000 and 1.000000\nTime 0.942000 and 1.000000\nTime 0.944000 and 1.000000\nTime 0.946000 and 1.000000\nTime 0.947000 and 1.000000\nTime 0.949000 and 1.000000\nTime 0.951000 and 1.000000\nTime 0.953000 and 1.000000\nTime 0.954000 and 1.000000\nTime 0.957000 and 1.000000\nTime 0.958000 and 1.000000\nTime 0.961000 and 1.000000\nTime 0.963000 and 1.000000\nTime 0.982000 and 1.000000\nTime 0.984000 and 1.000000\nTime 1.002000 and 1.000000\nSampling\nTime 1.016000 and 2.000000\n'DUDUD' was welcomed on client as player 1\nTime 1.033000 and 2.000000\nTime 1.055000 and 2.000000\nTime 1.069000 and 2.000000\nTime 1.085000 and 2.000000\nTime 1.101000 and 2.000000\nTime 1.103000 and 2.000000\nTime 1.104000 and 2.000000\nTime 1.106000 and 2.000000\nTime 1.108000 and 2.000000\nTime 1.109000 and 2.000000\nTime 1.111000 and 2.000000\nTime 1.112000 and 2.000000\nTime 1.114000 and 2.000000\nTime 1.116000 and 2.000000\nTime 1.117000 and 2.000000\nTime 1.119000 and 2.000000\nTime 1.120000 and 2.000000\nTime 1.122000 and 2.000000\nTime 1.123000 and 2.000000\nTime 1.125000 and 2.000000\nTime 1.126000 and 2.000000\nTime 1.128000 and 2.000000\nTime 1.129000 and 2.000000\nTime 1.131000 and 2.000000\nTime 1.132000 and 2.000000\nTime 1.134000 and 2.000000\nTime 1.136000 and 2.000000\nTime 1.137000 and 2.000000\nTime 1.139000 and 2.000000\nTime 1.140000 and 2.000000\nTime 1.142000 and 2.000000\nTime 1.143000 and 2.000000\nTime 1.145000 and 2.000000\nTime 1.146000 and 2.000000\nTime 1.148000 and 2.000000\nTime 1.149000 and 2.000000\nTime 1.151000 and 2.000000\nTime 1.152000 and 2.000000\nTime 1.154000 and 2.000000\nTime 1.156000 and 2.000000\nTime 1.157000 and 2.000000\nTime 1.159000 and 2.000000\nTime 1.162000 and 2.000000\nTime 1.166000 and 2.000000\nTime 1.182000 and 2.000000\nTime 1.199000 and 2.000000\nTime 1.216000 and 2.000000\nTime 1.232000 and 2.000000\nTime 1.247000 and 2.000000\nTime 1.249000 and 2.000000\nTime 1.250000 and 2.000000\nTime 1.252000 and 2.000000\nTime 1.254000 and 2.000000\nTime 1.255000 and 2.000000\nTime 1.257000 and 2.000000\nTime 1.258000 and 2.000000\nTime 1.260000 and 2.000000\nTime 1.261000 and 2.000000\nTime 1.263000 and 2.000000\nTime 1.264000 and 2.000000\nTime 1.266000 and 2.000000\nTime 1.267000 and 2.000000\nTime 1.269000 and 2.000000\nTime 1.270000 and 2.000000\nTime 1.272000 and 2.000000\nTime 1.273000 and 2.000000\nTime 1.275000 and 2.000000\nTime 1.276000 and 2.000000\nTime 1.278000 and 2.000000\nTime 1.280000 and 2.000000\nTime 1.281000 and 2.000000\nTime 1.283000 and 2.000000\nTime 1.284000 and 2.000000\nTime 1.286000 and 2.000000\nTime 1.288000 and 2.000000\nTime 1.289000 and 2.000000\nTime 1.291000 and 2.000000\nTime 1.292000 and 2.000000\nTime 1.294000 and 2.000000\nTime 1.296000 and 2.000000\nTime 1.297000 and 2.000000\nTime 1.299000 and 2.000000\nTime 1.301000 and 2.000000\nTime 1.302000 and 2.000000\nTime 1.304000 and 2.000000\nTime 1.307000 and 2.000000\nTime 1.309000 and 2.000000\nTime 1.310000 and 2.000000\nTime 1.312000 and 2.000000\nTime 1.313000 and 2.000000\nTime 1.315000 and 2.000000\nTime 1.316000 and 2.000000\nTime 1.318000 and 2.000000\nTime 1.320000 and 2.000000\nTime 1.321000 and 2.000000\nTime 1.323000 and 2.000000\nTime 1.324000 and 2.000000\nTime 1.326000 and 2.000000\nTime 1.327000 and 2.000000\nTime 1.329000 and 2.000000\nTime 1.331000 and 2.000000\nTime 1.332000 and 2.000000\nTime 1.334000 and 2.000000\nTime 1.335000 and 2.000000\nTime 1.338000 and 2.000000\nTime 1.340000 and 2.000000\nTime 1.341000 and 2.000000\nTime 1.343000 and 2.000000\nTime 1.344000 and 2.000000\nTime 1.346000 and 2.000000\nTime 1.347000 and 2.000000\nTime 1.349000 and 2.000000\nTime 1.350000 and 2.000000\nTime 1.353000 and 2.000000\nTime 1.354000 and 2.000000\nTime 1.356000 and 2.000000\nTime 1.357000 and 2.000000\nTime 1.359000 and 2.000000\nTime 1.361000 and 2.000000\nTime 1.364000 and 2.000000\nTime 1.382000 and 2.000000\nTime 1.383000 and 2.000000\nTime 1.401000 and 2.000000\nTime 1.418000 and 2.000000\nTime 1.435000 and 2.000000\nTime 1.452000 and 2.000000\nTime 1.468000 and 2.000000\nTime 1.484000 and 2.000000\nTime 1.486000 and 2.000000\nTime 1.497000 and 2.000000\nTime 1.500000 and 2.000000\nTime 1.502000 and 2.000000\nTime 1.503000 and 2.000000\nTime 1.505000 and 2.000000\nTime 1.506000 and 2.000000\nTime 1.508000 and 2.000000\nTime 1.509000 and 2.000000\nTime 1.510000 and 2.000000\nTime 1.512000 and 2.000000\nTime 1.513000 and 2.000000\nTime 1.515000 and 2.000000\nTime 1.516000 and 2.000000\nTime 1.518000 and 2.000000\nTime 1.519000 and 2.000000\nTime 1.521000 and 2.000000\nTime 1.522000 and 2.000000\nTime 1.524000 and 2.000000\nTime 1.525000 and 2.000000\nTime 1.527000 and 2.000000\nTime 1.528000 and 2.000000\nTime 1.530000 and 2.000000\nTime 1.531000 and 2.000000\nTime 1.532000 and 2.000000\nTime 1.534000 and 2.000000\nTime 1.535000 and 2.000000\nTime 1.537000 and 2.000000\nTime 1.538000 and 2.000000\nTime 1.539000 and 2.000000\nTime 1.541000 and 2.000000\nTime 1.542000 and 2.000000\nTime 1.546000 and 2.000000\nTime 1.546000 and 2.000000\nTime 1.548000 and 2.000000\nTime 1.549000 and 2.000000\nTime 1.550000 and 2.000000\nTime 1.552000 and 2.000000\nTime 1.553000 and 2.000000\nTime 1.555000 and 2.000000\nTime 1.556000 and 2.000000\nTime 1.559000 and 2.000000\nTime 1.561000 and 2.000000\nTime 1.563000 and 2.000000\nTime 1.567000 and 2.000000\nTime 1.570000 and 2.000000\nTime 1.582000 and 2.000000\nTime 1.598000 and 2.000000\nTime 1.616000 and 2.000000\nTime 1.634000 and 2.000000\nTime 1.649000 and 2.000000\nTime 1.666000 and 2.000000\nTime 1.683000 and 2.000000\nTime 1.699000 and 2.000000\nTime 1.700000 and 2.000000\nTime 1.702000 and 2.000000\nTime 1.705000 and 2.000000\nTime 1.707000 and 2.000000\nTime 1.709000 and 2.000000\nTime 1.710000 and 2.000000\nTime 1.712000 and 2.000000\nTime 1.713000 and 2.000000\nTime 1.716000 and 2.000000\nTime 1.719000 and 2.000000\nTime 1.719000 and 2.000000\nTime 1.721000 and 2.000000\nTime 1.722000 and 2.000000\nTime 1.724000 and 2.000000\nTime 1.725000 and 2.000000\nTime 1.727000 and 2.000000\nTime 1.728000 and 2.000000\nTime 1.731000 and 2.000000\nTime 1.732000 and 2.000000\nTime 1.734000 and 2.000000\nTime 1.735000 and 2.000000\nTime 1.737000 and 2.000000\nTime 1.738000 and 2.000000\nTime 1.740000 and 2.000000\nTime 1.741000 and 2.000000\nTime 1.743000 and 2.000000\nTime 1.744000 and 2.000000\nTime 1.746000 and 2.000000\nTime 1.747000 and 2.000000\nTime 1.749000 and 2.000000\nTime 1.751000 and 2.000000\nTime 1.752000 and 2.000000\nTime 1.754000 and 2.000000\nTime 1.755000 and 2.000000\nTime 1.757000 and 2.000000\nTime 1.758000 and 2.000000\nTime 1.760000 and 2.000000\nTime 1.761000 and 2.000000\nTime 1.763000 and 2.000000\nTime 1.765000 and 2.000000\nTime 1.768000 and 2.000000\nTime 1.770000 and 2.000000\nTime 1.800000 and 2.000000\nTime 1.818000 and 2.000000\nTime 1.833000 and 2.000000\nTime 1.850000 and 2.000000\nTime 1.866000 and 2.000000\nTime 1.881000 and 2.000000\nTime 1.883000 and 2.000000\nTime 1.895000 and 2.000000\nTime 1.900000 and 2.000000\nTime 1.902000 and 2.000000\nTime 1.903000 and 2.000000\nTime 1.905000 and 2.000000\nTime 1.906000 and 2.000000\nTime 1.908000 and 2.000000\nTime 1.909000 and 2.000000\nTime 1.911000 and 2.000000\nTime 1.912000 and 2.000000\nTime 1.915000 and 2.000000\nTime 1.917000 and 2.000000\nTime 1.918000 and 2.000000\nTime 1.920000 and 2.000000\nTime 1.921000 and 2.000000\nTime 1.923000 and 2.000000\nTime 1.924000 and 2.000000\nTime 1.926000 and 2.000000\nTime 1.928000 and 2.000000\nTime 1.929000 and 2.000000\nTime 1.931000 and 2.000000\nTime 1.934000 and 2.000000\nTime 1.935000 and 2.000000\nTime 1.937000 and 2.000000\nTime 1.938000 and 2.000000\nTime 1.940000 and 2.000000\nTime 1.941000 and 2.000000\nTime 1.943000 and 2.000000\nTime 1.944000 and 2.000000\nTime 1.945000 and 2.000000\nTime 1.947000 and 2.000000\nTime 1.948000 and 2.000000\nTime 1.950000 and 2.000000\nTime 1.951000 and 2.000000\nTime 1.953000 and 2.000000\nTime 1.954000 and 2.000000\nTime 1.955000 and 2.000000\nTime 1.957000 and 2.000000\nTime 1.960000 and 2.000000\nTime 1.961000 and 2.000000\nTime 1.963000 and 2.000000\nTime 1.965000 and 2.000000\nTime 1.967000 and 2.000000\nTime 1.968000 and 2.000000\nTime 1.972000 and 2.000000\nTime 1.983000 and 2.000000\nTime 1.999000 and 2.000000\nTime 2.015000 and 2.000000\nSampling\nTime 2.031000 and 3.000000\nTime 2.049000 and 3.000000\nTime 2.066000 and 3.000000\nTime 2.085000 and 3.000000\nTime 2.099000 and 3.000000\nTime 2.101000 and 3.000000\nTime 2.112000 and 3.000000\nTime 2.114000 and 3.000000\nTime 2.115000 and 3.000000\nTime 2.117000 and 3.000000\nTime 2.119000 and 3.000000\nTime 2.121000 and 3.000000\nTime 2.122000 and 3.000000\nTime 2.124000 and 3.000000\nTime 2.126000 and 3.000000\nTime 2.128000 and 3.000000\nTime 2.130000 and 3.000000\nTime 2.131000 and 3.000000\nTime 2.133000 and 3.000000\nTime 2.135000 and 3.000000\nTime 2.137000 and 3.000000\nTime 2.138000 and 3.000000\nTime 2.140000 and 3.000000\nTime 2.142000 and 3.000000\nTime 2.143000 and 3.000000\nTime 2.145000 and 3.000000\nTime 2.147000 and 3.000000\nTime 2.149000 and 3.000000\nTime 2.152000 and 3.000000\nTime 2.152000 and 3.000000\nTime 2.154000 and 3.000000\nTime 2.156000 and 3.000000\nTime 2.158000 and 3.000000\nTime 2.159000 and 3.000000\nTime 2.161000 and 3.000000\nTime 2.163000 and 3.000000\nTime 2.166000 and 3.000000\nTime 2.168000 and 3.000000\nTime 2.170000 and 3.000000\nTime 2.171000 and 3.000000\nTime 2.182000 and 3.000000\nTime 2.184000 and 3.000000\nTime 2.199000 and 3.000000\nTime 2.202000 and 3.000000\nTime 2.204000 and 3.000000\nTime 2.216000 and 3.000000\nTime 2.233000 and 3.000000\nTime 2.250000 and 3.000000\nTime 2.265000 and 3.000000\nTime 2.283000 and 3.000000\nTime 2.300000 and 3.000000\nTime 2.301000 and 3.000000\nTime 2.312000 and 3.000000\nTime 2.315000 and 3.000000\nTime 2.318000 and 3.000000\nTime 2.319000 and 3.000000\nTime 2.320000 and 3.000000\nTime 2.322000 and 3.000000\nTime 2.323000 and 3.000000\nTime 2.325000 and 3.000000\nTime 2.326000 and 3.000000\nTime 2.328000 and 3.000000\nTime 2.330000 and 3.000000\nTime 2.331000 and 3.000000\nTime 2.333000 and 3.000000\nTime 2.336000 and 3.000000\nTime 2.337000 and 3.000000\nTime 2.339000 and 3.000000\nTime 2.340000 and 3.000000\nTime 2.342000 and 3.000000\nTime 2.343000 and 3.000000\nTime 2.345000 and 3.000000\nTime 2.346000 and 3.000000\nTime 2.347000 and 3.000000\nTime 2.349000 and 3.000000\nTime 2.350000 and 3.000000\nTime 2.352000 and 3.000000\nTime 2.353000 and 3.000000\nTime 2.355000 and 3.000000\nTime 2.356000 and 3.000000\nTime 2.357000 and 3.000000\nTime 2.359000 and 3.000000\nTime 2.360000 and 3.000000\nTime 2.363000 and 3.000000\nTime 2.364000 and 3.000000\nTime 2.366000 and 3.000000\nTime 2.367000 and 3.000000\nTime 2.369000 and 3.000000\nTime 2.370000 and 3.000000\nTime 2.372000 and 3.000000\nTime 2.376000 and 3.000000\nTime 2.378000 and 3.000000\nTime 2.385000 and 3.000000\nTime 2.403000 and 3.000000\nTime 2.416000 and 3.000000\nTime 2.417000 and 3.000000\nTime 2.434000 and 3.000000\nTime 2.436000 and 3.000000\nTime 2.448000 and 3.000000\nTime 2.450000 and 3.000000\nTime 2.468000 and 3.000000\nTime 2.470000 and 3.000000\nTime 2.482000 and 3.000000\nTime 2.484000 and 3.000000\nTime 2.501000 and 3.000000\nTime 2.502000 and 3.000000\nTime 2.504000 and 3.000000\nTime 2.506000 and 3.000000\nTime 2.507000 and 3.000000\nTime 2.509000 and 3.000000\nTime 2.510000 and 3.000000\nTime 2.512000 and 3.000000\nTime 2.513000 and 3.000000\nTime 2.515000 and 3.000000\nTime 2.516000 and 3.000000\nTime 2.518000 and 3.000000\nTime 2.519000 and 3.000000\nTime 2.521000 and 3.000000\nTime 2.522000 and 3.000000\nTime 2.524000 and 3.000000\nTime 2.526000 and 3.000000\nTime 2.528000 and 3.000000\nTime 2.530000 and 3.000000\nTime 2.531000 and 3.000000\nTime 2.532000 and 3.000000\nTime 2.534000 and 3.000000\nTime 2.535000 and 3.000000\nTime 2.537000 and 3.000000\nTime 2.538000 and 3.000000\nTime 2.540000 and 3.000000\nTime 2.541000 and 3.000000\nTime 2.543000 and 3.000000\nTime 2.544000 and 3.000000\nTime 2.546000 and 3.000000\nTime 2.547000 and 3.000000\nTime 2.548000 and 3.000000\nTime 2.550000 and 3.000000\nTime 2.551000 and 3.000000\nTime 2.553000 and 3.000000\nTime 2.554000 and 3.000000\nTime 2.556000 and 3.000000\nTime 2.557000 and 3.000000\nTime 2.559000 and 3.000000\nTime 2.560000 and 3.000000\nTime 2.562000 and 3.000000\nTime 2.563000 and 3.000000\nTime 2.564000 and 3.000000\nTime 2.566000 and 3.000000\nTime 2.567000 and 3.000000\nTime 2.569000 and 3.000000\nTime 2.570000 and 3.000000\nTime 2.572000 and 3.000000\nTime 2.573000 and 3.000000\nTime 2.575000 and 3.000000\nTime 2.580000 and 3.000000\nTime 2.580000 and 3.000000\nTime 2.599000 and 3.000000\nTime 2.601000 and 3.000000\nTime 2.618000 and 3.000000\nTime 2.620000 and 3.000000\nTime 2.632000 and 3.000000\nTime 2.634000 and 3.000000\nTime 2.651000 and 3.000000\nTime 2.666000 and 3.000000\nTime 2.667000 and 3.000000\nTime 2.684000 and 3.000000\nTime 2.686000 and 3.000000\nTime 2.697000 and 3.000000\nTime 2.699000 and 3.000000\nTime 2.700000 and 3.000000\nTime 2.702000 and 3.000000\nTime 2.703000 and 3.000000\nTime 2.705000 and 3.000000\nTime 2.706000 and 3.000000\nTime 2.708000 and 3.000000\nTime 2.710000 and 3.000000\nTime 2.711000 and 3.000000\nTime 2.713000 and 3.000000\nTime 2.714000 and 3.000000\nTime 2.716000 and 3.000000\nTime 2.717000 and 3.000000\nTime 2.719000 and 3.000000\nTime 2.720000 and 3.000000\nTime 2.722000 and 3.000000\nTime 2.723000 and 3.000000\nTime 2.725000 and 3.000000\nTime 2.726000 and 3.000000\nTime 2.728000 and 3.000000\nTime 2.729000 and 3.000000\nTime 2.731000 and 3.000000\nTime 2.732000 and 3.000000\nTime 2.734000 and 3.000000\nTime 2.736000 and 3.000000\nTime 2.737000 and 3.000000\nTime 2.739000 and 3.000000\nTime 2.740000 and 3.000000\nTime 2.742000 and 3.000000\nTime 2.743000 and 3.000000\nTime 2.746000 and 3.000000\nTime 2.746000 and 3.000000\nTime 2.748000 and 3.000000\nTime 2.749000 and 3.000000\nTime 2.751000 and 3.000000\nTime 2.752000 and 3.000000\nTime 2.754000 and 3.000000\nTime 2.756000 and 3.000000\nTime 2.757000 and 3.000000\nTime 2.759000 and 3.000000\nTime 2.760000 and 3.000000\nTime 2.762000 and 3.000000\nTime 2.763000 and 3.000000\nTime 2.765000 and 3.000000\nTime 2.766000 and 3.000000\nTime 2.768000 and 3.000000\nTime 2.769000 and 3.000000\nTime 2.771000 and 3.000000\nTime 2.772000 and 3.000000\nTime 2.774000 and 3.000000\nTime 2.776000 and 3.000000\nTime 2.778000 and 3.000000\nTime 2.781000 and 3.000000\nTime 2.783000 and 3.000000\nTime 2.800000 and 3.000000\nTime 2.802000 and 3.000000\nTime 2.815000 and 3.000000\nTime 2.832000 and 3.000000\nTime 2.850000 and 3.000000\nTime 2.867000 and 3.000000\nTime 2.883000 and 3.000000\nTime 2.898000 and 3.000000\nTime 2.900000 and 3.000000\nTime 2.911000 and 3.000000\nTime 2.918000 and 3.000000\nTime 2.918000 and 3.000000\nTime 2.920000 and 3.000000\nTime 2.921000 and 3.000000\nTime 2.923000 and 3.000000\nTime 2.925000 and 3.000000\nTime 2.926000 and 3.000000\nTime 2.928000 and 3.000000\nTime 2.929000 and 3.000000\nTime 2.931000 and 3.000000\nTime 2.932000 and 3.000000\nTime 2.934000 and 3.000000\nTime 2.935000 and 3.000000\nTime 2.937000 and 3.000000\nTime 2.938000 and 3.000000\nTime 2.940000 and 3.000000\nTime 2.941000 and 3.000000\nTime 2.943000 and 3.000000\nTime 2.944000 and 3.000000\nTime 2.946000 and 3.000000\nTime 2.948000 and 3.000000\nTime 2.949000 and 3.000000\nTime 2.951000 and 3.000000\nTime 2.952000 and 3.000000\nTime 2.954000 and 3.000000\nTime 2.955000 and 3.000000\nTime 2.957000 and 3.000000\nTime 2.958000 and 3.000000\nTime 2.960000 and 3.000000\nTime 2.961000 and 3.000000\nTime 2.963000 and 3.000000\nTime 2.964000 and 3.000000\nTime 2.966000 and 3.000000\nTime 2.967000 and 3.000000\nTime 2.969000 and 3.000000\nTime 2.970000 and 3.000000\nTime 2.972000 and 3.000000\nTime 2.973000 and 3.000000\nTime 2.975000 and 3.000000\nTime 2.976000 and 3.000000\nTime 2.978000 and 3.000000\nTime 2.980000 and 3.000000\nTime 2.982000 and 3.000000\nTime 2.998000 and 3.000000\nTime 3.001000 and 3.000000\nSampling\nTime 3.019000 and 4.000000\nTime 3.034000 and 4.000000\nTime 3.050000 and 4.000000\nTime 3.068000 and 4.000000\nTime 3.085000 and 4.000000\nTime 3.100000 and 4.000000\nTime 3.117000 and 4.000000\nTime 3.133000 and 4.000000\nTime 3.135000 and 4.000000\nTime 3.137000 and 4.000000\nTime 3.138000 and 4.000000\nTime 3.140000 and 4.000000\nTime 3.141000 and 4.000000\nTime 3.143000 and 4.000000\nTime 3.145000 and 4.000000\nTime 3.146000 and 4.000000\nTime 3.148000 and 4.000000\nTime 3.149000 and 4.000000\nTime 3.151000 and 4.000000\nTime 3.153000 and 4.000000\nTime 3.154000 and 4.000000\nTime 3.156000 and 4.000000\nTime 3.157000 and 4.000000\nTime 3.159000 and 4.000000\nTime 3.160000 and 4.000000\nTime 3.162000 and 4.000000\nTime 3.163000 and 4.000000\nTime 3.165000 and 4.000000\nTime 3.166000 and 4.000000\nTime 3.168000 and 4.000000\nTime 3.170000 and 4.000000\nTime 3.171000 and 4.000000\nTime 3.174000 and 4.000000\nTime 3.174000 and 4.000000\nTime 3.176000 and 4.000000\nTime 3.177000 and 4.000000\nTime 3.179000 and 4.000000\nTime 3.181000 and 4.000000\nTime 3.183000 and 4.000000\nTime 3.186000 and 4.000000\nTime 3.188000 and 4.000000\nTime 3.199000 and 4.000000\nTime 3.216000 and 4.000000\nTime 3.233000 and 4.000000\nTime 3.250000 and 4.000000\nTime 3.265000 and 4.000000\nTime 3.283000 and 4.000000\nTime 3.302000 and 4.000000\nTime 3.318000 and 4.000000\nTime 3.320000 and 4.000000\nTime 3.332000 and 4.000000\nTime 3.334000 and 4.000000\nTime 3.337000 and 4.000000\nTime 3.339000 and 4.000000\nTime 3.341000 and 4.000000\nTime 3.342000 and 4.000000\nTime 3.344000 and 4.000000\nTime 3.345000 and 4.000000\nTime 3.347000 and 4.000000\nTime 3.349000 and 4.000000\nTime 3.351000 and 4.000000\nTime 3.353000 and 4.000000\nTime 3.355000 and 4.000000\nTime 3.356000 and 4.000000\nTime 3.358000 and 4.000000\nTime 3.359000 and 4.000000\nTime 3.361000 and 4.000000\nTime 3.362000 and 4.000000\nTime 3.364000 and 4.000000\nTime 3.365000 and 4.000000\nTime 3.367000 and 4.000000\nTime 3.368000 and 4.000000\nTime 3.370000 and 4.000000\nTime 3.371000 and 4.000000\nTime 3.373000 and 4.000000\nTime 3.374000 and 4.000000\nTime 3.376000 and 4.000000\nTime 3.377000 and 4.000000\nTime 3.379000 and 4.000000\nTime 3.380000 and 4.000000\nTime 3.382000 and 4.000000\nTime 3.384000 and 4.000000\nTime 3.387000 and 4.000000\nTime 3.389000 and 4.000000\nTime 3.401000 and 4.000000\nTime 3.419000 and 4.000000\nTime 3.432000 and 4.000000\nTime 3.449000 and 4.000000\nTime 3.467000 and 4.000000\nTime 3.484000 and 4.000000\nTime 3.500000 and 4.000000\nTime 3.515000 and 4.000000\nTime 3.517000 and 4.000000\nTime 3.527000 and 4.000000\nTime 3.534000 and 4.000000\nTime 3.535000 and 4.000000\nTime 3.537000 and 4.000000\nTime 3.538000 and 4.000000\nTime 3.540000 and 4.000000\nTime 3.541000 and 4.000000\nTime 3.543000 and 4.000000\nTime 3.544000 and 4.000000\nTime 3.546000 and 4.000000\nTime 3.547000 and 4.000000\nTime 3.549000 and 4.000000\nTime 3.550000 and 4.000000\nTime 3.552000 and 4.000000\nTime 3.553000 and 4.000000\nTime 3.555000 and 4.000000\nTime 3.557000 and 4.000000\nTime 3.558000 and 4.000000\nTime 3.559000 and 4.000000\nTime 3.561000 and 4.000000\nTime 3.563000 and 4.000000\nTime 3.564000 and 4.000000\nTime 3.566000 and 4.000000\nTime 3.567000 and 4.000000\nTime 3.569000 and 4.000000\nTime 3.570000 and 4.000000\nTime 3.572000 and 4.000000\nTime 3.573000 and 4.000000\nTime 3.575000 and 4.000000\nTime 3.576000 and 4.000000\nTime 3.578000 and 4.000000\nTime 3.579000 and 4.000000\nTime 3.581000 and 4.000000\nTime 3.583000 and 4.000000\nTime 3.585000 and 4.000000\nTime 3.587000 and 4.000000\nTime 3.599000 and 4.000000\nTime 3.600000 and 4.000000\nTime 3.618000 and 4.000000\nTime 3.621000 and 4.000000\nTime 3.631000 and 4.000000\nTime 3.633000 and 4.000000\nTime 3.650000 and 4.000000\nTime 3.651000 and 4.000000\nTime 3.668000 and 4.000000\nTime 3.681000 and 4.000000\nTime 3.683000 and 4.000000\nTime 3.698000 and 4.000000\nTime 3.699000 and 4.000000\nTime 3.701000 and 4.000000\nTime 3.702000 and 4.000000\nTime 3.704000 and 4.000000\nTime 3.705000 and 4.000000\nTime 3.707000 and 4.000000\nTime 3.708000 and 4.000000\nTime 3.710000 and 4.000000\nTime 3.712000 and 4.000000\nTime 3.713000 and 4.000000\nTime 3.715000 and 4.000000\nTime 3.716000 and 4.000000\nTime 3.718000 and 4.000000\nTime 3.719000 and 4.000000\nTime 3.721000 and 4.000000\nTime 3.722000 and 4.000000\nTime 3.724000 and 4.000000\nTime 3.725000 and 4.000000\nTime 3.727000 and 4.000000\nTime 3.728000 and 4.000000\nTime 3.730000 and 4.000000\nTime 3.731000 and 4.000000\nTime 3.733000 and 4.000000\nTime 3.735000 and 4.000000\nTime 3.736000 and 4.000000\nTime 3.738000 and 4.000000\nTime 3.739000 and 4.000000\nTime 3.741000 and 4.000000\nTime 3.742000 and 4.000000\nTime 3.744000 and 4.000000\nTime 3.745000 and 4.000000\nTime 3.747000 and 4.000000\nTime 3.748000 and 4.000000\nTime 3.750000 and 4.000000\nTime 3.751000 and 4.000000\nTime 3.753000 and 4.000000\nTime 3.754000 and 4.000000\nTime 3.756000 and 4.000000\nTime 3.757000 and 4.000000\nTime 3.759000 and 4.000000\nTime 3.760000 and 4.000000\nTime 3.762000 and 4.000000\nTime 3.763000 and 4.000000\nTime 3.765000 and 4.000000\nTime 3.766000 and 4.000000\nTime 3.768000 and 4.000000\nTime 3.769000 and 4.000000\nTime 3.771000 and 4.000000\nTime 3.772000 and 4.000000\nTime 3.774000 and 4.000000\nTime 3.775000 and 4.000000\nTime 3.777000 and 4.000000\nTime 3.778000 and 4.000000\nTime 3.780000 and 4.000000\nTime 3.781000 and 4.000000\nTime 3.783000 and 4.000000\nTime 3.784000 and 4.000000\nTime 3.787000 and 4.000000\nTime 3.790000 and 4.000000\nTime 3.792000 and 4.000000\nTime 3.798000 and 4.000000\nTime 3.815000 and 4.000000\nTime 3.834000 and 4.000000\nTime 3.850000 and 4.000000\nTime 3.867000 and 4.000000\nTime 3.884000 and 4.000000\nTime 3.901000 and 4.000000\nTime 3.918000 and 4.000000\nTime 3.934000 and 4.000000\nTime 3.935000 and 4.000000\nTime 3.937000 and 4.000000\nTime 3.940000 and 4.000000\nTime 3.942000 and 4.000000\nTime 3.944000 and 4.000000\nTime 3.945000 and 4.000000\nTime 3.947000 and 4.000000\nTime 3.949000 and 4.000000\nTime 3.950000 and 4.000000\nTime 3.952000 and 4.000000\nTime 3.953000 and 4.000000\nTime 3.955000 and 4.000000\nTime 3.956000 and 4.000000\nTime 3.958000 and 4.000000\nTime 3.959000 and 4.000000\nTime 3.961000 and 4.000000\nTime 3.962000 and 4.000000\nTime 3.964000 and 4.000000\nTime 3.965000 and 4.000000\nTime 3.967000 and 4.000000\nTime 3.969000 and 4.000000\nTime 3.970000 and 4.000000\nTime 3.972000 and 4.000000\nTime 3.973000 and 4.000000\nTime 3.975000 and 4.000000\nTime 3.976000 and 4.000000\nTime 3.978000 and 4.000000\nTime 3.979000 and 4.000000\nTime 3.981000 and 4.000000\nTime 3.982000 and 4.000000\nTime 3.984000 and 4.000000\nTime 3.985000 and 4.000000\nTime 3.987000 and 4.000000\nTime 3.990000 and 4.000000\nTime 3.993000 and 4.000000\nTime 3.998000 and 4.000000\nTime 4.019000 and 4.000000\nSampling\nTime 4.036000 and 5.000000\nTime 4.053000 and 5.000000\nTime 4.069000 and 5.000000\nTime 4.082000 and 5.000000\nTime 4.099000 and 5.000000\nTime 4.114000 and 5.000000\nTime 4.116000 and 5.000000\nTime 4.131000 and 5.000000\nTime 4.132000 and 5.000000\nTime 4.134000 and 5.000000\nTime 4.135000 and 5.000000\nTime 4.137000 and 5.000000\nTime 4.138000 and 5.000000\nTime 4.140000 and 5.000000\nTime 4.142000 and 5.000000\nTime 4.143000 and 5.000000\nTime 4.145000 and 5.000000\nTime 4.146000 and 5.000000\nTime 4.148000 and 5.000000\nTime 4.149000 and 5.000000\nTime 4.151000 and 5.000000\nTime 4.152000 and 5.000000\nTime 4.154000 and 5.000000\nTime 4.155000 and 5.000000\nTime 4.157000 and 5.000000\nTime 4.158000 and 5.000000\nTime 4.160000 and 5.000000\nTime 4.161000 and 5.000000\nTime 4.163000 and 5.000000\nTime 4.164000 and 5.000000\nTime 4.166000 and 5.000000\nTime 4.167000 and 5.000000\nTime 4.169000 and 5.000000\nTime 4.170000 and 5.000000\nTime 4.172000 and 5.000000\nTime 4.173000 and 5.000000\nTime 4.175000 and 5.000000\nTime 4.176000 and 5.000000\nTime 4.178000 and 5.000000\nTime 4.179000 and 5.000000\nTime 4.181000 and 5.000000\nTime 4.182000 and 5.000000\nTime 4.184000 and 5.000000\nTime 4.185000 and 5.000000\nTime 4.187000 and 5.000000\nTime 4.190000 and 5.000000\nTime 4.191000 and 5.000000\nTime 4.194000 and 5.000000\nTime 4.198000 and 5.000000\nTime 4.215000 and 5.000000\nTime 4.236000 and 5.000000\nTime 4.253000 and 5.000000\nTime 4.265000 and 5.000000\nTime 4.283000 and 5.000000\nTime 4.300000 and 5.000000\nTime 4.316000 and 5.000000\nTime 4.317000 and 5.000000\nTime 4.329000 and 5.000000\nTime 4.335000 and 5.000000\nTime 4.337000 and 5.000000\nTime 4.338000 and 5.000000\nTime 4.340000 and 5.000000\nTime 4.343000 and 5.000000\nTime 4.344000 and 5.000000\nTime 4.346000 and 5.000000\nTime 4.347000 and 5.000000\nTime 4.349000 and 5.000000\nTime 4.350000 and 5.000000\nTime 4.352000 and 5.000000\nTime 4.353000 and 5.000000\nTime 4.355000 and 5.000000\nTime 4.356000 and 5.000000\nTime 4.358000 and 5.000000\nTime 4.359000 and 5.000000\nTime 4.361000 and 5.000000\nTime 4.362000 and 5.000000\nTime 4.366000 and 5.000000\nTime 4.366000 and 5.000000\nTime 4.368000 and 5.000000\nTime 4.369000 and 5.000000\nTime 4.371000 and 5.000000\nTime 4.372000 and 5.000000\nTime 4.374000 and 5.000000\nTime 4.375000 and 5.000000\nTime 4.377000 and 5.000000\nTime 4.378000 and 5.000000\nTime 4.380000 and 5.000000\nTime 4.381000 and 5.000000\nTime 4.383000 and 5.000000\nTime 4.384000 and 5.000000\nTime 4.386000 and 5.000000\nTime 4.387000 and 5.000000\nTime 4.389000 and 5.000000\nTime 4.391000 and 5.000000\nTime 4.395000 and 5.000000\nTime 4.397000 and 5.000000\nTime 4.415000 and 5.000000\nTime 4.417000 and 5.000000\nTime 4.433000 and 5.000000\nTime 4.435000 and 5.000000\nTime 4.452000 and 5.000000\nTime 4.453000 and 5.000000\nTime 4.465000 and 5.000000\nTime 4.466000 and 5.000000\nTime 4.483000 and 5.000000\nTime 4.485000 and 5.000000\nTime 4.497000 and 5.000000\nTime 4.499000 and 5.000000\nTime 4.516000 and 5.000000\nTime 4.517000 and 5.000000\nTime 4.518000 and 5.000000\nTime 4.520000 and 5.000000\nTime 4.521000 and 5.000000\nTime 4.523000 and 5.000000\nTime 4.524000 and 5.000000\nTime 4.526000 and 5.000000\nTime 4.527000 and 5.000000\nTime 4.529000 and 5.000000\nTime 4.530000 and 5.000000\nTime 4.532000 and 5.000000\nTime 4.533000 and 5.000000\nTime 4.535000 and 5.000000\nTime 4.536000 and 5.000000\nTime 4.538000 and 5.000000\nTime 4.539000 and 5.000000\nTime 4.541000 and 5.000000\nTime 4.542000 and 5.000000\nTime 4.544000 and 5.000000\nTime 4.545000 and 5.000000\nTime 4.547000 and 5.000000\nTime 4.548000 and 5.000000\nTime 4.550000 and 5.000000\nTime 4.551000 and 5.000000\nTime 4.553000 and 5.000000\nTime 4.554000 and 5.000000\nTime 4.556000 and 5.000000\nTime 4.557000 and 5.000000\nTime 4.559000 and 5.000000\nTime 4.560000 and 5.000000\nTime 4.562000 and 5.000000\nTime 4.563000 and 5.000000\nTime 4.565000 and 5.000000\nTime 4.566000 and 5.000000\nTime 4.568000 and 5.000000\nTime 4.569000 and 5.000000\nTime 4.571000 and 5.000000\nTime 4.572000 and 5.000000\nTime 4.574000 and 5.000000\nTime 4.575000 and 5.000000\nTime 4.577000 and 5.000000\nTime 4.578000 and 5.000000\nTime 4.580000 and 5.000000\nTime 4.581000 and 5.000000\nTime 4.583000 and 5.000000\nTime 4.584000 and 5.000000\nTime 4.586000 and 5.000000\nTime 4.587000 and 5.000000\nTime 4.589000 and 5.000000\nTime 4.592000 and 5.000000\nTime 4.594000 and 5.000000\nTime 4.598000 and 5.000000\nTime 4.614000 and 5.000000\nTime 4.631000 and 5.000000\nTime 4.633000 and 5.000000\nTime 4.650000 and 5.000000\nTime 4.652000 and 5.000000\nTime 4.668000 and 5.000000\nTime 4.672000 and 5.000000\nTime 4.681000 and 5.000000\nTime 4.684000 and 5.000000\nTime 4.701000 and 5.000000\nTime 4.719000 and 5.000000\nTime 4.721000 and 5.000000\nTime 4.736000 and 5.000000\nTime 4.736000 and 5.000000\nTime 4.737000 and 5.000000\nTime 4.739000 and 5.000000\nTime 4.740000 and 5.000000\nTime 4.742000 and 5.000000\nTime 4.744000 and 5.000000\nTime 4.746000 and 5.000000\nTime 4.747000 and 5.000000\nTime 4.749000 and 5.000000\nTime 4.750000 and 5.000000\nTime 4.752000 and 5.000000\nTime 4.753000 and 5.000000\nTime 4.755000 and 5.000000\nTime 4.756000 and 5.000000\nTime 4.758000 and 5.000000\nTime 4.759000 and 5.000000\nTime 4.761000 and 5.000000\nTime 4.762000 and 5.000000\nTime 4.764000 and 5.000000\nTime 4.765000 and 5.000000\nTime 4.767000 and 5.000000\nTime 4.768000 and 5.000000\nTime 4.770000 and 5.000000\nTime 4.771000 and 5.000000\nTime 4.773000 and 5.000000\nTime 4.774000 and 5.000000\nTime 4.776000 and 5.000000\nTime 4.777000 and 5.000000\nTime 4.780000 and 5.000000\nTime 4.781000 and 5.000000\nTime 4.783000 and 5.000000\nTime 4.784000 and 5.000000\nTime 4.786000 and 5.000000\nTime 4.788000 and 5.000000\nTime 4.789000 and 5.000000\nTime 4.791000 and 5.000000\nTime 4.794000 and 5.000000\nTime 4.796000 and 5.000000\nTime 4.798000 and 5.000000\nTime 4.816000 and 5.000000\nTime 4.832000 and 5.000000\nTime 4.834000 and 5.000000\nTime 4.850000 and 5.000000\nTime 4.852000 and 5.000000\nTime 4.869000 and 5.000000\nTime 4.882000 and 5.000000\nTime 4.899000 and 5.000000\nTime 4.920000 and 5.000000\nTime 4.921000 and 5.000000\nTime 4.928000 and 5.000000\nTime 4.934000 and 5.000000\nTime 4.935000 and 5.000000\nTime 4.937000 and 5.000000\nTime 4.939000 and 5.000000\nTime 4.940000 and 5.000000\nTime 4.942000 and 5.000000\nTime 4.943000 and 5.000000\nTime 4.945000 and 5.000000\nTime 4.946000 and 5.000000\nTime 4.948000 and 5.000000\nTime 4.950000 and 5.000000\nTime 4.951000 and 5.000000\nTime 4.953000 and 5.000000\nTime 4.955000 and 5.000000\nTime 4.956000 and 5.000000\nTime 4.958000 and 5.000000\nTime 4.959000 and 5.000000\nTime 4.961000 and 5.000000\nTime 4.962000 and 5.000000\nTime 4.964000 and 5.000000\nTime 4.965000 and 5.000000\nTime 4.967000 and 5.000000\nTime 4.968000 and 5.000000\nTime 4.971000 and 5.000000\nTime 4.972000 and 5.000000\nTime 4.974000 and 5.000000\nTime 4.975000 and 5.000000\nTime 4.977000 and 5.000000\nTime 4.978000 and 5.000000\nTime 4.980000 and 5.000000\nTime 4.981000 and 5.000000\nTime 4.983000 and 5.000000\nTime 4.984000 and 5.000000\nTime 4.986000 and 5.000000\nTime 4.987000 and 5.000000\nTime 4.989000 and 5.000000\nTime 4.990000 and 5.000000\nTime 4.992000 and 5.000000\nTime 4.993000 and 5.000000\nTime 4.995000 and 5.000000\nTime 4.997000 and 5.000000\nTime 4.999000 and 5.000000\nTime 5.002000 and 5.000000\nSampling\nTime 5.005000 and 6.000000\nTime 5.035000 and 6.000000\nTime 5.054000 and 6.000000\nTime 5.066000 and 6.000000\nTime 5.083000 and 6.000000\nTime 5.101000 and 6.000000\nTime 5.116000 and 6.000000\nTime 5.118000 and 6.000000\nTime 5.129000 and 6.000000\nTime 5.131000 and 6.000000\nTime 5.133000 and 6.000000\nTime 5.134000 and 6.000000\nTime 5.136000 and 6.000000\nTime 5.137000 and 6.000000\nTime 5.139000 and 6.000000\nTime 5.140000 and 6.000000\nTime 5.142000 and 6.000000\nTime 5.143000 and 6.000000\nTime 5.145000 and 6.000000\nTime 5.146000 and 6.000000\nTime 5.148000 and 6.000000\nTime 5.149000 and 6.000000\nTime 5.151000 and 6.000000\nTime 5.153000 and 6.000000\nTime 5.154000 and 6.000000\nTime 5.155000 and 6.000000\nTime 5.157000 and 6.000000\nTime 5.158000 and 6.000000\nTime 5.160000 and 6.000000\nTime 5.161000 and 6.000000\nTime 5.163000 and 6.000000\nTime 5.164000 and 6.000000\nTime 5.166000 and 6.000000\nTime 5.167000 and 6.000000\nTime 5.169000 and 6.000000\nTime 5.170000 and 6.000000\nTime 5.172000 and 6.000000\nTime 5.173000 and 6.000000\nTime 5.175000 and 6.000000\nTime 5.176000 and 6.000000\nTime 5.178000 and 6.000000\nTime 5.179000 and 6.000000\nTime 5.181000 and 6.000000\nTime 5.183000 and 6.000000\nTime 5.185000 and 6.000000\nTime 5.186000 and 6.000000\nTime 5.188000 and 6.000000\nTime 5.189000 and 6.000000\nTime 5.191000 and 6.000000\nTime 5.192000 and 6.000000\nTime 5.194000 and 6.000000\nTime 5.195000 and 6.000000\nTime 5.197000 and 6.000000\nTime 5.199000 and 6.000000\nTime 5.200000 and 6.000000\nTime 5.204000 and 6.000000\nTime 5.207000 and 6.000000\nTime 5.234000 and 6.000000\nTime 5.251000 and 6.000000\nTime 5.267000 and 6.000000\nTime 5.284000 and 6.000000\nTime 5.300000 and 6.000000\nTime 5.318000 and 6.000000\nTime 5.333000 and 6.000000\nTime 5.335000 and 6.000000\nTime 5.345000 and 6.000000\nTime 5.347000 and 6.000000\nTime 5.348000 and 6.000000\nTime 5.350000 and 6.000000\nTime 5.365000 and 6.000000\nTime 5.366000 and 6.000000\nTime 5.383000 and 6.000000\nTime 5.385000 and 6.000000\nTime 5.401000 and 6.000000\nTime 5.402000 and 6.000000\nTime 5.404000 and 6.000000\nTime 5.407000 and 6.000000\nTime 5.416000 and 6.000000\nTime 5.435000 and 6.000000\nTime 5.451000 and 6.000000\nTime 5.470000 and 6.000000\nTime 5.486000 and 6.000000\nTime 5.504000 and 6.000000\nTime 5.515000 and 6.000000\nTime 5.516000 and 6.000000\nTime 5.528000 and 6.000000\nTime 5.534000 and 6.000000\nTime 5.536000 and 6.000000\nTime 5.537000 and 6.000000\nTime 5.539000 and 6.000000\nTime 5.540000 and 6.000000\nTime 5.542000 and 6.000000\nTime 5.544000 and 6.000000\nTime 5.546000 and 6.000000\nTime 5.547000 and 6.000000\nTime 5.549000 and 6.000000\nTime 5.550000 and 6.000000\nTime 5.552000 and 6.000000\nTime 5.553000 and 6.000000\nTime 5.556000 and 6.000000\nTime 5.557000 and 6.000000\nTime 5.559000 and 6.000000\nTime 5.560000 and 6.000000\nTime 5.562000 and 6.000000\nTime 5.563000 and 6.000000\nTime 5.565000 and 6.000000\nTime 5.567000 and 6.000000\nTime 5.568000 and 6.000000\nTime 5.570000 and 6.000000\nTime 5.571000 and 6.000000\nTime 5.573000 and 6.000000\nTime 5.575000 and 6.000000\nTime 5.576000 and 6.000000\nTime 5.578000 and 6.000000\nTime 5.580000 and 6.000000\nTime 5.581000 and 6.000000\nTime 5.583000 and 6.000000\nTime 5.584000 and 6.000000\nTime 5.586000 and 6.000000\nTime 5.587000 and 6.000000\nTime 5.589000 and 6.000000\nTime 5.591000 and 6.000000\nTime 5.592000 and 6.000000\nTime 5.593000 and 6.000000\nTime 5.595000 and 6.000000\nTime 5.596000 and 6.000000\nTime 5.598000 and 6.000000\nTime 5.600000 and 6.000000\nTime 5.601000 and 6.000000\nTime 5.603000 and 6.000000\nTime 5.604000 and 6.000000\nTime 5.606000 and 6.000000\nTime 5.608000 and 6.000000\nTime 5.611000 and 6.000000\nTime 5.613000 and 6.000000\nTime 5.635000 and 6.000000\nTime 5.651000 and 6.000000\nTime 5.668000 and 6.000000\nTime 5.684000 and 6.000000\nTime 5.701000 and 6.000000\nTime 5.716000 and 6.000000\nTime 5.718000 and 6.000000\nTime 5.730000 and 6.000000\nTime 5.731000 and 6.000000\nTime 5.733000 and 6.000000\nTime 5.735000 and 6.000000\nTime 5.737000 and 6.000000\nTime 5.738000 and 6.000000\nTime 5.740000 and 6.000000\nTime 5.741000 and 6.000000\nTime 5.743000 and 6.000000\nTime 5.744000 and 6.000000\nTime 5.746000 and 6.000000\nTime 5.747000 and 6.000000\nTime 5.749000 and 6.000000\nTime 5.750000 and 6.000000\nTime 5.752000 and 6.000000\nTime 5.753000 and 6.000000\nTime 5.755000 and 6.000000\nTime 5.756000 and 6.000000\nTime 5.758000 and 6.000000\nTime 5.759000 and 6.000000\nTime 5.761000 and 6.000000\nTime 5.762000 and 6.000000\nTime 5.764000 and 6.000000\nTime 5.765000 and 6.000000\nTime 5.767000 and 6.000000\nTime 5.768000 and 6.000000\nTime 5.770000 and 6.000000\nTime 5.771000 and 6.000000\nTime 5.773000 and 6.000000\nTime 5.774000 and 6.000000\nTime 5.776000 and 6.000000\nTime 5.778000 and 6.000000\nTime 5.779000 and 6.000000\nTime 5.781000 and 6.000000\nTime 5.782000 and 6.000000\nTime 5.784000 and 6.000000\nTime 5.785000 and 6.000000\nTime 5.787000 and 6.000000\nTime 5.788000 and 6.000000\nTime 5.790000 and 6.000000\nTime 5.792000 and 6.000000\nTime 5.793000 and 6.000000\nTime 5.795000 and 6.000000\nTime 5.796000 and 6.000000\nTime 5.798000 and 6.000000\nTime 5.800000 and 6.000000\nTime 5.801000 and 6.000000\nTime 5.803000 and 6.000000\nTime 5.805000 and 6.000000\nTime 5.806000 and 6.000000\nTime 5.808000 and 6.000000\nTime 5.809000 and 6.000000\nTime 5.811000 and 6.000000\nTime 5.813000 and 6.000000\nTime 5.816000 and 6.000000\nTime 5.818000 and 6.000000\nTime 5.835000 and 6.000000\nTime 5.836000 and 6.000000\nTime 5.850000 and 6.000000\nTime 5.866000 and 6.000000\nTime 5.887000 and 6.000000\nTime 5.903000 and 6.000000\nTime 5.920000 and 6.000000\nTime 5.937000 and 6.000000\nTime 5.953000 and 6.000000\nTime 5.966000 and 6.000000\nTime 5.983000 and 6.000000\nTime 5.999000 and 6.000000\nTime 6.015000 and 6.000000\nSampling\nTime 6.032000 and 7.000000\nTime 6.033000 and 7.000000\nTime 6.051000 and 7.000000\nTime 6.053000 and 7.000000\nTime 6.065000 and 7.000000\nTime 6.067000 and 7.000000\nTime 6.083000 and 7.000000\nTime 6.085000 and 7.000000\nTime 6.102000 and 7.000000\nTime 6.103000 and 7.000000\nTime 6.117000 and 7.000000\nTime 6.118000 and 7.000000\nTime 6.135000 and 7.000000\nTime 6.136000 and 7.000000\nTime 6.147000 and 7.000000\nTime 6.148000 and 7.000000\nTime 6.150000 and 7.000000\nTime 6.151000 and 7.000000\nTime 6.153000 and 7.000000\nTime 6.154000 and 7.000000\nTime 6.156000 and 7.000000\nTime 6.157000 and 7.000000\nTime 6.159000 and 7.000000\nTime 6.160000 and 7.000000\nTime 6.162000 and 7.000000\nTime 6.163000 and 7.000000\nTime 6.165000 and 7.000000\nTime 6.166000 and 7.000000\nTime 6.168000 and 7.000000\nTime 6.169000 and 7.000000\nTime 6.171000 and 7.000000\nTime 6.172000 and 7.000000\nTime 6.174000 and 7.000000\nTime 6.175000 and 7.000000\nTime 6.177000 and 7.000000\nTime 6.178000 and 7.000000\nTime 6.180000 and 7.000000\nTime 6.181000 and 7.000000\nTime 6.183000 and 7.000000\nTime 6.184000 and 7.000000\nTime 6.186000 and 7.000000\nTime 6.187000 and 7.000000\nTime 6.189000 and 7.000000\nTime 6.190000 and 7.000000\nTime 6.192000 and 7.000000\nTime 6.193000 and 7.000000\nTime 6.195000 and 7.000000\nTime 6.196000 and 7.000000\nTime 6.198000 and 7.000000\nTime 6.199000 and 7.000000\nTime 6.201000 and 7.000000\nTime 6.202000 and 7.000000\nTime 6.204000 and 7.000000\nTime 6.205000 and 7.000000\nTime 6.206000 and 7.000000\nTime 6.208000 and 7.000000\nTime 6.209000 and 7.000000\nTime 6.211000 and 7.000000\nTime 6.213000 and 7.000000\nTime 6.214000 and 7.000000\nTime 6.216000 and 7.000000\nTime 6.217000 and 7.000000\nTime 6.219000 and 7.000000\nTime 6.221000 and 7.000000\nTime 6.223000 and 7.000000\nTime 6.226000 and 7.000000\nTime 6.229000 and 7.000000\nTime 6.251000 and 7.000000\nTime 6.271000 and 7.000000\nTime 6.283000 and 7.000000\nTime 6.299000 and 7.000000\nTime 6.320000 and 7.000000\nTime 6.337000 and 7.000000\nTime 6.354000 and 7.000000\nTime 6.366000 and 7.000000\nTime 6.383000 and 7.000000\nTime 6.401000 and 7.000000\nTime 6.416000 and 7.000000\nTime 6.438000 and 7.000000\nTime 6.457000 and 7.000000\nTime 6.469000 and 7.000000\nTime 6.487000 and 7.000000\nTime 6.501000 and 7.000000\nTime 6.516000 and 7.000000\nTime 6.533000 and 7.000000\nTime 6.548000 and 7.000000\nTime 6.550000 and 7.000000\nTime 6.560000 and 7.000000\nTime 6.567000 and 7.000000\nTime 6.568000 and 7.000000\nTime 6.570000 and 7.000000\nTime 6.571000 and 7.000000\nTime 6.573000 and 7.000000\nTime 6.574000 and 7.000000\nTime 6.576000 and 7.000000\nTime 6.577000 and 7.000000\nTime 6.579000 and 7.000000\nTime 6.580000 and 7.000000\nTime 6.582000 and 7.000000\nTime 6.583000 and 7.000000\nTime 6.585000 and 7.000000\nTime 6.586000 and 7.000000\nTime 6.588000 and 7.000000\nTime 6.589000 and 7.000000\nTime 6.591000 and 7.000000\nTime 6.593000 and 7.000000\nTime 6.594000 and 7.000000\nTime 6.595000 and 7.000000\nTime 6.597000 and 7.000000\nTime 6.599000 and 7.000000\nTime 6.600000 and 7.000000\nTime 6.602000 and 7.000000\nTime 6.603000 and 7.000000\nTime 6.605000 and 7.000000\nTime 6.606000 and 7.000000\nTime 6.608000 and 7.000000\nTime 6.609000 and 7.000000\nTime 6.611000 and 7.000000\nTime 6.612000 and 7.000000\nTime 6.614000 and 7.000000\nTime 6.615000 and 7.000000\nTime 6.617000 and 7.000000\nTime 6.618000 and 7.000000\nTime 6.621000 and 7.000000\nTime 6.622000 and 7.000000\nTime 6.624000 and 7.000000\nTime 6.625000 and 7.000000\nTime 6.627000 and 7.000000\nTime 6.628000 and 7.000000\nTime 6.630000 and 7.000000\nTime 6.631000 and 7.000000\nTime 6.633000 and 7.000000\nTime 6.634000 and 7.000000\nTime 6.638000 and 7.000000\nTime 6.639000 and 7.000000\nTime 6.640000 and 7.000000\nTime 6.643000 and 7.000000\nTime 6.647000 and 7.000000\nTime 6.650000 and 7.000000\nTime 6.668000 and 7.000000\nTime 6.685000 and 7.000000\nTime 6.704000 and 7.000000\nTime 6.717000 and 7.000000\nTime 6.734000 and 7.000000\nTime 6.752000 and 7.000000\nTime 6.767000 and 7.000000\nTime 6.782000 and 7.000000\nTime 6.784000 and 7.000000\nTime 6.785000 and 7.000000\nTime 6.787000 and 7.000000\nTime 6.788000 and 7.000000\nTime 6.790000 and 7.000000\nTime 6.791000 and 7.000000\nTime 6.793000 and 7.000000\nTime 6.794000 and 7.000000\nTime 6.796000 and 7.000000\nTime 6.797000 and 7.000000\nTime 6.799000 and 7.000000\nTime 6.801000 and 7.000000\nTime 6.802000 and 7.000000\nTime 6.804000 and 7.000000\nTime 6.805000 and 7.000000\nTime 6.807000 and 7.000000\nTime 6.809000 and 7.000000\nTime 6.810000 and 7.000000\nTime 6.812000 and 7.000000\nTime 6.813000 and 7.000000\nTime 6.815000 and 7.000000\nTime 6.816000 and 7.000000\nTime 6.818000 and 7.000000\nTime 6.819000 and 7.000000\nTime 6.822000 and 7.000000\nTime 6.822000 and 7.000000\nTime 6.824000 and 7.000000\nTime 6.825000 and 7.000000\nTime 6.827000 and 7.000000\nTime 6.828000 and 7.000000\nTime 6.830000 and 7.000000\nTime 6.831000 and 7.000000\nTime 6.833000 and 7.000000\nTime 6.835000 and 7.000000\nTime 6.836000 and 7.000000\nTime 6.838000 and 7.000000\nTime 6.839000 and 7.000000\nTime 6.841000 and 7.000000\nTime 6.842000 and 7.000000\nTime 6.844000 and 7.000000\nTime 6.847000 and 7.000000\nTime 6.850000 and 7.000000\nTime 6.866000 and 7.000000\nTime 6.882000 and 7.000000\nTime 6.900000 and 7.000000\nTime 6.917000 and 7.000000\nTime 6.937000 and 7.000000\nTime 6.950000 and 7.000000\nTime 6.965000 and 7.000000\nTime 6.967000 and 7.000000\nTime 6.977000 and 7.000000\nTime 6.984000 and 7.000000\nTime 6.986000 and 7.000000\nTime 6.987000 and 7.000000\nTime 6.989000 and 7.000000\nTime 6.990000 and 7.000000\nTime 6.992000 and 7.000000\nTime 6.993000 and 7.000000\nTime 6.995000 and 7.000000\nTime 6.996000 and 7.000000\nTime 6.998000 and 7.000000\nTime 6.999000 and 7.000000\nTime 7.001000 and 7.000000\nSampling\nTime 7.002000 and 8.000000\nTime 7.006000 and 8.000000\nTime 7.006000 and 8.000000\nTime 7.008000 and 8.000000\nTime 7.009000 and 8.000000\nTime 7.011000 and 8.000000\nTime 7.012000 and 8.000000\nTime 7.014000 and 8.000000\nTime 7.015000 and 8.000000\nTime 7.017000 and 8.000000\nTime 7.018000 and 8.000000\nTime 7.020000 and 8.000000\nTime 7.021000 and 8.000000\nTime 7.023000 and 8.000000\nTime 7.024000 and 8.000000\nTime 7.026000 and 8.000000\nTime 7.027000 and 8.000000\nTime 7.029000 and 8.000000\nTime 7.030000 and 8.000000\nTime 7.032000 and 8.000000\nTime 7.033000 and 8.000000\nTime 7.035000 and 8.000000\nTime 7.036000 and 8.000000\nTime 7.038000 and 8.000000\nTime 7.039000 and 8.000000\nTime 7.041000 and 8.000000\nTime 7.042000 and 8.000000\nTime 7.044000 and 8.000000\nTime 7.045000 and 8.000000\nTime 7.047000 and 8.000000\nTime 7.049000 and 8.000000\nTime 7.053000 and 8.000000\nTime 7.057000 and 8.000000\nTime 7.085000 and 8.000000\nTime 7.105000 and 8.000000\nTime 7.121000 and 8.000000\nTime 7.137000 and 8.000000\nTime 7.154000 and 8.000000\nTime 7.168000 and 8.000000\nTime 7.170000 and 8.000000\nTime 7.182000 and 8.000000\nTime 7.182000 and 8.000000\nTime 7.184000 and 8.000000\nTime 7.185000 and 8.000000\nTime 7.187000 and 8.000000\nTime 7.188000 and 8.000000\nTime 7.190000 and 8.000000\nTime 7.191000 and 8.000000\nTime 7.193000 and 8.000000\nTime 7.194000 and 8.000000\nTime 7.196000 and 8.000000\nTime 7.197000 and 8.000000\nTime 7.199000 and 8.000000\nTime 7.200000 and 8.000000\nTime 7.202000 and 8.000000\nTime 7.203000 and 8.000000\nTime 7.205000 and 8.000000\nTime 7.206000 and 8.000000\nTime 7.208000 and 8.000000\nTime 7.209000 and 8.000000\nTime 7.211000 and 8.000000\nTime 7.212000 and 8.000000\nTime 7.214000 and 8.000000\nTime 7.215000 and 8.000000\nTime 7.217000 and 8.000000\nTime 7.218000 and 8.000000\nTime 7.220000 and 8.000000\nTime 7.221000 and 8.000000\nTime 7.223000 and 8.000000\nTime 7.224000 and 8.000000\nTime 7.226000 and 8.000000\nTime 7.227000 and 8.000000\nTime 7.229000 and 8.000000\nTime 7.231000 and 8.000000\nTime 7.232000 and 8.000000\nTime 7.234000 and 8.000000\nTime 7.235000 and 8.000000\nTime 7.237000 and 8.000000\nTime 7.238000 and 8.000000\nTime 7.240000 and 8.000000\nTime 7.241000 and 8.000000\nTime 7.243000 and 8.000000\nTime 7.244000 and 8.000000\nTime 7.246000 and 8.000000\nTime 7.247000 and 8.000000\nTime 7.250000 and 8.000000\nTime 7.254000 and 8.000000\nTime 7.257000 and 8.000000\nTime 7.285000 and 8.000000\nTime 7.303000 and 8.000000\nTime 7.321000 and 8.000000\nTime 7.334000 and 8.000000\nTime 7.355000 and 8.000000\nTime 7.368000 and 8.000000\nTime 7.370000 and 8.000000\nTime 7.381000 and 8.000000\nTime 7.383000 and 8.000000\nTime 7.384000 and 8.000000\nTime 7.386000 and 8.000000\nTime 7.387000 and 8.000000\nTime 7.389000 and 8.000000\nTime 7.390000 and 8.000000\nTime 7.392000 and 8.000000\nTime 7.393000 and 8.000000\nTime 7.395000 and 8.000000\nTime 7.396000 and 8.000000\nTime 7.398000 and 8.000000\nTime 7.399000 and 8.000000\nTime 7.401000 and 8.000000\nTime 7.402000 and 8.000000\nTime 7.404000 and 8.000000\nTime 7.405000 and 8.000000\nTime 7.407000 and 8.000000\nTime 7.408000 and 8.000000\nTime 7.410000 and 8.000000\nTime 7.411000 and 8.000000\nTime 7.413000 and 8.000000\nTime 7.414000 and 8.000000\nTime 7.416000 and 8.000000\nTime 7.417000 and 8.000000\nTime 7.419000 and 8.000000\nTime 7.421000 and 8.000000\nTime 7.422000 and 8.000000\nTime 7.423000 and 8.000000\nTime 7.425000 and 8.000000\nTime 7.427000 and 8.000000\nTime 7.428000 and 8.000000\nTime 7.430000 and 8.000000\nTime 7.431000 and 8.000000\nTime 7.433000 and 8.000000\nTime 7.434000 and 8.000000\nTime 7.436000 and 8.000000\nTime 7.437000 and 8.000000\nTime 7.439000 and 8.000000\nTime 7.440000 and 8.000000\nTime 7.442000 and 8.000000\nTime 7.443000 and 8.000000\nTime 7.445000 and 8.000000\nTime 7.446000 and 8.000000\nTime 7.448000 and 8.000000\nTime 7.450000 and 8.000000\nTime 7.454000 and 8.000000\nTime 7.458000 and 8.000000\nTime 7.485000 and 8.000000\nTime 7.501000 and 8.000000\nTime 7.519000 and 8.000000\nTime 7.537000 and 8.000000\nTime 7.553000 and 8.000000\nTime 7.568000 and 8.000000\nTime 7.569000 and 8.000000\nTime 7.580000 and 8.000000\nTime 7.581000 and 8.000000\nTime 7.583000 and 8.000000\nTime 7.585000 and 8.000000\nTime 7.586000 and 8.000000\nTime 7.588000 and 8.000000\nTime 7.589000 and 8.000000\nTime 7.591000 and 8.000000\nTime 7.592000 and 8.000000\nTime 7.594000 and 8.000000\nTime 7.595000 and 8.000000\nTime 7.597000 and 8.000000\nTime 7.598000 and 8.000000\nTime 7.600000 and 8.000000\nTime 7.601000 and 8.000000\nTime 7.603000 and 8.000000\nTime 7.605000 and 8.000000\nTime 7.606000 and 8.000000\nTime 7.608000 and 8.000000\nTime 7.609000 and 8.000000\nTime 7.611000 and 8.000000\nTime 7.612000 and 8.000000\nTime 7.613000 and 8.000000\nTime 7.615000 and 8.000000\nTime 7.616000 and 8.000000\nTime 7.618000 and 8.000000\nTime 7.619000 and 8.000000\nTime 7.621000 and 8.000000\nTime 7.622000 and 8.000000\nTime 7.624000 and 8.000000\nTime 7.625000 and 8.000000\nTime 7.627000 and 8.000000\nTime 7.628000 and 8.000000\nTime 7.630000 and 8.000000\nTime 7.631000 and 8.000000\nTime 7.633000 and 8.000000\nTime 7.634000 and 8.000000\nTime 7.636000 and 8.000000\nTime 7.637000 and 8.000000\nTime 7.639000 and 8.000000\nTime 7.640000 and 8.000000\nTime 7.642000 and 8.000000\nTime 7.645000 and 8.000000\nTime 7.646000 and 8.000000\nTime 7.648000 and 8.000000\nTime 7.649000 and 8.000000\nTime 7.651000 and 8.000000\nTime 7.653000 and 8.000000\nTime 7.657000 and 8.000000\nTime 7.661000 and 8.000000\nTime 7.684000 and 8.000000\nTime 7.701000 and 8.000000\nTime 7.719000 and 8.000000\nTime 7.736000 and 8.000000\nTime 7.754000 and 8.000000\nTime 7.767000 and 8.000000\nTime 7.784000 and 8.000000\nTime 7.803000 and 8.000000\nTime 7.820000 and 8.000000\nTime 7.837000 and 8.000000\nTime 7.849000 and 8.000000\nTime 7.867000 and 8.000000\nTime 7.869000 and 8.000000\nTime 7.883000 and 8.000000\nTime 7.886000 and 8.000000\nTime 7.903000 and 8.000000\nTime 7.921000 and 8.000000\nTime 7.938000 and 8.000000\nTime 7.950000 and 8.000000\nTime 7.968000 and 8.000000\nTime 7.983000 and 8.000000\nTime 7.999000 and 8.000000\nTime 8.001000 and 8.000000\nSampling\nTime 8.002000 and 9.000000\nTime 8.004000 and 9.000000\nTime 8.006000 and 9.000000\nTime 8.007000 and 9.000000\nTime 8.009000 and 9.000000\nTime 8.010000 and 9.000000\nTime 8.012000 and 9.000000\nTime 8.013000 and 9.000000\nTime 8.015000 and 9.000000\nTime 8.017000 and 9.000000\nTime 8.018000 and 9.000000\nTime 8.020000 and 9.000000\nTime 8.021000 and 9.000000\nTime 8.023000 and 9.000000\nTime 8.024000 and 9.000000\nTime 8.027000 and 9.000000\nTime 8.028000 and 9.000000\nTime 8.029000 and 9.000000\nTime 8.032000 and 9.000000\nTime 8.033000 and 9.000000\nTime 8.035000 and 9.000000\nTime 8.036000 and 9.000000\nTime 8.038000 and 9.000000\nTime 8.039000 and 9.000000\nTime 8.041000 and 9.000000\nTime 8.042000 and 9.000000\nTime 8.044000 and 9.000000\nTime 8.045000 and 9.000000\nTime 8.047000 and 9.000000\nTime 8.048000 and 9.000000\nTime 8.050000 and 9.000000\nTime 8.052000 and 9.000000\nTime 8.053000 and 9.000000\nTime 8.055000 and 9.000000\nTime 8.056000 and 9.000000\nTime 8.058000 and 9.000000\nTime 8.059000 and 9.000000\nTime 8.061000 and 9.000000\nTime 8.063000 and 9.000000\nTime 8.065000 and 9.000000\nTime 8.066000 and 9.000000\nTime 8.068000 and 9.000000\nTime 8.070000 and 9.000000\nTime 8.071000 and 9.000000\nTime 8.075000 and 9.000000\nTime 8.082000 and 9.000000\nTime 8.102000 and 9.000000\nTime 8.120000 and 9.000000\nTime 8.137000 and 9.000000\nTime 8.152000 and 9.000000\nTime 8.174000 and 9.000000\nTime 8.187000 and 9.000000\nTime 8.199000 and 9.000000\nTime 8.200000 and 9.000000\nTime 8.206000 and 9.000000\nTime 8.208000 and 9.000000\nTime 8.214000 and 9.000000\nTime 8.216000 and 9.000000\nTime 8.217000 and 9.000000\nTime 8.220000 and 9.000000\nTime 8.221000 and 9.000000\nTime 8.223000 and 9.000000\nTime 8.224000 and 9.000000\nTime 8.226000 and 9.000000\nTime 8.227000 and 9.000000\nTime 8.229000 and 9.000000\nTime 8.231000 and 9.000000\nTime 8.232000 and 9.000000\nTime 8.234000 and 9.000000\nTime 8.236000 and 9.000000\nTime 8.237000 and 9.000000\nTime 8.239000 and 9.000000\nTime 8.240000 and 9.000000\nTime 8.242000 and 9.000000\nTime 8.244000 and 9.000000\nTime 8.245000 and 9.000000\nTime 8.247000 and 9.000000\nTime 8.248000 and 9.000000\nTime 8.250000 and 9.000000\nTime 8.251000 and 9.000000\nTime 8.253000 and 9.000000\nTime 8.255000 and 9.000000\nTime 8.256000 and 9.000000\nTime 8.258000 and 9.000000\nTime 8.259000 and 9.000000\nTime 8.261000 and 9.000000\nTime 8.262000 and 9.000000\nTime 8.264000 and 9.000000\nTime 8.266000 and 9.000000\nTime 8.267000 and 9.000000\nTime 8.269000 and 9.000000\nTime 8.270000 and 9.000000\nTime 8.272000 and 9.000000\nTime 8.273000 and 9.000000\nTime 8.275000 and 9.000000\nTime 8.276000 and 9.000000\nTime 8.280000 and 9.000000\nTime 8.283000 and 9.000000\nTime 8.303000 and 9.000000\nTime 8.320000 and 9.000000\nTime 8.337000 and 9.000000\nTime 8.352000 and 9.000000\nTime 8.371000 and 9.000000\nTime 8.386000 and 9.000000\nTime 8.399000 and 9.000000\nTime 8.400000 and 9.000000\nTime 8.406000 and 9.000000\nTime 8.408000 and 9.000000\nTime 8.414000 and 9.000000\nTime 8.416000 and 9.000000\nTime 8.417000 and 9.000000\nTime 8.419000 and 9.000000\nTime 8.420000 and 9.000000\nTime 8.422000 and 9.000000\nTime 8.424000 and 9.000000\nTime 8.426000 and 9.000000\nTime 8.427000 and 9.000000\nTime 8.429000 and 9.000000\nTime 8.430000 and 9.000000\nTime 8.432000 and 9.000000\nTime 8.434000 and 9.000000\nTime 8.436000 and 9.000000\nTime 8.438000 and 9.000000\nTime 8.439000 and 9.000000\nTime 8.441000 and 9.000000\nTime 8.442000 and 9.000000\nTime 8.444000 and 9.000000\nTime 8.446000 and 9.000000\nTime 8.447000 and 9.000000\nTime 8.449000 and 9.000000\nTime 8.451000 and 9.000000\nTime 8.452000 and 9.000000\nTime 8.454000 and 9.000000\nTime 8.456000 and 9.000000\nTime 8.457000 and 9.000000\nTime 8.458000 and 9.000000\nTime 8.460000 and 9.000000\nTime 8.461000 and 9.000000\nTime 8.463000 and 9.000000\nTime 8.464000 and 9.000000\nTime 8.466000 and 9.000000\nTime 8.467000 and 9.000000\nTime 8.469000 and 9.000000\nTime 8.471000 and 9.000000\nTime 8.472000 and 9.000000\nTime 8.474000 and 9.000000\nTime 8.475000 and 9.000000\nTime 8.477000 and 9.000000\nTime 8.480000 and 9.000000\nTime 8.483000 and 9.000000\nTime 8.499000 and 9.000000\nTime 8.521000 and 9.000000\nTime 8.537000 and 9.000000\nTime 8.554000 and 9.000000\nTime 8.569000 and 9.000000\nTime 8.586000 and 9.000000\nTime 8.603000 and 9.000000\nTime 8.620000 and 9.000000\nTime 8.637000 and 9.000000\nTime 8.653000 and 9.000000\nTime 8.670000 and 9.000000\nTime 8.688000 and 9.000000\nTime 8.703000 and 9.000000\nTime 8.720000 and 9.000000\nTime 8.737000 and 9.000000\nTime 8.753000 and 9.000000\nTime 8.770000 and 9.000000\nTime 8.786000 and 9.000000\nTime 8.804000 and 9.000000\nTime 8.820000 and 9.000000\nTime 8.836000 and 9.000000\nTime 8.853000 and 9.000000\nTime 8.871000 and 9.000000\nTime 8.887000 and 9.000000\nTime 8.905000 and 9.000000\nTime 8.920000 and 9.000000\nTime 8.933000 and 9.000000\nTime 8.950000 and 9.000000\nTime 8.966000 and 9.000000\nTime 8.984000 and 9.000000\nTime 9.002000 and 9.000000\nSampling\nTime 9.017000 and 10.000000\nHas 1\nSending 1 moves\nTime 9.019000 and 10.000000\nTime 9.029000 and 10.000000\nRead 0 packet\nTime 9.041000 and 10.000000\nDoing move 0.00\nMoving Player by 50.00 and 50.00, from location 0.00, 0.00 time 0.03\nTime 9.043000 and 10.000000\nTime 9.045000 and 10.000000\nTime 9.046000 and 10.000000\nTime 9.048000 and 10.000000\nTime 9.049000 and 10.000000\nTime 9.051000 and 10.000000\nTime 9.052000 and 10.000000\nTime 9.054000 and 10.000000\nTime 9.055000 and 10.000000\nTime 9.057000 and 10.000000\nTime 9.058000 and 10.000000\nTime 9.060000 and 10.000000\nTime 9.061000 and 10.000000\nTime 9.063000 and 10.000000\nTime 9.064000 and 10.000000\nTime 9.066000 and 10.000000\nTime 9.067000 and 10.000000\nTime 9.069000 and 10.000000\nTime 9.070000 and 10.000000\nTime 9.072000 and 10.000000\nTime 9.073000 and 10.000000\nTime 9.075000 and 10.000000\nTime 9.076000 and 10.000000\nTime 9.078000 and 10.000000\nTime 9.079000 and 10.000000\nTime 9.081000 and 10.000000\nTime 9.082000 and 10.000000\nTime 9.084000 and 10.000000\nTime 9.085000 and 10.000000\nTime 9.087000 and 10.000000\nTime 9.088000 and 10.000000\nTime 9.090000 and 10.000000\nTime 9.091000 and 10.000000\nTime 9.093000 and 10.000000\nTime 9.094000 and 10.000000\nTime 9.096000 and 10.000000\nTime 9.098000 and 10.000000\nTime 9.099000 and 10.000000\nTime 9.101000 and 10.000000\nTime 9.102000 and 10.000000\nTime 9.104000 and 10.000000\nTime 9.105000 and 10.000000\nTime 9.107000 and 10.000000\nTime 9.109000 and 10.000000\nTime 9.113000 and 10.000000\nTime 9.116000 and 10.000000\nTime 9.134000 and 10.000000\nTime 9.150000 and 10.000000\nTime 9.167000 and 10.000000\nTime 9.184000 and 10.000000\nTime 9.204000 and 10.000000\nTime 9.221000 and 10.000000\nTime 9.233000 and 10.000000\nTime 9.254000 and 10.000000\nTime 9.270000 and 10.000000\nTime 9.287000 and 10.000000\nTime 9.304000 and 10.000000\nTime 9.322000 and 10.000000\nTime 9.338000 and 10.000000\nTime 9.350000 and 10.000000\nTime 9.367000 and 10.000000\nTime 9.385000 and 10.000000\nTime 9.400000 and 10.000000\nTime 9.418000 and 10.000000\nTime 9.433000 and 10.000000\nTime 9.448000 and 10.000000\nTime 9.450000 and 10.000000\nTime 9.451000 and 10.000000\nTime 9.453000 and 10.000000\nTime 9.454000 and 10.000000\nTime 9.456000 and 10.000000\nTime 9.458000 and 10.000000\nTime 9.459000 and 10.000000\nTime 9.461000 and 10.000000\nTime 9.462000 and 10.000000\nTime 9.464000 and 10.000000\nTime 9.465000 and 10.000000\nTime 9.467000 and 10.000000\nTime 9.468000 and 10.000000\nTime 9.470000 and 10.000000\nTime 9.471000 and 10.000000\nTime 9.473000 and 10.000000\nTime 9.474000 and 10.000000\nTime 9.476000 and 10.000000\nTime 9.477000 and 10.000000\nTime 9.479000 and 10.000000\nTime 9.480000 and 10.000000\nTime 9.482000 and 10.000000\nTime 9.483000 and 10.000000\nTime 9.485000 and 10.000000\nTime 9.486000 and 10.000000\nTime 9.487000 and 10.000000\nTime 9.489000 and 10.000000\nTime 9.490000 and 10.000000\nTime 9.494000 and 10.000000\nTime 9.494000 and 10.000000\nTime 9.496000 and 10.000000\nTime 9.497000 and 10.000000\nTime 9.499000 and 10.000000\nTime 9.500000 and 10.000000\nTime 9.502000 and 10.000000\nTime 9.503000 and 10.000000\nTime 9.505000 and 10.000000\nTime 9.506000 and 10.000000\nTime 9.508000 and 10.000000\nTime 9.509000 and 10.000000\nTime 9.510000 and 10.000000\nTime 9.512000 and 10.000000\nTime 9.513000 and 10.000000\nTime 9.515000 and 10.000000\nTime 9.516000 and 10.000000\nTime 9.518000 and 10.000000\nTime 9.519000 and 10.000000\nTime 9.521000 and 10.000000\nTime 9.522000 and 10.000000\nTime 9.524000 and 10.000000\nTime 9.525000 and 10.000000\nTime 9.528000 and 10.000000\nTime 9.531000 and 10.000000\nTime 9.533000 and 10.000000\nTime 9.549000 and 10.000000\nTime 9.550000 and 10.000000\nTime 9.567000 and 10.000000\nTime 9.568000 and 10.000000\nTime 9.585000 and 10.000000\nTime 9.586000 and 10.000000\nTime 9.598000 and 10.000000\nTime 9.616000 and 10.000000\nTime 9.617000 and 10.000000\nTime 9.634000 and 10.000000\nTime 9.636000 and 10.000000\nTime 9.650000 and 10.000000\nTime 9.652000 and 10.000000\nTime 9.654000 and 10.000000\nTime 9.655000 and 10.000000\nTime 9.657000 and 10.000000\nTime 9.659000 and 10.000000\nTime 9.660000 and 10.000000\nTime 9.662000 and 10.000000\nTime 9.663000 and 10.000000\nTime 9.665000 and 10.000000\nTime 9.666000 and 10.000000\nTime 9.668000 and 10.000000\nTime 9.669000 and 10.000000\nTime 9.671000 and 10.000000\nTime 9.672000 and 10.000000\nTime 9.674000 and 10.000000\nTime 9.675000 and 10.000000\nTime 9.677000 and 10.000000\nTime 9.678000 and 10.000000\nTime 9.680000 and 10.000000\nTime 9.681000 and 10.000000\nTime 9.683000 and 10.000000\nTime 9.684000 and 10.000000\nTime 9.686000 and 10.000000\nTime 9.687000 and 10.000000\nTime 9.689000 and 10.000000\nTime 9.690000 and 10.000000\nTime 9.692000 and 10.000000\nTime 9.693000 and 10.000000\nTime 9.695000 and 10.000000\nTime 9.696000 and 10.000000\nTime 9.698000 and 10.000000\nTime 9.699000 and 10.000000\nTime 9.701000 and 10.000000\nTime 9.702000 and 10.000000\nTime 9.704000 and 10.000000\nTime 9.705000 and 10.000000\nTime 9.707000 and 10.000000\nTime 9.708000 and 10.000000\nTime 9.710000 and 10.000000\nTime 9.711000 and 10.000000\nTime 9.713000 and 10.000000\nTime 9.714000 and 10.000000\nTime 9.715000 and 10.000000\nTime 9.717000 and 10.000000\nTime 9.718000 and 10.000000\nTime 9.720000 and 10.000000\nTime 9.721000 and 10.000000\nTime 9.723000 and 10.000000\nTime 9.724000 and 10.000000\nTime 9.726000 and 10.000000\nTime 9.727000 and 10.000000\nTime 9.729000 and 10.000000\nTime 9.732000 and 10.000000\nTime 9.749000 and 10.000000\nTime 9.750000 and 10.000000\nTime 9.766000 and 10.000000\nTime 9.768000 and 10.000000\nTime 9.784000 and 10.000000\nTime 9.786000 and 10.000000\nTime 9.798000 and 10.000000\nTime 9.815000 and 10.000000\nTime 9.817000 and 10.000000\nTime 9.834000 and 10.000000\nTime 9.835000 and 10.000000\nTime 9.850000 and 10.000000\nTime 9.851000 and 10.000000\nTime 9.853000 and 10.000000\nTime 9.854000 and 10.000000\nTime 9.856000 and 10.000000\nTime 9.857000 and 10.000000\nTime 9.859000 and 10.000000\nTime 9.860000 and 10.000000\nTime 9.862000 and 10.000000\nTime 9.863000 and 10.000000\nTime 9.865000 and 10.000000\nTime 9.866000 and 10.000000\nTime 9.868000 and 10.000000\nTime 9.869000 and 10.000000\nTime 9.871000 and 10.000000\nTime 9.872000 and 10.000000\nTime 9.874000 and 10.000000\nTime 9.875000 and 10.000000\nTime 9.876000 and 10.000000\nTime 9.878000 and 10.000000\nTime 9.879000 and 10.000000\nTime 9.881000 and 10.000000\nTime 9.882000 and 10.000000\nTime 9.884000 and 10.000000\nTime 9.885000 and 10.000000\nTime 9.887000 and 10.000000\nTime 9.888000 and 10.000000\nTime 9.890000 and 10.000000\nTime 9.891000 and 10.000000\nTime 9.893000 and 10.000000\nTime 9.894000 and 10.000000\nTime 9.896000 and 10.000000\nTime 9.897000 and 10.000000\nTime 9.899000 and 10.000000\nTime 9.900000 and 10.000000\nTime 9.902000 and 10.000000\nTime 9.903000 and 10.000000\nTime 9.905000 and 10.000000\nTime 9.906000 and 10.000000\nTime 9.908000 and 10.000000\nTime 9.909000 and 10.000000\nTime 9.911000 and 10.000000\nTime 9.912000 and 10.000000\nTime 9.914000 and 10.000000\nTime 9.916000 and 10.000000\nTime 9.917000 and 10.000000\nTime 9.919000 and 10.000000\nTime 9.920000 and 10.000000\nTime 9.922000 and 10.000000\nTime 9.923000 and 10.000000\nTime 9.925000 and 10.000000\nTime 9.926000 and 10.000000\nTime 9.928000 and 10.000000\nTime 9.930000 and 10.000000\nTime 9.932000 and 10.000000\nTime 9.933000 and 10.000000\nTime 9.936000 and 10.000000\nTime 9.939000 and 10.000000\nTime 9.951000 and 10.000000\nTime 9.968000 and 10.000000\nTime 9.985000 and 10.000000\nTime 10.000000 and 10.000000\nTime 10.020000 and 10.000000\nSampling\nDoing move 1.02\nMoving Player by 50.00 and 50.00, from location 1.65, 1.65 time 0.03\nTime 10.037000 and 11.000000\nHas 1\nSending 1 moves\nTime 10.054000 and 11.000000\nRead 1 packet\nTime 10.071000 and 11.000000\nTime 10.087000 and 11.000000\nTime 10.103000 and 11.000000\nTime 10.121000 and 11.000000\nTime 10.136000 and 11.000000\nTime 10.152000 and 11.000000\nTime 10.169000 and 11.000000\nTime 10.186000 and 11.000000\nTime 10.204000 and 11.000000\nTime 10.220000 and 11.000000\nTime 10.233000 and 11.000000\nTime 10.250000 and 11.000000\nTime 10.251000 and 11.000000\nTime 10.263000 and 11.000000\nTime 10.264000 and 11.000000\nTime 10.265000 and 11.000000\nTime 10.267000 and 11.000000\nTime 10.268000 and 11.000000\nTime 10.270000 and 11.000000\nTime 10.271000 and 11.000000\nTime 10.273000 and 11.000000\nTime 10.274000 and 11.000000\nTime 10.276000 and 11.000000\nTime 10.277000 and 11.000000\nTime 10.279000 and 11.000000\nTime 10.280000 and 11.000000\nTime 10.282000 and 11.000000\nTime 10.283000 and 11.000000\nTime 10.285000 and 11.000000\nTime 10.286000 and 11.000000\nTime 10.288000 and 11.000000\nTime 10.289000 and 11.000000\nTime 10.291000 and 11.000000\nTime 10.292000 and 11.000000\nTime 10.294000 and 11.000000\nTime 10.295000 and 11.000000\nTime 10.297000 and 11.000000\nTime 10.298000 and 11.000000\nTime 10.299000 and 11.000000\nTime 10.301000 and 11.000000\nTime 10.302000 and 11.000000\nTime 10.304000 and 11.000000\nTime 10.305000 and 11.000000\nTime 10.307000 and 11.000000\nTime 10.310000 and 11.000000\nTime 10.311000 and 11.000000\nTime 10.313000 and 11.000000\nTime 10.314000 and 11.000000\nTime 10.316000 and 11.000000\nTime 10.317000 and 11.000000\nTime 10.319000 and 11.000000\nTime 10.320000 and 11.000000\nTime 10.322000 and 11.000000\nTime 10.323000 and 11.000000\nTime 10.325000 and 11.000000\nTime 10.327000 and 11.000000\nTime 10.329000 and 11.000000\nTime 10.330000 and 11.000000\nTime 10.331000 and 11.000000\nTime 10.333000 and 11.000000\nTime 10.335000 and 11.000000\nTime 10.336000 and 11.000000\nTime 10.337000 and 11.000000\nTime 10.339000 and 11.000000\nTime 10.342000 and 11.000000\nTime 10.345000 and 11.000000\nTime 10.347000 and 11.000000\nTime 10.368000 and 11.000000\nTime 10.371000 and 11.000000\nTime 10.386000 and 11.000000\nTime 10.400000 and 11.000000\nTime 10.400000 and 11.000000\nTime 10.418000 and 11.000000\nTime 10.420000 and 11.000000\nTime 10.433000 and 11.000000\nTime 10.436000 and 11.000000\nTime 10.452000 and 11.000000\nTime 10.467000 and 11.000000\nTime 10.482000 and 11.000000\nTime 10.485000 and 11.000000\nTime 10.486000 and 11.000000\nTime 10.488000 and 11.000000\nTime 10.489000 and 11.000000\nTime 10.491000 and 11.000000\nTime 10.492000 and 11.000000\nTime 10.494000 and 11.000000\nTime 10.496000 and 11.000000\nTime 10.498000 and 11.000000\nTime 10.500000 and 11.000000\nTime 10.516000 and 11.000000\nTime 10.517000 and 11.000000\nTime 10.534000 and 11.000000\nTime 10.536000 and 11.000000\nTime 10.549000 and 11.000000\nTime 10.565000 and 11.000000\nTime 10.588000 and 11.000000\nTime 10.605000 and 11.000000\nTime 10.617000 and 11.000000\nTime 10.638000 and 11.000000\nTime 10.653000 and 11.000000\nTime 10.654000 and 11.000000\nTime 10.665000 and 11.000000\nTime 10.667000 and 11.000000\nTime 10.668000 and 11.000000\nTime 10.670000 and 11.000000\nTime 10.672000 and 11.000000\nTime 10.673000 and 11.000000\nTime 10.675000 and 11.000000\nTime 10.676000 and 11.000000\nTime 10.678000 and 11.000000\nTime 10.679000 and 11.000000\nTime 10.681000 and 11.000000\nTime 10.683000 and 11.000000\nTime 10.684000 and 11.000000\nTime 10.686000 and 11.000000\nTime 10.687000 and 11.000000\nTime 10.689000 and 11.000000\nTime 10.690000 and 11.000000\nTime 10.692000 and 11.000000\nTime 10.694000 and 11.000000\nTime 10.695000 and 11.000000\nTime 10.697000 and 11.000000\nTime 10.699000 and 11.000000\nTime 10.700000 and 11.000000\nTime 10.701000 and 11.000000\nTime 10.703000 and 11.000000\nTime 10.705000 and 11.000000\nTime 10.706000 and 11.000000\nTime 10.707000 and 11.000000\nTime 10.709000 and 11.000000\nTime 10.710000 and 11.000000\nTime 10.712000 and 11.000000\nTime 10.713000 and 11.000000\nTime 10.715000 and 11.000000\nTime 10.717000 and 11.000000\nTime 10.718000 and 11.000000\nTime 10.720000 and 11.000000\nTime 10.721000 and 11.000000\nTime 10.723000 and 11.000000\nTime 10.724000 and 11.000000\nTime 10.726000 and 11.000000\nTime 10.727000 and 11.000000\nTime 10.729000 and 11.000000\nTime 10.730000 and 11.000000\nTime 10.732000 and 11.000000\nTime 10.733000 and 11.000000\nTime 10.735000 and 11.000000\nTime 10.736000 and 11.000000\nTime 10.738000 and 11.000000\nTime 10.739000 and 11.000000\nTime 10.742000 and 11.000000\nTime 10.742000 and 11.000000\nTime 10.744000 and 11.000000\nTime 10.745000 and 11.000000\nTime 10.747000 and 11.000000\nTime 10.749000 and 11.000000\nTime 10.750000 and 11.000000\nTime 10.752000 and 11.000000\nTime 10.753000 and 11.000000\nTime 10.755000 and 11.000000\nTime 10.758000 and 11.000000\nTime 10.761000 and 11.000000\nTime 10.763000 and 11.000000\nTime 10.766000 and 11.000000\nTime 10.784000 and 11.000000\nTime 10.800000 and 11.000000\nTime 10.817000 and 11.000000\nTime 10.835000 and 11.000000\nTime 10.852000 and 11.000000\nTime 10.870000 and 11.000000\nTime 10.885000 and 11.000000\nTime 10.887000 and 11.000000\nTime 10.898000 and 11.000000\nTime 10.900000 and 11.000000\nTime 10.901000 and 11.000000\nTime 10.903000 and 11.000000\nTime 10.904000 and 11.000000\nTime 10.906000 and 11.000000\nTime 10.907000 and 11.000000\nTime 10.909000 and 11.000000\nTime 10.910000 and 11.000000\nTime 10.912000 and 11.000000\nTime 10.913000 and 11.000000\nTime 10.916000 and 11.000000\nTime 10.917000 and 11.000000\nTime 10.919000 and 11.000000\nTime 10.920000 and 11.000000\nTime 10.922000 and 11.000000\nTime 10.923000 and 11.000000\nTime 10.925000 and 11.000000\nTime 10.926000 and 11.000000\nTime 10.928000 and 11.000000\nTime 10.929000 and 11.000000\nTime 10.931000 and 11.000000\nTime 10.932000 and 11.000000\nTime 10.934000 and 11.000000\nTime 10.935000 and 11.000000\nTime 10.937000 and 11.000000\nTime 10.938000 and 11.000000\nTime 10.940000 and 11.000000\nTime 10.941000 and 11.000000\nTime 10.943000 and 11.000000\nTime 10.944000 and 11.000000\nTime 10.945000 and 11.000000\nTime 10.947000 and 11.000000\nTime 10.949000 and 11.000000\nTime 10.950000 and 11.000000\nTime 10.952000 and 11.000000\nTime 10.953000 and 11.000000\nTime 10.955000 and 11.000000\nTime 10.956000 and 11.000000\nTime 10.958000 and 11.000000\nTime 10.961000 and 11.000000\nTime 10.965000 and 11.000000\nTime 10.987000 and 11.000000\nTime 11.004000 and 11.000000\nSampling\nTime 11.021000 and 12.000000\nTime 11.038000 and 12.000000\nTime 11.050000 and 12.000000\nTime 11.067000 and 12.000000\nTime 11.083000 and 12.000000\nTime 11.084000 and 12.000000\nTime 11.095000 and 12.000000\nTime 11.096000 and 12.000000\nTime 11.098000 and 12.000000\nTime 11.100000 and 12.000000\nTime 11.102000 and 12.000000\nTime 11.104000 and 12.000000\nTime 11.105000 and 12.000000\nTime 11.107000 and 12.000000\nTime 11.108000 and 12.000000\nTime 11.110000 and 12.000000\nTime 11.111000 and 12.000000\nTime 11.113000 and 12.000000\nTime 11.115000 and 12.000000\nTime 11.116000 and 12.000000\nTime 11.118000 and 12.000000\nTime 11.119000 and 12.000000\nTime 11.121000 and 12.000000\nTime 11.122000 and 12.000000\nTime 11.124000 and 12.000000\nTime 11.126000 and 12.000000\nTime 11.127000 and 12.000000\nTime 11.129000 and 12.000000\nTime 11.131000 and 12.000000\nTime 11.132000 and 12.000000\nTime 11.133000 and 12.000000\nTime 11.136000 and 12.000000\nTime 11.137000 and 12.000000\nTime 11.139000 and 12.000000\nTime 11.140000 and 12.000000\nTime 11.142000 and 12.000000\nTime 11.143000 and 12.000000\nTime 11.145000 and 12.000000\nTime 11.147000 and 12.000000\nTime 11.148000 and 12.000000\nTime 11.150000 and 12.000000\nTime 11.151000 and 12.000000\nTime 11.153000 and 12.000000\nTime 11.155000 and 12.000000\nTime 11.156000 and 12.000000\nTime 11.158000 and 12.000000\nTime 11.160000 and 12.000000\nTime 11.161000 and 12.000000\nTime 11.164000 and 12.000000\nTime 11.166000 and 12.000000\nTime 11.183000 and 12.000000\nTime 11.184000 and 12.000000\nTime 11.201000 and 12.000000\nTime 11.203000 and 12.000000\nTime 11.215000 and 12.000000\nTime 11.217000 and 12.000000\nTime 11.232000 and 12.000000\nTime 11.233000 and 12.000000\nTime 11.249000 and 12.000000\nTime 11.251000 and 12.000000\nTime 11.269000 and 12.000000\nTime 11.271000 and 12.000000\nTime 11.282000 and 12.000000\nTime 11.283000 and 12.000000\nTime 11.285000 and 12.000000\nTime 11.286000 and 12.000000\nTime 11.288000 and 12.000000\nTime 11.289000 and 12.000000\nTime 11.291000 and 12.000000\nTime 11.292000 and 12.000000\nTime 11.294000 and 12.000000\nTime 11.295000 and 12.000000\nTime 11.297000 and 12.000000\nTime 11.298000 and 12.000000\nTime 11.300000 and 12.000000\nTime 11.301000 and 12.000000\nTime 11.303000 and 12.000000\nTime 11.304000 and 12.000000\nTime 11.306000 and 12.000000\nTime 11.307000 and 12.000000\nTime 11.309000 and 12.000000\nTime 11.311000 and 12.000000\nTime 11.313000 and 12.000000\nTime 11.314000 and 12.000000\nTime 11.316000 and 12.000000\nTime 11.318000 and 12.000000\nTime 11.319000 and 12.000000\nTime 11.321000 and 12.000000\nTime 11.322000 and 12.000000\nTime 11.324000 and 12.000000\nTime 11.326000 and 12.000000\nTime 11.328000 and 12.000000\nTime 11.330000 and 12.000000\nTime 11.331000 and 12.000000\nTime 11.333000 and 12.000000\nTime 11.334000 and 12.000000\nTime 11.336000 and 12.000000\nTime 11.338000 and 12.000000\nTime 11.341000 and 12.000000\nTime 11.342000 and 12.000000\nTime 11.344000 and 12.000000\nTime 11.345000 and 12.000000\nTime 11.347000 and 12.000000\nTime 11.348000 and 12.000000\nTime 11.350000 and 12.000000\nTime 11.351000 and 12.000000\nTime 11.353000 and 12.000000\nTime 11.354000 and 12.000000\nTime 11.356000 and 12.000000\nTime 11.358000 and 12.000000\nTime 11.359000 and 12.000000\nTime 11.361000 and 12.000000\nTime 11.364000 and 12.000000\nTime 11.365000 and 12.000000\nTime 11.383000 and 12.000000\nTime 11.384000 and 12.000000\nTime 11.401000 and 12.000000\nTime 11.403000 and 12.000000\nTime 11.415000 and 12.000000\nTime 11.417000 and 12.000000\nTime 11.433000 and 12.000000\nTime 11.451000 and 12.000000\nTime 11.451000 and 12.000000\nTime 11.468000 and 12.000000\nTime 11.470000 and 12.000000\nTime 11.482000 and 12.000000\nTime 11.484000 and 12.000000\nTime 11.501000 and 12.000000\nTime 11.502000 and 12.000000\nTime 11.520000 and 12.000000\nTime 11.532000 and 12.000000\nTime 11.534000 and 12.000000\nTime 11.549000 and 12.000000\nTime 11.551000 and 12.000000\nTime 11.552000 and 12.000000\nTime 11.554000 and 12.000000\nTime 11.555000 and 12.000000\nTime 11.558000 and 12.000000\nTime 11.559000 and 12.000000\nTime 11.561000 and 12.000000\nTime 11.564000 and 12.000000\nTime 11.567000 and 12.000000\nTime 11.582000 and 12.000000\nTime 11.584000 and 12.000000\nTime 11.601000 and 12.000000\nTime 11.603000 and 12.000000\nTime 11.615000 and 12.000000\nTime 11.632000 and 12.000000\nTime 11.633000 and 12.000000\nTime 11.651000 and 12.000000\nTime 11.653000 and 12.000000\nTime 11.670000 and 12.000000\nTime 11.685000 and 12.000000\nTime 11.701000 and 12.000000\nTime 11.703000 and 12.000000\nTime 11.705000 and 12.000000\nTime 11.707000 and 12.000000\nTime 11.708000 and 12.000000\nTime 11.710000 and 12.000000\nTime 11.711000 and 12.000000\nTime 11.713000 and 12.000000\nTime 11.714000 and 12.000000\nTime 11.716000 and 12.000000\nTime 11.717000 and 12.000000\nTime 11.719000 and 12.000000\nTime 11.720000 and 12.000000\nTime 11.722000 and 12.000000\nTime 11.723000 and 12.000000\nTime 11.725000 and 12.000000\nTime 11.726000 and 12.000000\nTime 11.728000 and 12.000000\nTime 11.729000 and 12.000000\nTime 11.731000 and 12.000000\nTime 11.732000 and 12.000000\nTime 11.734000 and 12.000000\nTime 11.736000 and 12.000000\nTime 11.737000 and 12.000000\nTime 11.739000 and 12.000000\nTime 11.742000 and 12.000000\nTime 11.742000 and 12.000000\nTime 11.744000 and 12.000000\nTime 11.745000 and 12.000000\nTime 11.747000 and 12.000000\nTime 11.749000 and 12.000000\nTime 11.750000 and 12.000000\nTime 11.752000 and 12.000000\nTime 11.753000 and 12.000000\nTime 11.755000 and 12.000000\nTime 11.756000 and 12.000000\nTime 11.758000 and 12.000000\nTime 11.759000 and 12.000000\nTime 11.761000 and 12.000000\nTime 11.762000 and 12.000000\nTime 11.764000 and 12.000000\nTime 11.767000 and 12.000000\nTime 11.770000 and 12.000000\nTime 11.788000 and 12.000000\nTime 11.804000 and 12.000000\nTime 11.820000 and 12.000000\nTime 11.833000 and 12.000000\nTime 11.850000 and 12.000000\nTime 11.870000 and 12.000000\nTime 11.886000 and 12.000000\nTime 11.900000 and 12.000000\nTime 11.901000 and 12.000000\nTime 11.903000 and 12.000000\nTime 11.904000 and 12.000000\nTime 11.906000 and 12.000000\nTime 11.907000 and 12.000000\nTime 11.909000 and 12.000000\nTime 11.910000 and 12.000000\nTime 11.912000 and 12.000000\nTime 11.913000 and 12.000000\nTime 11.916000 and 12.000000\nTime 11.918000 and 12.000000\nTime 11.919000 and 12.000000\nTime 11.921000 and 12.000000\nTime 11.922000 and 12.000000\nTime 11.924000 and 12.000000\nTime 11.925000 and 12.000000\nTime 11.927000 and 12.000000\nTime 11.928000 and 12.000000\nTime 11.930000 and 12.000000\nTime 11.931000 and 12.000000\nTime 11.933000 and 12.000000\nTime 11.934000 and 12.000000\nTime 11.936000 and 12.000000\nTime 11.937000 and 12.000000\nTime 11.939000 and 12.000000\nTime 11.941000 and 12.000000\nTime 11.942000 and 12.000000\nTime 11.944000 and 12.000000\nTime 11.945000 and 12.000000\nTime 11.947000 and 12.000000\nTime 11.948000 and 12.000000\nTime 11.950000 and 12.000000\nTime 11.951000 and 12.000000\nTime 11.953000 and 12.000000\nTime 11.954000 and 12.000000\nTime 11.956000 and 12.000000\nTime 11.957000 and 12.000000\nTime 11.959000 and 12.000000\nTime 11.960000 and 12.000000\nTime 11.962000 and 12.000000\nTime 11.963000 and 12.000000\nTime 11.965000 and 12.000000\nTime 11.967000 and 12.000000\nTime 11.969000 and 12.000000\nTime 11.972000 and 12.000000\nTime 11.984000 and 12.000000\nTime 12.004000 and 12.000000\nSampling\nTime 12.020000 and 13.000000\nTime 12.037000 and 13.000000\nTime 12.054000 and 13.000000\nTime 12.071000 and 13.000000\nTime 12.087000 and 13.000000\nTime 12.105000 and 13.000000\nTime 12.117000 and 13.000000\nTime 12.138000 and 13.000000\nTime 12.153000 and 13.000000\nTime 12.154000 and 13.000000\nTime 12.165000 and 13.000000\nTime 12.167000 and 13.000000\nTime 12.169000 and 13.000000\nTime 12.171000 and 13.000000\nTime 12.182000 and 13.000000\nTime 12.203000 and 13.000000\nTime 12.220000 and 13.000000\nTime 12.234000 and 13.000000\nTime 12.250000 and 13.000000\nTime 12.267000 and 13.000000\nTime 12.288000 and 13.000000\nTime 12.299000 and 13.000000\nTime 12.300000 and 13.000000\nTime 12.312000 and 13.000000\nTime 12.313000 and 13.000000\nTime 12.315000 and 13.000000\nTime 12.317000 and 13.000000\nTime 12.320000 and 13.000000\nTime 12.321000 and 13.000000\nTime 12.323000 and 13.000000\nTime 12.325000 and 13.000000\nTime 12.327000 and 13.000000\nTime 12.329000 and 13.000000\nTime 12.330000 and 13.000000\nTime 12.332000 and 13.000000\nTime 12.333000 and 13.000000\nTime 12.335000 and 13.000000\nTime 12.337000 and 13.000000\nTime 12.338000 and 13.000000\nTime 12.340000 and 13.000000\nTime 12.341000 and 13.000000\nTime 12.344000 and 13.000000\nTime 12.345000 and 13.000000\nTime 12.347000 and 13.000000\nTime 12.349000 and 13.000000\nTime 12.351000 and 13.000000\nTime 12.352000 and 13.000000\nTime 12.354000 and 13.000000\nTime 12.355000 and 13.000000\nTime 12.357000 and 13.000000\nTime 12.358000 and 13.000000\nTime 12.360000 and 13.000000\nTime 12.362000 and 13.000000\nTime 12.364000 and 13.000000\nTime 12.365000 and 13.000000\nTime 12.367000 and 13.000000\nTime 12.368000 and 13.000000\nTime 12.370000 and 13.000000\nTime 12.372000 and 13.000000\nTime 12.374000 and 13.000000\nTime 12.383000 and 13.000000\nTime 12.384000 and 13.000000\nTime 12.401000 and 13.000000\nTime 12.404000 and 13.000000\nTime 12.420000 and 13.000000\nTime 12.436000 and 13.000000\nTime 12.453000 and 13.000000\nTime 12.470000 and 13.000000\nTime 12.487000 and 13.000000\nTime 12.502000 and 13.000000\nTime 12.514000 and 13.000000\nTime 12.515000 and 13.000000\nTime 12.517000 and 13.000000\nTime 12.518000 and 13.000000\nTime 12.520000 and 13.000000\nTime 12.521000 and 13.000000\nTime 12.523000 and 13.000000\nTime 12.524000 and 13.000000\nTime 12.526000 and 13.000000\nTime 12.528000 and 13.000000\nTime 12.529000 and 13.000000\nTime 12.531000 and 13.000000\nTime 12.533000 and 13.000000\nTime 12.534000 and 13.000000\nTime 12.536000 and 13.000000\nTime 12.537000 and 13.000000\nTime 12.539000 and 13.000000\nTime 12.540000 and 13.000000\nTime 12.542000 and 13.000000\nTime 12.544000 and 13.000000\nTime 12.545000 and 13.000000\nTime 12.547000 and 13.000000\nTime 12.548000 and 13.000000\nTime 12.550000 and 13.000000\nTime 12.551000 and 13.000000\nTime 12.553000 and 13.000000\nTime 12.555000 and 13.000000\nTime 12.556000 and 13.000000\nTime 12.558000 and 13.000000\nTime 12.559000 and 13.000000\nTime 12.561000 and 13.000000\nTime 12.562000 and 13.000000\nTime 12.565000 and 13.000000\nTime 12.566000 and 13.000000\nTime 12.568000 and 13.000000\nTime 12.569000 and 13.000000\nTime 12.571000 and 13.000000\nTime 12.573000 and 13.000000\nTime 12.574000 and 13.000000\nTime 12.577000 and 13.000000\nTime 12.579000 and 13.000000\nTime 12.582000 and 13.000000\nTime 12.604000 and 13.000000\nTime 12.621000 and 13.000000\nTime 12.637000 and 13.000000\nTime 12.653000 and 13.000000\nTime 12.671000 and 13.000000\nTime 12.683000 and 13.000000\nTime 12.703000 and 13.000000\nTime 12.704000 and 13.000000\nTime 12.712000 and 13.000000\nTime 12.713000 and 13.000000\nTime 12.715000 and 13.000000\nTime 12.716000 and 13.000000\nTime 12.718000 and 13.000000\nTime 12.720000 and 13.000000\nTime 12.722000 and 13.000000\nTime 12.723000 and 13.000000\nTime 12.725000 and 13.000000\nTime 12.726000 and 13.000000\nTime 12.728000 and 13.000000\nTime 12.729000 and 13.000000\nTime 12.731000 and 13.000000\nTime 12.734000 and 13.000000\nTime 12.735000 and 13.000000\nTime 12.737000 and 13.000000\nTime 12.738000 and 13.000000\nTime 12.740000 and 13.000000\nTime 12.742000 and 13.000000\nTime 12.743000 and 13.000000\nTime 12.745000 and 13.000000\nTime 12.746000 and 13.000000\nTime 12.748000 and 13.000000\nTime 12.750000 and 13.000000\nTime 12.751000 and 13.000000\nTime 12.753000 and 13.000000\nTime 12.754000 and 13.000000\nTime 12.756000 and 13.000000\nTime 12.757000 and 13.000000\nTime 12.759000 and 13.000000\nTime 12.760000 and 13.000000\nTime 12.762000 and 13.000000\nTime 12.764000 and 13.000000\nTime 12.765000 and 13.000000\nTime 12.767000 and 13.000000\nTime 12.769000 and 13.000000\nTime 12.770000 and 13.000000\nTime 12.772000 and 13.000000\nTime 12.774000 and 13.000000\nTime 12.777000 and 13.000000\nTime 12.781000 and 13.000000\nTime 12.802000 and 13.000000\nTime 12.804000 and 13.000000\nTime 12.816000 and 13.000000\nTime 12.818000 and 13.000000\nTime 12.834000 and 13.000000\nTime 12.849000 and 13.000000\nTime 12.851000 and 13.000000\nTime 12.867000 and 13.000000\nTime 12.869000 and 13.000000\nTime 12.883000 and 13.000000\nTime 12.884000 and 13.000000\nTime 12.900000 and 13.000000\nTime 12.901000 and 13.000000\nTime 12.902000 and 13.000000\nTime 12.904000 and 13.000000\nTime 12.905000 and 13.000000\nTime 12.907000 and 13.000000\nTime 12.908000 and 13.000000\nTime 12.910000 and 13.000000\nTime 12.911000 and 13.000000\nTime 12.913000 and 13.000000\nTime 12.916000 and 13.000000\nTime 12.917000 and 13.000000\nTime 12.919000 and 13.000000\nTime 12.920000 and 13.000000\nTime 12.922000 and 13.000000\nTime 12.923000 and 13.000000\nTime 12.925000 and 13.000000\nTime 12.926000 and 13.000000\nTime 12.928000 and 13.000000\nTime 12.930000 and 13.000000\nTime 12.931000 and 13.000000\nTime 12.933000 and 13.000000\nTime 12.934000 and 13.000000\nTime 12.936000 and 13.000000\nTime 12.937000 and 13.000000\nTime 12.939000 and 13.000000\nTime 12.940000 and 13.000000\nTime 12.942000 and 13.000000\nTime 12.943000 and 13.000000\nTime 12.945000 and 13.000000\nTime 12.946000 and 13.000000\nTime 12.948000 and 13.000000\nTime 12.951000 and 13.000000\nTime 12.953000 and 13.000000\nTime 12.969000 and 13.000000\nTime 12.971000 and 13.000000\nTime 12.982000 and 13.000000\nTime 12.983000 and 13.000000\nTime 12.999000 and 13.000000\nTime 13.000000 and 13.000000\nTime 13.018000 and 13.000000\nSampling\nTime 13.033000 and 14.000000\nTime 13.034000 and 14.000000\nTime 13.052000 and 14.000000\nTime 13.053000 and 14.000000\nTime 13.066000 and 14.000000\nTime 13.068000 and 14.000000\nTime 13.082000 and 14.000000\nTime 13.083000 and 14.000000\nTime 13.098000 and 14.000000\nTime 13.100000 and 14.000000\nTime 13.101000 and 14.000000\nTime 13.103000 and 14.000000\nTime 13.104000 and 14.000000\nTime 13.106000 and 14.000000\nTime 13.107000 and 14.000000\nTime 13.109000 and 14.000000\nTime 13.110000 and 14.000000\nTime 13.112000 and 14.000000\nTime 13.113000 and 14.000000\nTime 13.115000 and 14.000000\nTime 13.116000 and 14.000000\nTime 13.118000 and 14.000000\nTime 13.119000 and 14.000000\nTime 13.121000 and 14.000000\nTime 13.122000 and 14.000000\nTime 13.124000 and 14.000000\nTime 13.125000 and 14.000000\nTime 13.127000 and 14.000000\nTime 13.128000 and 14.000000\nTime 13.130000 and 14.000000\nTime 13.131000 and 14.000000\nTime 13.133000 and 14.000000\nTime 13.134000 and 14.000000\nTime 13.136000 and 14.000000\nTime 13.137000 and 14.000000\nTime 13.139000 and 14.000000\nTime 13.140000 and 14.000000\nTime 13.142000 and 14.000000\nTime 13.143000 and 14.000000\nTime 13.145000 and 14.000000\nTime 13.146000 and 14.000000\nTime 13.148000 and 14.000000\nTime 13.149000 and 14.000000\nTime 13.151000 and 14.000000\nTime 13.152000 and 14.000000\nTime 13.154000 and 14.000000\nTime 13.155000 and 14.000000\nTime 13.157000 and 14.000000\nTime 13.158000 and 14.000000\nTime 13.160000 and 14.000000\nTime 13.161000 and 14.000000\nTime 13.163000 and 14.000000\nTime 13.164000 and 14.000000\nTime 13.166000 and 14.000000\nTime 13.167000 and 14.000000\nTime 13.168000 and 14.000000\nTime 13.170000 and 14.000000\nTime 13.171000 and 14.000000\nTime 13.173000 and 14.000000\nTime 13.174000 and 14.000000\nTime 13.176000 and 14.000000\nTime 13.179000 and 14.000000\nTime 13.181000 and 14.000000\nTime 13.182000 and 14.000000\nTime 13.184000 and 14.000000\nTime 13.185000 and 14.000000\nTime 13.188000 and 14.000000\nTime 13.191000 and 14.000000\nTime 13.193000 and 14.000000\nTime 13.199000 and 14.000000\nTime 13.220000 and 14.000000\nTime 13.237000 and 14.000000\nTime 13.253000 and 14.000000\nTime 13.271000 and 14.000000\nTime 13.288000 and 14.000000\nTime 13.303000 and 14.000000\nTime 13.320000 and 14.000000\nTime 13.338000 and 14.000000\nTime 13.354000 and 14.000000\nTime 13.370000 and 14.000000\nTime 13.387000 and 14.000000\nTime 13.405000 and 14.000000\nTime 13.407000 and 14.000000\nTime 13.416000 and 14.000000\nTime 13.424000 and 14.000000\nTime 13.436000 and 14.000000\nTime 13.453000 and 14.000000\nTime 13.471000 and 14.000000\nTime 13.487000 and 14.000000\nTime 13.503000 and 14.000000\nTime 13.514000 and 14.000000\nTime 13.516000 and 14.000000\nTime 13.518000 and 14.000000\nTime 13.519000 and 14.000000\nTime 13.521000 and 14.000000\nTime 13.522000 and 14.000000\nTime 13.524000 and 14.000000\nTime 13.525000 and 14.000000\nTime 13.527000 and 14.000000\nTime 13.528000 and 14.000000\nTime 13.530000 and 14.000000\nTime 13.532000 and 14.000000\nTime 13.533000 and 14.000000\nTime 13.535000 and 14.000000\nTime 13.536000 and 14.000000\nTime 13.538000 and 14.000000\nTime 13.539000 and 14.000000\nTime 13.541000 and 14.000000\nTime 13.543000 and 14.000000\nTime 13.544000 and 14.000000\nTime 13.546000 and 14.000000\nTime 13.547000 and 14.000000\nTime 13.549000 and 14.000000\nTime 13.550000 and 14.000000\nTime 13.552000 and 14.000000\nTime 13.554000 and 14.000000\nTime 13.555000 and 14.000000\nTime 13.557000 and 14.000000\nTime 13.558000 and 14.000000\nTime 13.560000 and 14.000000\nTime 13.561000 and 14.000000\nTime 13.564000 and 14.000000\nTime 13.565000 and 14.000000\nTime 13.566000 and 14.000000\nTime 13.568000 and 14.000000\nTime 13.569000 and 14.000000\nTime 13.571000 and 14.000000\nTime 13.572000 and 14.000000\nTime 13.575000 and 14.000000\nTime 13.576000 and 14.000000\nTime 13.578000 and 14.000000\nTime 13.579000 and 14.000000\nTime 13.581000 and 14.000000\nTime 13.582000 and 14.000000\nTime 13.584000 and 14.000000\nTime 13.586000 and 14.000000\nTime 13.588000 and 14.000000\nTime 13.589000 and 14.000000\nTime 13.591000 and 14.000000\nTime 13.592000 and 14.000000\nTime 13.599000 and 14.000000\nTime 13.601000 and 14.000000\nTime 13.617000 and 14.000000\nTime 13.630000 and 14.000000\nTime 13.637000 and 14.000000\nTime 13.655000 and 14.000000\nTime 13.667000 and 14.000000\nTime 13.685000 and 14.000000\nTime 13.701000 and 14.000000\nTime 13.717000 and 14.000000\nTime 13.732000 and 14.000000\nTime 13.734000 and 14.000000\nTime 13.736000 and 14.000000\nTime 13.737000 and 14.000000\nTime 13.739000 and 14.000000\nTime 13.740000 and 14.000000\nTime 13.742000 and 14.000000\nTime 13.744000 and 14.000000\nTime 13.745000 and 14.000000\nTime 13.747000 and 14.000000\nTime 13.748000 and 14.000000\nTime 13.750000 and 14.000000\nTime 13.751000 and 14.000000\nTime 13.753000 and 14.000000\nTime 13.755000 and 14.000000\nTime 13.756000 and 14.000000\nTime 13.758000 and 14.000000\nTime 13.759000 and 14.000000\nTime 13.761000 and 14.000000\nTime 13.762000 and 14.000000\nTime 13.764000 and 14.000000\nTime 13.766000 and 14.000000\nTime 13.768000 and 14.000000\nTime 13.769000 and 14.000000\nTime 13.771000 and 14.000000\nTime 13.772000 and 14.000000\nTime 13.774000 and 14.000000\nTime 13.775000 and 14.000000\nTime 13.777000 and 14.000000\nTime 13.779000 and 14.000000\nTime 13.780000 and 14.000000\nTime 13.782000 and 14.000000\nTime 13.783000 and 14.000000\nTime 13.785000 and 14.000000\nTime 13.786000 and 14.000000\nTime 13.789000 and 14.000000\nTime 13.790000 and 14.000000\nTime 13.792000 and 14.000000\nTime 13.795000 and 14.000000\nTime 13.797000 and 14.000000\nTime 13.815000 and 14.000000\nTime 13.817000 and 14.000000\nTime 13.834000 and 14.000000\nTime 13.835000 and 14.000000\nTime 13.852000 and 14.000000\nTime 13.854000 and 14.000000\nTime 13.867000 and 14.000000\nTime 13.868000 and 14.000000\nTime 13.885000 and 14.000000\nTime 13.887000 and 14.000000\nTime 13.899000 and 14.000000\nTime 13.901000 and 14.000000\nTime 13.917000 and 14.000000\nTime 13.919000 and 14.000000\nTime 13.920000 and 14.000000\nTime 13.922000 and 14.000000\nTime 13.924000 and 14.000000\nTime 13.925000 and 14.000000\nTime 13.927000 and 14.000000\nTime 13.928000 and 14.000000\nTime 13.930000 and 14.000000\nTime 13.931000 and 14.000000\nTime 13.933000 and 14.000000\nTime 13.935000 and 14.000000\nTime 13.936000 and 14.000000\nTime 13.938000 and 14.000000\nTime 13.939000 and 14.000000\nTime 13.941000 and 14.000000\nTime 13.942000 and 14.000000\nTime 13.944000 and 14.000000\nTime 13.945000 and 14.000000\nTime 13.947000 and 14.000000\nTime 13.948000 and 14.000000\nTime 13.950000 and 14.000000\nTime 13.951000 and 14.000000\nTime 13.953000 and 14.000000\nTime 13.954000 and 14.000000\nTime 13.956000 and 14.000000\nTime 13.958000 and 14.000000\nTime 13.959000 and 14.000000\nTime 13.961000 and 14.000000\nTime 13.962000 and 14.000000\nTime 13.964000 and 14.000000\nTime 13.965000 and 14.000000\nTime 13.967000 and 14.000000\nTime 13.968000 and 14.000000\nTime 13.970000 and 14.000000\nTime 13.971000 and 14.000000\nTime 13.973000 and 14.000000\nTime 13.974000 and 14.000000\nTime 13.976000 and 14.000000\nTime 13.977000 and 14.000000\nTime 13.979000 and 14.000000\nTime 13.980000 and 14.000000\nTime 13.982000 and 14.000000\nTime 13.984000 and 14.000000\nTime 13.985000 and 14.000000\nTime 13.987000 and 14.000000\nTime 13.988000 and 14.000000\nTime 13.990000 and 14.000000\nTime 13.991000 and 14.000000\nTime 13.993000 and 14.000000\nTime 13.994000 and 14.000000\nTime 13.996000 and 14.000000\nTime 13.997000 and 14.000000\nTime 13.999000 and 14.000000\nTime 14.003000 and 14.000000\nSampling\nTime 14.052000 and 15.000000\nTime 14.052000 and 15.000000\nTime 14.069000 and 15.000000\nTime 14.083000 and 15.000000\nTime 14.098000 and 15.000000\nTime 14.118000 and 15.000000\nTime 14.144000 and 15.000000\nTime 14.152000 and 15.000000\nTime 14.168000 and 15.000000\nTime 14.171000 and 15.000000\nTime 14.173000 and 15.000000\nTime 14.174000 and 15.000000\nTime 14.176000 and 15.000000\nTime 14.178000 and 15.000000\nTime 14.179000 and 15.000000\nTime 14.181000 and 15.000000\nTime 14.183000 and 15.000000\nTime 14.184000 and 15.000000\nTime 14.186000 and 15.000000\nTime 14.187000 and 15.000000\nTime 14.189000 and 15.000000\nTime 14.191000 and 15.000000\nTime 14.192000 and 15.000000\nTime 14.194000 and 15.000000\nTime 14.195000 and 15.000000\nTime 14.197000 and 15.000000\nTime 14.198000 and 15.000000\nTime 14.200000 and 15.000000\nTime 14.204000 and 15.000000\nTime 14.207000 and 15.000000\nTime 14.238000 and 15.000000\nTime 14.253000 and 15.000000\nTime 14.256000 and 15.000000\nTime 14.269000 and 15.000000\nTime 14.283000 and 15.000000\nTime 14.302000 and 15.000000\nTime 14.316000 and 15.000000\nTime 14.333000 and 15.000000\nTime 14.349000 and 15.000000\nTime 14.367000 and 15.000000\nTime 14.370000 and 15.000000\nTime 14.386000 and 15.000000\nTime 14.401000 and 15.000000\nTime 14.415000 and 15.000000\nTime 14.418000 and 15.000000\nTime 14.435000 and 15.000000\nTime 14.452000 and 15.000000\nTime 14.468000 and 15.000000\nTime 14.485000 and 15.000000\nTime 14.502000 and 15.000000\nTime 14.518000 and 15.000000\nTime 14.535000 and 15.000000\nTime 14.537000 and 15.000000\nTime 14.550000 and 15.000000\nTime 14.566000 and 15.000000\nTime 14.567000 and 15.000000\nTime 14.584000 and 15.000000\nTime 14.586000 and 15.000000\nTime 14.599000 and 15.000000\nTime 14.601000 and 15.000000\nTime 14.618000 and 15.000000\nTime 14.620000 and 15.000000\nTime 14.632000 and 15.000000\nTime 14.634000 and 15.000000\nTime 14.650000 and 15.000000\nTime 14.666000 and 15.000000\nTime 14.667000 and 15.000000\nTime 14.685000 and 15.000000\nTime 14.687000 and 15.000000\nTime 14.699000 and 15.000000\nTime 14.701000 and 15.000000\nTime 14.717000 and 15.000000\nTime 14.719000 and 15.000000\nTime 14.735000 and 15.000000\nTime 14.738000 and 15.000000\nTime 14.750000 and 15.000000\nTime 14.751000 and 15.000000\nTime 14.765000 and 15.000000\nTime 14.766000 and 15.000000\nTime 14.783000 and 15.000000\nTime 14.785000 and 15.000000\nTime 14.801000 and 15.000000\nTime 14.803000 and 15.000000\nTime 14.816000 and 15.000000\nTime 14.832000 and 15.000000\nTime 14.849000 and 15.000000\nTime 14.871000 and 15.000000\nTime 14.888000 and 15.000000\nTime 14.901000 and 15.000000\nTime 14.919000 and 15.000000\nTime 14.937000 and 15.000000\nTime 14.953000 and 15.000000\nTime 14.954000 and 15.000000\nTime 14.965000 and 15.000000\nTime 14.966000 and 15.000000\nTime 14.968000 and 15.000000\nTime 14.969000 and 15.000000\nTime 14.971000 and 15.000000\nTime 14.973000 and 15.000000\nTime 14.974000 and 15.000000\nTime 14.976000 and 15.000000\nTime 14.977000 and 15.000000\nTime 14.979000 and 15.000000\nTime 14.980000 and 15.000000\nTime 14.982000 and 15.000000\nTime 14.983000 and 15.000000\nTime 14.985000 and 15.000000\nTime 14.986000 and 15.000000\nTime 14.988000 and 15.000000\nTime 14.989000 and 15.000000\nTime 14.992000 and 15.000000\nTime 14.993000 and 15.000000\nTime 14.995000 and 15.000000\nTime 14.996000 and 15.000000\nTime 14.998000 and 15.000000\nTime 14.999000 and 15.000000\nTime 15.001000 and 15.000000\nSampling\nTime 15.002000 and 16.000000\nTime 15.004000 and 16.000000\nTime 15.005000 and 16.000000\nTime 15.007000 and 16.000000\nTime 15.008000 and 16.000000\nTime 15.010000 and 16.000000\nTime 15.011000 and 16.000000\nTime 15.013000 and 16.000000\nTime 15.014000 and 16.000000\nTime 15.016000 and 16.000000\nTime 15.017000 and 16.000000\nTime 15.019000 and 16.000000\nTime 15.020000 and 16.000000\nTime 15.022000 and 16.000000\nTime 15.023000 and 16.000000\nTime 15.025000 and 16.000000\nTime 15.026000 and 16.000000\nTime 15.028000 and 16.000000\nTime 15.029000 and 16.000000\nTime 15.031000 and 16.000000\nTime 15.032000 and 16.000000\nTime 15.034000 and 16.000000\nTime 15.036000 and 16.000000\nTime 15.037000 and 16.000000\nTime 15.040000 and 16.000000\nTime 15.043000 and 16.000000\nTime 15.049000 and 16.000000\nTime 15.066000 and 16.000000\nTime 15.067000 and 16.000000\nTime 15.085000 and 16.000000\nTime 15.099000 and 16.000000\nTime 15.101000 and 16.000000\nTime 15.118000 and 16.000000\nTime 15.121000 and 16.000000\nTime 15.133000 and 16.000000\nTime 15.137000 and 16.000000\nTime 15.152000 and 16.000000\nTime 15.167000 and 16.000000\nTime 15.169000 and 16.000000\nTime 15.170000 and 16.000000\nTime 15.172000 and 16.000000\nTime 15.173000 and 16.000000\nTime 15.175000 and 16.000000\nTime 15.176000 and 16.000000\nTime 15.178000 and 16.000000\nTime 15.179000 and 16.000000\nTime 15.181000 and 16.000000\nTime 15.182000 and 16.000000\nTime 15.184000 and 16.000000\nTime 15.185000 and 16.000000\nTime 15.187000 and 16.000000\nTime 15.188000 and 16.000000\nTime 15.190000 and 16.000000\nTime 15.191000 and 16.000000\nTime 15.193000 and 16.000000\nTime 15.194000 and 16.000000\nTime 15.196000 and 16.000000\nTime 15.197000 and 16.000000\nTime 15.199000 and 16.000000\nTime 15.200000 and 16.000000\nTime 15.202000 and 16.000000\nTime 15.203000 and 16.000000\nTime 15.205000 and 16.000000\nTime 15.206000 and 16.000000\nTime 15.208000 and 16.000000\nTime 15.209000 and 16.000000\nTime 15.211000 and 16.000000\nTime 15.213000 and 16.000000\nTime 15.214000 and 16.000000\nTime 15.216000 and 16.000000\nTime 15.217000 and 16.000000\nTime 15.219000 and 16.000000\nTime 15.220000 and 16.000000\nTime 15.222000 and 16.000000\nTime 15.223000 and 16.000000\nTime 15.225000 and 16.000000\nTime 15.226000 and 16.000000\nTime 15.228000 and 16.000000\nTime 15.230000 and 16.000000\nTime 15.232000 and 16.000000\nTime 15.235000 and 16.000000\nTime 15.237000 and 16.000000\nTime 15.248000 and 16.000000\nTime 15.250000 and 16.000000\nTime 15.268000 and 16.000000\nTime 15.270000 and 16.000000\nTime 15.283000 and 16.000000\nTime 15.284000 and 16.000000\nTime 15.301000 and 16.000000\nTime 15.302000 and 16.000000\nTime 15.319000 and 16.000000\nTime 15.321000 and 16.000000\nTime 15.334000 and 16.000000\nTime 15.336000 and 16.000000\nTime 15.349000 and 16.000000\nTime 15.350000 and 16.000000\nTime 15.365000 and 16.000000\nTime 15.367000 and 16.000000\nTime 15.369000 and 16.000000\nTime 15.370000 and 16.000000\nTime 15.372000 and 16.000000\nTime 15.373000 and 16.000000\nTime 15.375000 and 16.000000\nTime 15.377000 and 16.000000\nTime 15.379000 and 16.000000\nTime 15.380000 and 16.000000\nTime 15.382000 and 16.000000\nTime 15.383000 and 16.000000\nTime 15.385000 and 16.000000\nTime 15.386000 and 16.000000\nTime 15.388000 and 16.000000\nTime 15.390000 and 16.000000\nTime 15.391000 and 16.000000\nTime 15.393000 and 16.000000\nTime 15.394000 and 16.000000\nTime 15.396000 and 16.000000\nTime 15.398000 and 16.000000\nTime 15.400000 and 16.000000\nTime 15.402000 and 16.000000\nTime 15.403000 and 16.000000\nTime 15.405000 and 16.000000\nTime 15.406000 and 16.000000\nTime 15.408000 and 16.000000\nTime 15.409000 and 16.000000\nTime 15.411000 and 16.000000\nTime 15.413000 and 16.000000\nTime 15.414000 and 16.000000\nTime 15.416000 and 16.000000\nTime 15.417000 and 16.000000\nTime 15.419000 and 16.000000\nTime 15.420000 and 16.000000\nTime 15.422000 and 16.000000\nTime 15.424000 and 16.000000\nTime 15.425000 and 16.000000\nTime 15.427000 and 16.000000\nTime 15.429000 and 16.000000\nTime 15.430000 and 16.000000\nTime 15.432000 and 16.000000\nTime 15.434000 and 16.000000\nTime 15.435000 and 16.000000\nTime 15.437000 and 16.000000\nTime 15.438000 and 16.000000\nTime 15.441000 and 16.000000\nTime 15.443000 and 16.000000\nTime 15.446000 and 16.000000\nTime 15.449000 and 16.000000\nTime 15.471000 and 16.000000\nTime 15.488000 and 16.000000\nTime 15.503000 and 16.000000\nTime 15.521000 and 16.000000\nTime 15.534000 and 16.000000\nTime 15.550000 and 16.000000\nTime 15.569000 and 16.000000\nTime 15.585000 and 16.000000\nTime 15.587000 and 16.000000\nTime 15.598000 and 16.000000\nTime 15.600000 and 16.000000\nTime 15.602000 and 16.000000\nTime 15.604000 and 16.000000\nTime 15.605000 and 16.000000\nTime 15.607000 and 16.000000\nTime 15.609000 and 16.000000\nTime 15.611000 and 16.000000\nTime 15.613000 and 16.000000\nTime 15.614000 and 16.000000\nTime 15.616000 and 16.000000\nTime 15.617000 and 16.000000\nTime 15.619000 and 16.000000\nTime 15.621000 and 16.000000\nTime 15.623000 and 16.000000\nTime 15.625000 and 16.000000\nTime 15.626000 and 16.000000\nTime 15.628000 and 16.000000\nTime 15.630000 and 16.000000\nTime 15.631000 and 16.000000\nTime 15.633000 and 16.000000\nTime 15.634000 and 16.000000\nTime 15.636000 and 16.000000\nTime 15.638000 and 16.000000\nTime 15.639000 and 16.000000\nTime 15.641000 and 16.000000\nTime 15.643000 and 16.000000\nTime 15.645000 and 16.000000\nTime 15.648000 and 16.000000\nTime 15.650000 and 16.000000\nTime 15.667000 and 16.000000\nTime 15.668000 and 16.000000\nTime 15.686000 and 16.000000\nTime 15.687000 and 16.000000\nTime 15.701000 and 16.000000\nTime 15.703000 and 16.000000\nTime 15.720000 and 16.000000\nTime 15.736000 and 16.000000\nTime 15.753000 and 16.000000\nTime 15.769000 and 16.000000\nTime 15.784000 and 16.000000\nTime 15.786000 and 16.000000\nTime 15.787000 and 16.000000\nTime 15.789000 and 16.000000\nTime 15.791000 and 16.000000\nTime 15.793000 and 16.000000\nTime 15.794000 and 16.000000\nTime 15.796000 and 16.000000\nTime 15.797000 and 16.000000\nTime 15.799000 and 16.000000\nTime 15.800000 and 16.000000\nTime 15.802000 and 16.000000\nTime 15.804000 and 16.000000\nTime 15.805000 and 16.000000\nTime 15.807000 and 16.000000\nTime 15.809000 and 16.000000\nTime 15.810000 and 16.000000\nTime 15.812000 and 16.000000\nTime 15.813000 and 16.000000\nTime 15.815000 and 16.000000\nTime 15.817000 and 16.000000\nTime 15.818000 and 16.000000\nTime 15.820000 and 16.000000\nTime 15.821000 and 16.000000\nTime 15.823000 and 16.000000\nTime 15.825000 and 16.000000\nTime 15.826000 and 16.000000\nTime 15.828000 and 16.000000\nTime 15.829000 and 16.000000\nTime 15.831000 and 16.000000\nTime 15.832000 and 16.000000\nTime 15.834000 and 16.000000\nTime 15.836000 and 16.000000\nTime 15.838000 and 16.000000\nTime 15.839000 and 16.000000\nTime 15.841000 and 16.000000\nTime 15.842000 and 16.000000\nTime 15.844000 and 16.000000\nTime 15.847000 and 16.000000\nTime 15.850000 and 16.000000\nTime 15.870000 and 16.000000\nTime 15.882000 and 16.000000\nTime 15.886000 and 16.000000\nTime 15.903000 and 16.000000\nTime 15.920000 and 16.000000\nTime 15.937000 and 16.000000\nTime 15.953000 and 16.000000\nTime 15.968000 and 16.000000\nTime 15.984000 and 16.000000\nTime 15.985000 and 16.000000\nTime 15.987000 and 16.000000\nTime 15.988000 and 16.000000\nTime 15.990000 and 16.000000\nTime 15.992000 and 16.000000\nTime 15.993000 and 16.000000\nTime 15.995000 and 16.000000\nTime 15.996000 and 16.000000\nTime 15.998000 and 16.000000\nTime 15.999000 and 16.000000\nTime 16.000999 and 16.000000\nSampling\nTime 16.002001 and 17.000000\nTime 16.004000 and 17.000000\nTime 16.006001 and 17.000000\nTime 16.007999 and 17.000000\nTime 16.009001 and 17.000000\nTime 16.011000 and 17.000000\nTime 16.011999 and 17.000000\nTime 16.014000 and 17.000000\nTime 16.016001 and 17.000000\nTime 16.018000 and 17.000000\nTime 16.018999 and 17.000000\nTime 16.021000 and 17.000000\nTime 16.021999 and 17.000000\nTime 16.024000 and 17.000000\nTime 16.025000 and 17.000000\nTime 16.027000 and 17.000000\nTime 16.028999 and 17.000000\nTime 16.030001 and 17.000000\nTime 16.032000 and 17.000000\nTime 16.033001 and 17.000000\nTime 16.034000 and 17.000000\nTime 16.035999 and 17.000000\nTime 16.038000 and 17.000000\nTime 16.040001 and 17.000000\nTime 16.042000 and 17.000000\nTime 16.042999 and 17.000000\nTime 16.045000 and 17.000000\nTime 16.047001 and 17.000000\nTime 16.049999 and 17.000000\nTime 16.052999 and 17.000000\nTime 16.070000 and 17.000000\nTime 16.087000 and 17.000000\nTime 16.104000 and 17.000000\nTime 16.121000 and 17.000000\nTime 16.138000 and 17.000000\nTime 16.155001 and 17.000000\nTime 16.170000 and 17.000000\nTime 16.181999 and 17.000000\nTime 16.183001 and 17.000000\nTime 16.184999 and 17.000000\nTime 16.186001 and 17.000000\nTime 16.188000 and 17.000000\nTime 16.190001 and 17.000000\nTime 16.191000 and 17.000000\nTime 16.193001 and 17.000000\nTime 16.194000 and 17.000000\nTime 16.195999 and 17.000000\nTime 16.197001 and 17.000000\nTime 16.200001 and 17.000000\nTime 16.202000 and 17.000000\nTime 16.202999 and 17.000000\nTime 16.205000 and 17.000000\nTime 16.205999 and 17.000000\nTime 16.208000 and 17.000000\nTime 16.209000 and 17.000000\nTime 16.211000 and 17.000000\nTime 16.212000 and 17.000000\nTime 16.214001 and 17.000000\nTime 16.215000 and 17.000000\nTime 16.216999 and 17.000000\nTime 16.218000 and 17.000000\nTime 16.219999 and 17.000000\nTime 16.221001 and 17.000000\nTime 16.223000 and 17.000000\nTime 16.224001 and 17.000000\nTime 16.226000 and 17.000000\nTime 16.226999 and 17.000000\nTime 16.229000 and 17.000000\nTime 16.230000 and 17.000000\nTime 16.232000 and 17.000000\nTime 16.233000 and 17.000000\nTime 16.235001 and 17.000000\nTime 16.236000 and 17.000000\nTime 16.238001 and 17.000000\nTime 16.240000 and 17.000000\nTime 16.240999 and 17.000000\nTime 16.243000 and 17.000000\nTime 16.245001 and 17.000000\nTime 16.246000 and 17.000000\nTime 16.247999 and 17.000000\nTime 16.252001 and 17.000000\nTime 16.254999 and 17.000000\nTime 16.271000 and 17.000000\nTime 16.288000 and 17.000000\nTime 16.304001 and 17.000000\nTime 16.318001 and 17.000000\nTime 16.336000 and 17.000000\nTime 16.353001 and 17.000000\nTime 16.368999 and 17.000000\nTime 16.385000 and 17.000000\nTime 16.400999 and 17.000000\nTime 16.402000 and 17.000000\nTime 16.403999 and 17.000000\nTime 16.405001 and 17.000000\nTime 16.407000 and 17.000000\nTime 16.408001 and 17.000000\nTime 16.410000 and 17.000000\nTime 16.410999 and 17.000000\nTime 16.413000 and 17.000000\nTime 16.414000 and 17.000000\nTime 16.416000 and 17.000000\nTime 16.417000 and 17.000000\nTime 16.419001 and 17.000000\nTime 16.420000 and 17.000000\nTime 16.422001 and 17.000000\nTime 16.424000 and 17.000000\nTime 16.424999 and 17.000000\nTime 16.427000 and 17.000000\nTime 16.427999 and 17.000000\nTime 16.430000 and 17.000000\nTime 16.431000 and 17.000000\nTime 16.433001 and 17.000000\nTime 16.434000 and 17.000000\nTime 16.436001 and 17.000000\nTime 16.437000 and 17.000000\nTime 16.438999 and 17.000000\nTime 16.440001 and 17.000000\nTime 16.441999 and 17.000000\nTime 16.443001 and 17.000000\nTime 16.445000 and 17.000000\nTime 16.445999 and 17.000000\nTime 16.448000 and 17.000000\nTime 16.448999 and 17.000000\nTime 16.452999 and 17.000000\nTime 16.455999 and 17.000000\nTime 16.487000 and 17.000000\nTime 16.503000 and 17.000000\nTime 16.520000 and 17.000000\nTime 16.537001 and 17.000000\nTime 16.555000 and 17.000000\nTime 16.572001 and 17.000000\nTime 16.583000 and 17.000000\nTime 16.584999 and 17.000000\nTime 16.594999 and 17.000000\nTime 16.597000 and 17.000000\nTime 16.598000 and 17.000000\nTime 16.600000 and 17.000000\nTime 16.601999 and 17.000000\nTime 16.603001 and 17.000000\nTime 16.605000 and 17.000000\nTime 16.606001 and 17.000000\nTime 16.608000 and 17.000000\nTime 16.610001 and 17.000000\nTime 16.611000 and 17.000000\nTime 16.613001 and 17.000000\nTime 16.615000 and 17.000000\nTime 16.617001 and 17.000000\nTime 16.632999 and 17.000000\nTime 16.635000 and 17.000000\nTime 16.636000 and 17.000000\nTime 16.638000 and 17.000000\nTime 16.639000 and 17.000000\nTime 16.641001 and 17.000000\nTime 16.642000 and 17.000000\nTime 16.643999 and 17.000000\nTime 16.646000 and 17.000000\nTime 16.648001 and 17.000000\nTime 16.649000 and 17.000000\nTime 16.652000 and 17.000000\nTime 16.665001 and 17.000000\nTime 16.688000 and 17.000000\nTime 16.705999 and 17.000000\nTime 16.719000 and 17.000000\nTime 16.737000 and 17.000000\nTime 16.754000 and 17.000000\nTime 16.770000 and 17.000000\nTime 16.771999 and 17.000000\nTime 16.782000 and 17.000000\nTime 16.784000 and 17.000000\nTime 16.785000 and 17.000000\nTime 16.787001 and 17.000000\nTime 16.788000 and 17.000000\nTime 16.790001 and 17.000000\nTime 16.791000 and 17.000000\nTime 16.792999 and 17.000000\nTime 16.795000 and 17.000000\nTime 16.796000 and 17.000000\nTime 16.798000 and 17.000000\nTime 16.799000 and 17.000000\nTime 16.801001 and 17.000000\nTime 16.802000 and 17.000000\nTime 16.804001 and 17.000000\nTime 16.805000 and 17.000000\nTime 16.806999 and 17.000000\nTime 16.809000 and 17.000000\nTime 16.809999 and 17.000000\nTime 16.812000 and 17.000000\nTime 16.813000 and 17.000000\nTime 16.815001 and 17.000000\nTime 16.816000 and 17.000000\nTime 16.818001 and 17.000000\nTime 16.819000 and 17.000000\nTime 16.820999 and 17.000000\nTime 16.822001 and 17.000000\nTime 16.823999 and 17.000000\nTime 16.825001 and 17.000000\nTime 16.827000 and 17.000000\nTime 16.827999 and 17.000000\nTime 16.830000 and 17.000000\nTime 16.830999 and 17.000000\nTime 16.833000 and 17.000000\nTime 16.834000 and 17.000000\nTime 16.836000 and 17.000000\nTime 16.837000 and 17.000000\nTime 16.839001 and 17.000000\nTime 16.840000 and 17.000000\nTime 16.841999 and 17.000000\nTime 16.843000 and 17.000000\nTime 16.844999 and 17.000000\nTime 16.846001 and 17.000000\nTime 16.848000 and 17.000000\nTime 16.849001 and 17.000000\nTime 16.851000 and 17.000000\nTime 16.853001 and 17.000000\nTime 16.854000 and 17.000000\nTime 16.858000 and 17.000000\nTime 16.861000 and 17.000000\nTime 16.886000 and 17.000000\nTime 16.903000 and 17.000000\nTime 16.920000 and 17.000000\nTime 16.937000 and 17.000000\nTime 16.955000 and 17.000000\nTime 16.969999 and 17.000000\nTime 16.971001 and 17.000000\nTime 16.982000 and 17.000000\nTime 16.983999 and 17.000000\nTime 16.985001 and 17.000000\nTime 16.987000 and 17.000000\nTime 16.988001 and 17.000000\nTime 16.990000 and 17.000000\nTime 16.990999 and 17.000000\nTime 16.993000 and 17.000000\nTime 16.993999 and 17.000000\nTime 16.996000 and 17.000000\nTime 16.997000 and 17.000000\nTime 16.999001 and 17.000000\nTime 17.000000 and 17.000000\nTime 17.002001 and 17.000000\nSampling\nTime 17.003000 and 18.000000\nTime 17.004999 and 18.000000\nTime 17.006001 and 18.000000\nTime 17.007999 and 18.000000\nTime 17.009001 and 18.000000\nTime 17.011000 and 18.000000\nTime 17.011999 and 18.000000\nTime 17.014000 and 18.000000\nTime 17.014999 and 18.000000\nTime 17.017000 and 18.000000\nTime 17.018000 and 18.000000\nTime 17.020000 and 18.000000\nTime 17.021000 and 18.000000\nTime 17.023001 and 18.000000\nTime 17.024000 and 18.000000\nTime 17.025999 and 18.000000\nTime 17.027000 and 18.000000\nTime 17.028999 and 18.000000\nTime 17.030001 and 18.000000\nTime 17.032000 and 18.000000\nTime 17.033001 and 18.000000\nTime 17.035000 and 18.000000\nTime 17.037001 and 18.000000\nTime 17.038000 and 18.000000\nTime 17.040001 and 18.000000\nTime 17.041000 and 18.000000\nTime 17.042999 and 18.000000\nTime 17.044001 and 18.000000\nTime 17.046000 and 18.000000\nTime 17.047001 and 18.000000\nTime 17.049000 and 18.000000\nTime 17.049999 and 18.000000\nTime 17.052000 and 18.000000\nTime 17.052999 and 18.000000\nTime 17.055000 and 18.000000\nTime 17.056000 and 18.000000\nTime 17.059999 and 18.000000\nTime 17.063000 and 18.000000\nTime 17.084999 and 18.000000\nTime 17.103001 and 18.000000\nTime 17.118999 and 18.000000\nTime 17.136999 and 18.000000\nTime 17.153999 and 18.000000\nTime 17.171000 and 18.000000\nTime 17.186001 and 18.000000\nTime 17.187000 and 18.000000\nTime 17.198000 and 18.000000\nTime 17.198999 and 18.000000\nTime 17.201000 and 18.000000\nTime 17.202999 and 18.000000\nTime 17.204000 and 18.000000\nTime 17.205999 and 18.000000\nTime 17.207001 and 18.000000\nTime 17.209000 and 18.000000\nTime 17.209999 and 18.000000\nTime 17.212000 and 18.000000\nTime 17.212999 and 18.000000\nTime 17.215000 and 18.000000\nTime 17.216000 and 18.000000\nTime 17.218000 and 18.000000\nTime 17.219000 and 18.000000\nTime 17.221001 and 18.000000\nTime 17.223000 and 18.000000\nTime 17.225000 and 18.000000\nTime 17.226000 and 18.000000\nTime 17.228001 and 18.000000\nTime 17.229000 and 18.000000\nTime 17.231001 and 18.000000\nTime 17.233000 and 18.000000\nTime 17.233999 and 18.000000\nTime 17.236000 and 18.000000\nTime 17.237000 and 18.000000\nTime 17.239000 and 18.000000\nTime 17.240000 and 18.000000\nTime 17.242001 and 18.000000\nTime 17.243000 and 18.000000\nTime 17.245001 and 18.000000\nTime 17.246000 and 18.000000\nTime 17.250999 and 18.000000\nTime 17.253000 and 18.000000\nTime 17.266001 and 18.000000\nTime 17.267000 and 18.000000\nTime 17.283001 and 18.000000\nExiting\n\nProcess finished with exit code 0\n",
			"settings":
			{
				"buffer_size": 111077,
				"line_ending": "Unix",
				"name": "/Users/erikparreira/Dropbox/Programming/networkpla"
			}
		},
		{
			"contents": "Searching 547 files for \"mFrameStartTimef\"\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/timing/Timing.h:\n   17      float GetTimef() const { return static_cast<float>( GetTime() ); }\n   18  \n   19:     float GetFrameStartTime() const { return mFrameStartTimef; }\n   20  \n   21      static Timing sInstance;\n   ..\n   26  \n   27      double mLastFrameStartTime;\n   28:     float mFrameStartTimef;\n   29      double mPerfCountDuration;\n   30  };\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/timing/Timing.cpp:\n   40  \n   41      mLastFrameStartTime = currentTime;\n   42:     mFrameStartTimef = static_cast<float>( mLastFrameStartTime );\n   43  }\n   44  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/timing/timing.h:\n   17      float GetTimef() const { return static_cast<float>( GetTime() ); }\n   18  \n   19:     float GetFrameStartTime() const { return mFrameStartTimef; }\n   20  \n   21      static Timing sInstance;\n   ..\n   26  \n   27      double mLastFrameStartTime;\n   28:     float mFrameStartTimef;\n   29      double mPerfCountDuration;\n   30  };\n\n5 matches across 3 files\n\n\nSearching 548 files for \"Update\"\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/scratch.cpp:\n  111  \n  112  void Client::DoFrame() {\n  113:     InputManager::sInstance->Update();\n  114      \n  115      Engine::DoFrame();\n  ...\n  184              }\n  185          } else {\n  186:             Timing::sInstance.Update();\n  187              std::cout << Timing::sInstance.GetTime() << std::endl;\n  188              \n  ...\n  194  }\n  195  \n  196: void Engine::DoFrame() { World::sInstance->Update(); }\n  197  \n  198  \n  ...\n  249  }\n  250  \n  251: void RoboCat::Update() {}\n  252  \n  253  void RoboCat::ProcessCollisions() {\n  ...\n  440      virtual\tRoboCat*\tGetAsCat()\t{ return this; }\n  441      \n  442:     virtual void Update()\toverride;\n  443      \n  444      void ProcessInput( float inDeltaTime, const InputState& inInputState );\n  ...\n  516      virtual void HandleDying() override;\n  517      \n  518:     virtual void Update();\n  519      \n  520      void SetCatControlType(ECatControlType inCatControlType) {\n  ...\n  550  }\n  551  \n  552: void RoboCatServer::Update()\n  553  {\n  554:     RoboCat::Update();\n  555      \n  556      Vector3 oldLocation = GetLocation();\n  ...\n  661  \n  662  \n  663: void RoboCatClient::Update()\n  664  {\n  665      //is this the cat owned by us?\n  ...\n  925      static\tGameObjectPtr\tStaticCreate()\t\t{ return GameObjectPtr( new RoboCatClient() ); }\n  926      \n  927:     virtual void Update();\n  928      virtual void\tHandleDying() override;\n  929      \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/.idea/misc.xml:\n   13      <OptionsSetting value=\"true\" id=\"Remove\" />\n   14      <OptionsSetting value=\"true\" id=\"Checkout\" />\n   15:     <OptionsSetting value=\"true\" id=\"Update\" />\n   16      <OptionsSetting value=\"true\" id=\"Status\" />\n   17      <OptionsSetting value=\"true\" id=\"Edit\" />\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/.idea/workspace.xml:\n  402      <OptionsSetting value=\"true\" id=\"Remove\" />\n  403      <OptionsSetting value=\"true\" id=\"Checkout\" />\n  404:     <OptionsSetting value=\"true\" id=\"Update\" />\n  405      <OptionsSetting value=\"true\" id=\"Status\" />\n  406      <OptionsSetting value=\"true\" id=\"Edit\" />\n  ...\n  889        <option name=\"number\" value=\"Default\" />\n  890        <option name=\"presentableId\" value=\"Default\" />\n  891:       <updated>1471584186011</updated>\n  892        <workItem from=\"1471584188000\" duration=\"1750000\" />\n  893        <workItem from=\"1471804903560\" duration=\"1094000\" />\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/bin/Debug/networkplaygroundclient:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/bin/Debug/networkplaygroundserver:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/CHANGES:\n   82  \n   83   * Custom matchers defined using MatcherInterface or MakePolymorphicMatcher()\n   84:    need to be updated after upgrading to Google Mock 1.5.0; matchers defined\n   85     using MATCHER or MATCHER_P* aren't affected.\n   86   * Dropped support for 'make install'.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/README.md:\n  291  \n  292  If you have custom matchers defined using `MatcherInterface` or\n  293: `MakePolymorphicMatcher()`, you'll need to update their definitions to\n  294  use the new matcher API (\n  295  [monomorphic](http://code.google.com/p/googlemock/wiki/CookBook#Writing_New_Monomorphic_Matchers),\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/CookBook.md:\n  298    1. During the constructor or destructor of `MockFoo`, the mock object is _not_ nice or strict.  This may cause surprises if the constructor or destructor calls a mock method on `this` object. (This behavior, however, is consistent with C++'s general rule: if a constructor or destructor calls a virtual method of `this` object, that method is treated as non-virtual.  In other words, to the base class's constructor or destructor, `this` object behaves like an instance of the base class, not the derived class.  This rule is required for safety.  Otherwise a base constructor may use members of a derived class before they are initialized, or a base destructor may use members of a derived class after they have been destroyed.)\n  299  \n  300: Finally, you should be **very cautious** about when to use naggy or strict mocks, as they tend to make tests more brittle and harder to maintain. When you refactor your code without changing its externally visible behavior, ideally you should't need to update any tests. If your code interacts with a naggy mock, however, you may start to get spammed with warnings as the result of your change. Worse, if your code interacts with a strict mock, your tests may start to fail and you'll be forced to fix them. Our general recommendation is to use nice mocks (not yet the default) most of the time, use naggy mocks (the current default) when developing or debugging tests, and use strict mocks only as the last resort.\n  301  \n  302  ## Simplifying the Interface without Breaking Existing Code ##\n  ...\n 1733    EXPECT_CALL(my_mock, GetPrevValue())\n 1734        .WillRepeatedly(ReturnPointee(&previous_value));\n 1735:   EXPECT_CALL(my_mock, UpdateValue(_))\n 1736        .WillRepeatedly(SaveArg<0>(&previous_value));\n 1737:   my_mock.DoSomethingToUpdateValue();\n 1738  ```\n 1739  \n 1740: Here `my_mock.GetPrevValue()` will always return the argument of the last `UpdateValue()` call.\n 1741  \n 1742  ## Setting the Default Value for a Return Type ##\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/ForDummies.md:\n   48  \n   49  # A Case for Mock Turtles #\n   50: Let's look at an example. Suppose you are developing a graphics program that relies on a LOGO-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about Dependency Injection and know the right thing to do: instead of having your application talk to the drawing API directly, wrap the API in an interface (say, `Turtle`) and code to that interface:\n   51  \n   52  ```\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/v1_5/CookBook.md:\n 1588    EXPECT_CALL(my_mock, GetPrevValue())\n 1589        .WillRepeatedly(ReturnPointee(&previous_value));\n 1590:   EXPECT_CALL(my_mock, UpdateValue(_))\n 1591        .WillRepeatedly(SaveArg<0>(&previous_value));\n 1592:   my_mock.DoSomethingToUpdateValue();\n 1593  ```\n 1594  \n 1595: Here `my_mock.GetPrevValue()` will always return the argument of the last `UpdateValue()` call.\n 1596  \n 1597  ## Setting the Default Value for a Return Type ##\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/v1_5/ForDummies.md:\n   48  \n   49  # A Case for Mock Turtles #\n   50: Let's look at an example. Suppose you are developing a graphics program that relies on a LOGO-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about Dependency Injection and know the right thing to do: instead of having your application talk to the drawing API directly, wrap the API in an interface (say, `Turtle`) and code to that interface:\n   51  \n   52  ```\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/v1_6/CookBook.md:\n 1656    EXPECT_CALL(my_mock, GetPrevValue())\n 1657        .WillRepeatedly(ReturnPointee(&previous_value));\n 1658:   EXPECT_CALL(my_mock, UpdateValue(_))\n 1659        .WillRepeatedly(SaveArg<0>(&previous_value));\n 1660:   my_mock.DoSomethingToUpdateValue();\n 1661  ```\n 1662  \n 1663: Here `my_mock.GetPrevValue()` will always return the argument of the last `UpdateValue()` call.\n 1664  \n 1665  ## Setting the Default Value for a Return Type ##\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/v1_6/ForDummies.md:\n   48  \n   49  # A Case for Mock Turtles #\n   50: Let's look at an example. Suppose you are developing a graphics program that relies on a LOGO-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about Dependency Injection and know the right thing to do: instead of having your application talk to the drawing API directly, wrap the API in an interface (say, `Turtle`) and code to that interface:\n   51  \n   52  ```\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/v1_7/CookBook.md:\n  298    1. During the constructor or destructor of `MockFoo`, the mock object is _not_ nice or strict.  This may cause surprises if the constructor or destructor calls a mock method on `this` object. (This behavior, however, is consistent with C++'s general rule: if a constructor or destructor calls a virtual method of `this` object, that method is treated as non-virtual.  In other words, to the base class's constructor or destructor, `this` object behaves like an instance of the base class, not the derived class.  This rule is required for safety.  Otherwise a base constructor may use members of a derived class before they are initialized, or a base destructor may use members of a derived class after they have been destroyed.)\n  299  \n  300: Finally, you should be **very cautious** about when to use naggy or strict mocks, as they tend to make tests more brittle and harder to maintain. When you refactor your code without changing its externally visible behavior, ideally you should't need to update any tests. If your code interacts with a naggy mock, however, you may start to get spammed with warnings as the result of your change. Worse, if your code interacts with a strict mock, your tests may start to fail and you'll be forced to fix them. Our general recommendation is to use nice mocks (not yet the default) most of the time, use naggy mocks (the current default) when developing or debugging tests, and use strict mocks only as the last resort.\n  301  \n  302  ## Simplifying the Interface without Breaking Existing Code ##\n  ...\n 1684    EXPECT_CALL(my_mock, GetPrevValue())\n 1685        .WillRepeatedly(ReturnPointee(&previous_value));\n 1686:   EXPECT_CALL(my_mock, UpdateValue(_))\n 1687        .WillRepeatedly(SaveArg<0>(&previous_value));\n 1688:   my_mock.DoSomethingToUpdateValue();\n 1689  ```\n 1690  \n 1691: Here `my_mock.GetPrevValue()` will always return the argument of the last `UpdateValue()` call.\n 1692  \n 1693  ## Setting the Default Value for a Return Type ##\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/v1_7/ForDummies.md:\n   48  \n   49  # A Case for Mock Turtles #\n   50: Let's look at an example. Suppose you are developing a graphics program that relies on a LOGO-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about Dependency Injection and know the right thing to do: instead of having your application talk to the drawing API directly, wrap the API in an interface (say, `Turtle`) and code to that interface:\n   51  \n   52  ```\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/include/gmock/gmock.h:\n   79  //\n   80  // No value is returned.  Instead, the Google Mock flag variables are\n   81: // updated.\n   82  //\n   83  // Since Google Test is needed for Google Mock to work, this function\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/scripts/upload.py:\n   95  \n   96  \n   97: def StatusUpdate(msg):\n   98    \"\"\"Print a status message to stdout.\n   99  \n  ...\n  349      super(HttpRpcServer, self)._Authenticate()\n  350      if self.save_cookies:\n  351:       StatusUpdate(\"Saving authentication cookies to %s\" % self.cookie_file)\n  352        self.cookie_jar.save()\n  353  \n  ...\n  372            self.cookie_jar.load()\n  373            self.authenticated = True\n  374:           StatusUpdate(\"Loaded authentication cookies from %s\" %\n  375                         self.cookie_file)\n  376          except (cookielib.LoadError, IOError):\n  ...\n  384        os.chmod(self.cookie_file, 0600)\n  385      else:\n  386:       # Don't save cookies across runs of update.py.\n  387        self.cookie_jar = cookielib.CookieJar()\n  388      opener.add_handler(urllib2.HTTPCookieProcessor(self.cookie_jar))\n  ...\n  694                                        content_type=ctype)\n  695        if not response_body.startswith(\"OK\"):\n  696:         StatusUpdate(\"  --> %s\" % response_body)\n  697          sys.exit(1)\n  698  \n  ...\n  978              base_content = self._CollapseKeywords(base_content, keywords)\n  979      else:\n  980:       StatusUpdate(\"svn status returned unexpected output: %s\" % status)\n  981        sys.exit(1)\n  982      return base_content, new_content, is_binary, status[0:5]\n  ...\n 1201      lines = response_body.splitlines()\n 1202      if not lines or lines[0] != \"OK\":\n 1203:       StatusUpdate(\"  --> %s\" % response_body)\n 1204        sys.exit(1)\n 1205      rv.append([lines[1], patch[0]])\n ....\n 1357    else:\n 1358      msg = response_body\n 1359:   StatusUpdate(msg)\n 1360    if not response_body.startswith(\"Issue created.\") and \\\n 1361:   not response_body.startswith(\"Issue updated.\"):\n 1362      sys.exit(0)\n 1363    issue = msg[msg.rfind(\"/\")+1:]\n ....\n 1380    except KeyboardInterrupt:\n 1381      print\n 1382:     StatusUpdate(\"Interrupted.\")\n 1383      sys.exit(1)\n 1384  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/src/gmock.cc:\n  166  //\n  167  // No value is returned.  Instead, the Google Mock flag variables are\n  168: // updated.\n  169  //\n  170  // Since Google Test is needed for Google Mock to work, this function\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/test/gmock_stress_test.cc:\n  127    // p1 and p2 point to the same, shared thing.  One thread resets p1.\n  128    // Another thread assigns to p2.  This will cause the same\n  129:   // underlying \"ring\" to be updated concurrently.\n  130    linked_ptr<Derived1> p1(p0);\n  131    linked_ptr<Derived1> p2(p0);\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/README.md:\n  119  above, you need to either:\n  120  \n  121:  * update the SDK configuration options in xcode/Config/General.xconfig.\n  122     Comment options `SDKROOT`, `MACOS_DEPLOYMENT_TARGET`, and `GCC_VERSION`. If\n  123     you choose this route you lose the ability to target earlier versions\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/cmake/internal_utils.cmake:\n   16  #\n   17  # This must be a macro(), as inside a function string() can only\n   18: # update variables in the function scope.\n   19  macro(fix_default_compiler_settings_)\n   20    if (MSVC)\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/DevGuide.md:\n   87  \n   88  Some of Google Test's source files are generated by the Pump tool (a\n   89: Python script).  If you need to update such files, please modify the\n   90  source (`foo.h.pump`) and re-generate the C++ file using Pump.  You\n   91  can read the PumpManual for details.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/FAQ.md:\n  950  Test project to match your project's.\n  951  \n  952: To update this setting open the project properties in the Visual\n  953  Studio IDE then select the branch Configuration Properties | C/C++ |\n  954  Code Generation and change the option \"Runtime Library\".  You may also try\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_5_FAQ.md:\n  846  Test project to match your project's.\n  847  \n  848: To update this setting open the project properties in the Visual\n  849  Studio IDE then select the branch Configuration Properties | C/C++ |\n  850  Code Generation and change the option \"Runtime Library\".  You may also try\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_5_XcodeGuide.md:\n   43  \n   44    * **Option 1** --- The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the \"Add->Existing Framework...\" from the context menu or \"Project->Add...\" from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.\n   45:   * **Option 2** --- If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).\n   46  \n   47  # Make a Test Target #\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_6_FAQ.md:\n  944  Test project to match your project's.\n  945  \n  946: To update this setting open the project properties in the Visual\n  947  Studio IDE then select the branch Configuration Properties | C/C++ |\n  948  Code Generation and change the option \"Runtime Library\".  You may also try\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_6_XcodeGuide.md:\n   43  \n   44    * **Option 1** --- The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the \"Add->Existing Framework...\" from the context menu or \"Project->Add...\" from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.\n   45:   * **Option 2** --- If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).\n   46  \n   47  # Make a Test Target #\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_7_FAQ.md:\n  944  Test project to match your project's.\n  945  \n  946: To update this setting open the project properties in the Visual\n  947  Studio IDE then select the branch Configuration Properties | C/C++ |\n  948  Code Generation and change the option \"Runtime Library\".  You may also try\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_7_XcodeGuide.md:\n   43  \n   44    * **Option 1** --- The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the \"Add->Existing Framework...\" from the context menu or \"Project->Add...\" from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.\n   45:   * **Option 2** --- If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).\n   46  \n   47  # Make a Test Target #\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/XcodeGuide.md:\n   43  \n   44    * **Option 1** --- The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the \"Add->Existing Framework...\" from the context menu or \"Project->Add...\" from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.\n   45:   * **Option 2** --- If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).\n   46  \n   47  # Make a Test Target #\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/gtest.h:\n  587    // a non-fatal failure if invalid (e.g., if it conflicts with reserved\n  588    // key names). If a property is already recorded for the same key, the\n  589:   // value will be updated, rather than storing multiple values for the same\n  590    // key.  xml_element specifies the element for which the property is being\n  591    // recorded and is used for validation.\n  ...\n  615  \n  616    // Protects mutable state of the property vector and of owned\n  617:   // properties, whose values may be updated.\n  618    internal::Mutex test_properites_mutex_;\n  619  \n  ...\n 1277    // from SetUpTestCase or TearDownTestCase, or to the global property set\n 1278    // when invoked elsewhere.  If the result already contains a property with\n 1279:   // the same key, the value will be updated.\n 1280    void RecordProperty(const std::string& key, const std::string& value);\n 1281  \n ....\n 1358  //\n 1359  // No value is returned.  Instead, the Google Test flag variables are\n 1360: // updated.\n 1361  //\n 1362  // Calling the function for the second time has no user-visible effect.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/internal/gtest-param-util.h:\n  327      // can return a temporary object (and of type other then T), so just\n  328      // having \"return &*iterator_;\" doesn't work.\n  329:     // value_ is updated here and not in Advance() because Advance()\n  330      // can advance iterator_ beyond the end of the range, and we cannot\n  331      // detect that fact. The client code, on the other hand, is\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/scripts/gen_gtest_pred_impl.py:\n  310    f.close()\n  311  \n  312:   print 'File %s has been updated.' % path\n  313  \n  314  \n  315  def GenerateHeader(n):\n  316:   \"\"\"Given the maximum arity n, updates the header file that implements\n  317    the predicate assertions.\"\"\"\n  318  \n  ...\n  643      # A map that defines the values used in the test template.\n  644      defs = DEFS.copy()\n  645:     defs.update({\n  646        'assert' : assrt,\n  647        'assertion' : assertion,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/scripts/release_docs.py:\n  135        os.system(command)\n  136  \n  137:   def UpdateLinksInBranchedFiles(self):\n  138  \n  139      for f in self.files_to_branch:\n  ...\n  152    brancher = WikiBrancher(sys.argv[1])\n  153    brancher.BranchFiles()\n  154:   brancher.UpdateLinksInBranchedFiles()\n  155  \n  156  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/scripts/upload.py:\n   95  \n   96  \n   97: def StatusUpdate(msg):\n   98    \"\"\"Print a status message to stdout.\n   99  \n  ...\n  349      super(HttpRpcServer, self)._Authenticate()\n  350      if self.save_cookies:\n  351:       StatusUpdate(\"Saving authentication cookies to %s\" % self.cookie_file)\n  352        self.cookie_jar.save()\n  353  \n  ...\n  372            self.cookie_jar.load()\n  373            self.authenticated = True\n  374:           StatusUpdate(\"Loaded authentication cookies from %s\" %\n  375                         self.cookie_file)\n  376          except (cookielib.LoadError, IOError):\n  ...\n  384        os.chmod(self.cookie_file, 0600)\n  385      else:\n  386:       # Don't save cookies across runs of update.py.\n  387        self.cookie_jar = cookielib.CookieJar()\n  388      opener.add_handler(urllib2.HTTPCookieProcessor(self.cookie_jar))\n  ...\n  694                                        content_type=ctype)\n  695        if not response_body.startswith(\"OK\"):\n  696:         StatusUpdate(\"  --> %s\" % response_body)\n  697          sys.exit(1)\n  698  \n  ...\n  978              base_content = self._CollapseKeywords(base_content, keywords)\n  979      else:\n  980:       StatusUpdate(\"svn status returned unexpected output: %s\" % status)\n  981        sys.exit(1)\n  982      return base_content, new_content, is_binary, status[0:5]\n  ...\n 1201      lines = response_body.splitlines()\n 1202      if not lines or lines[0] != \"OK\":\n 1203:       StatusUpdate(\"  --> %s\" % response_body)\n 1204        sys.exit(1)\n 1205      rv.append([lines[1], patch[0]])\n ....\n 1357    else:\n 1358      msg = response_body\n 1359:   StatusUpdate(msg)\n 1360    if not response_body.startswith(\"Issue created.\") and \\\n 1361:   not response_body.startswith(\"Issue updated.\"):\n 1362      sys.exit(0)\n 1363    issue = msg[msg.rfind(\"/\")+1:]\n ....\n 1380    except KeyboardInterrupt:\n 1381      print\n 1382:     StatusUpdate(\"Interrupted.\")\n 1383      sys.exit(1)\n 1384  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/src/gtest-internal-inl.h:\n  712    // context of a test or a test case, or to the global property set. If the\n  713    // result already contains a property with the same key, the value will be\n  714:   // updated.\n  715    void RecordProperty(const TestProperty& test_property);\n  716  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/src/gtest-port.cc:\n  292          critical_section_ = new CRITICAL_SECTION;\n  293          ::InitializeCriticalSection(critical_section_);\n  294:         // Updates the critical_section_init_phase_ to 2 to signal\n  295          // initialization complete.\n  296          GTEST_CHECK_(::InterlockedCompareExchange(\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/src/gtest.cc:\n 2462  }  // namespace internal\n 2463  \n 2464: // Runs the test and updates the test result.\n 2465  void Test::Run() {\n 2466    if (!HasSameFixtureClass()) return;\n ....\n 4172  // from SetUpTestCase or TearDownTestCase, or to the global property set\n 4173  // when invoked elsewhere.  If the result already contains a property with\n 4174: // the same key, the value will be updated.\n 4175  void UnitTest::RecordProperty(const std::string& key,\n 4176                                const std::string& value) {\n ....\n 4369  // from SetUpTestCase/TearDownTestCase, or to the global property set\n 4370  // otherwise.  If the result already contains a property with the same key,\n 4371: // the value will be updated.\n 4372  void UnitTestImpl::RecordProperty(const TestProperty& test_property) {\n 4373    std::string xml_element;\n ....\n 5365  //\n 5366  // No value is returned.  Instead, the Google Test flag variables are\n 5367: // updated.\n 5368  //\n 5369  // Calling the function for the second time has no user-visible effect.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest-param-test_test.cc:\n 1038    // Used in TestGenerationTest test case.\n 1039    AddGlobalTestEnvironment(TestGenerationTest::Environment::Instance());\n 1040:   // Used in GeneratorEvaluationTest test case. Tests that the updated value\n 1041    // will be picked up for instantiating tests in GeneratorEvaluationTest.\n 1042    GeneratorEvaluationTest::set_param_value(1);\n ....\n 1046  \n 1047  #if GTEST_HAS_PARAM_TEST\n 1048:   // Used in GeneratorEvaluationTest test case. Tests that value updated\n 1049    // here will NOT be used for instantiating tests in\n 1050    // GeneratorEvaluationTest.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest-port_test.cc:\n  333    ASSERT_EQ(0, pthread_join(thread_id, &dummy));\n  334  \n  335:   // The OS may not immediately report the updated thread count after\n  336    // joining a thread, causing flakiness in this test. To counter that, we\n  337    // wait for up to .5 seconds for the OS to report the correct value.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest-tuple_test.cc:\n  123    n = 1;\n  124    EXPECT_EQ(n, get<1>(t))\n  125:       << \"Changing a underlying variable should update the reference field.\";\n  126  \n  127    // Makes sure that the implementation doesn't do anything funny with\n  ...\n  133    get<1>(t) = 2;\n  134    EXPECT_EQ(2, n)\n  135:       << \"Changing a reference field should update the underlying variable.\";\n  136  }\n  137  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_filter_unittest.py:\n  209    try:\n  210      original_env = environ.copy()\n  211:     environ.update(extra_env)\n  212      return function(*args, **kwargs)\n  213    finally:\n  214      environ.clear()\n  215:     environ.update(original_env)\n  216  \n  217  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_output_test.py:\n  214    # Set and save the environment properly.\n  215    environ = os.environ.copy()\n  216:   environ.update(env_cmd[0])\n  217    p = gtest_test_utils.Subprocess(env_cmd[1], env=environ)\n  218  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_shuffle_test.py:\n   80  \n   81    environ_copy = os.environ.copy()\n   82:   environ_copy.update(extra_env)\n   83  \n   84    return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_stress_test.cc:\n  103  \n  104      // RecordProperty() should interact safely with other threads as well.\n  105:     // The shared_key forces property updates.\n  106      Test::RecordProperty(IdToKey(id, \"string\").c_str(), IdToString(id).c_str());\n  107      Test::RecordProperty(IdToKey(id, \"int\").c_str(), id);\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_test_utils.py:\n  259          for key in dest.keys():\n  260            del dest[key]\n  261:         dest.update(src)\n  262  \n  263        # When 'env' is not None, backup the environment variables and replace\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/WhatsNew.txt:\n   60  * Added an API to get common filesystem paths in SDL_filesystem.h:\n   61      SDL_GetBasePath(), SDL_GetPrefPath()\n   62: * Added an API to do optimized YV12 and IYUV texture updates:\n   63:     SDL_UpdateYUVTexture()\n   64  * Added an API to get the amount of RAM on the system:\n   65      SDL_GetSystemRAM()\n   ..\n   99  \n  100  Android:\n  101: IMPORTANT: You MUST get the updated SDLActivity.java to match C code\n  102  * Moved EGL initialization to native code \n  103  * Fixed the accelerometer axis rotation relative to the device rotation\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_events.h:\n  117      SDL_CONTROLLERDEVICEADDED,         /**< A new Game controller has been inserted into the system */\n  118      SDL_CONTROLLERDEVICEREMOVED,       /**< An opened Game controller has been removed */\n  119:     SDL_CONTROLLERDEVICEREMAPPED,      /**< The controller mapping was updated */\n  120  \n  121      /* Touch events */\n  ...\n  130  \n  131      /* Clipboard events */\n  132:     SDL_CLIPBOARDUPDATE = 0x900, /**< The clipboard changed */\n  133  \n  134      /* Drag and drop events */\n  ...\n  539   *  Pumps the event loop, gathering events from the input devices.\n  540   *\n  541:  *  This function updates the event queue and internal input device state.\n  542   *\n  543   *  This should only be run in the thread that sets the video mode.\n  ...\n  642   *  If the filter returns 1, then the event will be added to the internal queue.\n  643   *  If it returns 0, then the event will be dropped from the queue, but the\n  644:  *  internal state will still be updated.  This allows selective filtering of\n  645   *  dynamically arriving events.\n  646   *\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_gamecontroller.h:\n   47   *  for game controllers, and load appropriate drivers.\n   48   *\n   49:  *  If you would like to receive controller updates while the application\n   50   *  is in the background, you should set the following hint before calling\n   51   *  SDL_Init(): SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS\n   ..\n  128  \n  129  /**\n  130:  *  Add or update an existing mapping configuration\n  131   *\n  132:  * \\return 1 if mapping is added, 0 if updated, -1 on error\n  133   */\n  134  extern DECLSPEC int SDLCALL SDL_GameControllerAddMapping( const char* mappingString );\n  ...\n  190   *  Enable/disable controller event polling.\n  191   *\n  192:  *  If controller events are disabled, you must call SDL_GameControllerUpdate()\n  193   *  yourself and check the state of the controller when you want controller\n  194   *  information.\n  ...\n  199  \n  200  /**\n  201:  *  Update the current state of the open game controllers.\n  202   *\n  203   *  This is called automatically by the event loop if any game controller\n  204   *  events are enabled.\n  205   */\n  206: extern DECLSPEC void SDLCALL SDL_GameControllerUpdate(void);\n  207  \n  208  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_haptic.h:\n 1001   *  \\return The id of the effect on success or -1 on error.\n 1002   *\n 1003:  *  \\sa SDL_HapticUpdateEffect\n 1004   *  \\sa SDL_HapticRunEffect\n 1005   *  \\sa SDL_HapticDestroyEffect\n ....\n 1009  \n 1010  /**\n 1011:  *  \\brief Updates the properties of an effect.\n 1012   *\n 1013   *  Can be used dynamically, although behaviour when dynamically changing\n 1014   *  direction may be strange.  Specifically the effect may reupload itself\n 1015   *  and start playing from the start.  You cannot change the type either when\n 1016:  *  running SDL_HapticUpdateEffect().\n 1017   *\n 1018   *  \\param haptic Haptic device that has the effect.\n 1019:  *  \\param effect Effect to update.\n 1020   *  \\param data New effect properties to use.\n 1021   *  \\return 0 on success or -1 on error.\n ....\n 1025   *  \\sa SDL_HapticDestroyEffect\n 1026   */\n 1027: extern DECLSPEC int SDLCALL SDL_HapticUpdateEffect(SDL_Haptic * haptic,\n 1028                                                     int effect,\n 1029                                                     SDL_HapticEffect * data);\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_hints.h:\n  132  \n  133  /**\n  134:  *  \\brief  A variable controlling whether updates to the SDL screen surface should be synchronized with the vertical refresh, to avoid tearing.\n  135   *\n  136   *  This variable can be set to the following values:\n  ...\n  138   *    \"1\"       - Enable vsync\n  139   *\n  140:  *  By default SDL does not sync screen surface updates with vertical refresh.\n  141   */\n  142  #define SDL_HINT_RENDER_VSYNC               \"SDL_RENDER_VSYNC\"\n  ...\n  266   *\n  267   *  This hint must be set before calling SDL_Init(SDL_INIT_GAMECONTROLLER)\n  268:  *  You can update mappings after the system is initialized with SDL_GameControllerMappingForGUID() and SDL_GameControllerAddMapping()\n  269   */\n  270  #define SDL_HINT_GAMECONTROLLERCONFIG \"SDL_GAMECONTROLLERCONFIG\"\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_joystick.h:\n   56   *  for joysticks, and load appropriate drivers.\n   57   *\n   58:  *  If you would like to receive joystick updates while the application\n   59   *  is in the background, you should set the following hint before calling\n   60   *  SDL_Init(): SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS\n   ..\n  157  \n  158  /**\n  159:  *  Update the current state of the open joysticks.\n  160   *\n  161   *  This is called automatically by the event loop if any joystick\n  162   *  events are enabled.\n  163   */\n  164: extern DECLSPEC void SDLCALL SDL_JoystickUpdate(void);\n  165  \n  166  /**\n  167   *  Enable/disable joystick event polling.\n  168   *\n  169:  *  If joystick events are disabled, you must call SDL_JoystickUpdate()\n  170   *  yourself and check the state of the joystick when you want joystick\n  171   *  information.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_opengl.h:\n  107  \n  108  /* Header file version number, required by OpenGL ABI for Linux */\n  109: /* glext.h last updated $Date: 2010-08-03 01:30:25 -0700 (Tue, 03 Aug 2010) $ */\n  110  /* Current version at http://www.opengl.org/registry/ */\n  111  #define GL_GLEXT_VERSION 64\n  ...\n 4974  #define GL_COMMAND_BARRIER_BIT_EXT        0x00000040\n 4975  #define GL_PIXEL_BUFFER_BARRIER_BIT_EXT   0x00000080\n 4976: #define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100\n 4977: #define GL_BUFFER_UPDATE_BARRIER_BIT_EXT  0x00000200\n 4978  #define GL_FRAMEBUFFER_BARRIER_BIT_EXT    0x00000400\n 4979  #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800\n ....\n 9055  GLAPI GLuint APIENTRY glNewObjectBufferATI (GLsizei size, const GLvoid *pointer, GLenum usage);\n 9056  GLAPI GLboolean APIENTRY glIsObjectBufferATI (GLuint buffer);\n 9057: GLAPI void APIENTRY glUpdateObjectBufferATI (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);\n 9058  GLAPI void APIENTRY glGetObjectBufferfvATI (GLuint buffer, GLenum pname, GLfloat *params);\n 9059  GLAPI void APIENTRY glGetObjectBufferivATI (GLuint buffer, GLenum pname, GLint *params);\n ....\n 9068  typedef GLuint (APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const GLvoid *pointer, GLenum usage);\n 9069  typedef GLboolean (APIENTRYP PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);\n 9070: typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);\n 9071  typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);\n 9072  typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_opengles2.h:\n 1743  /* No new tokens introduced by this extension. */\n 1744  \n 1745: /* GL_NV_texture_compression_s3tc_update */\n 1746  /* No new tokens introduced by this extension. */\n 1747  \n ....\n 2667  #endif\n 2668  \n 2669: /* GL_NV_texture_compression_s3tc_update */\n 2670: #ifndef GL_NV_texture_compression_s3tc_update\n 2671: #define GL_NV_texture_compression_s3tc_update 1\n 2672  #endif\n 2673  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_pixels.h:\n  146      ((format) && (SDL_PIXELFLAG(format) != 1))\n  147  \n  148: /* Note: If you modify this list, update SDL_GetPixelFormatName() */\n  149  enum\n  150  {\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_quit.h:\n   38   *  window.  If it is ignored or filtered out, the window will remain open.\n   39   *  If it is not ignored or filtered, it is queued normally and the window\n   40:  *  is allowed to close.  When the window is closed, screen updates will\n   41   *  complete, but have no effect.\n   42   *\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_render.h:\n  235   *\n  236   *  \\sa SDL_QueryTexture()\n  237:  *  \\sa SDL_UpdateTexture()\n  238   *  \\sa SDL_DestroyTexture()\n  239   */\n  ...\n  278   *  \\brief Set an additional color value used in render copy operations.\n  279   *\n  280:  *  \\param texture The texture to update.\n  281   *  \\param r       The red color value multiplied into copy operations.\n  282   *  \\param g       The green color value multiplied into copy operations.\n  ...\n  311   *  \\brief Set an additional alpha value used in render copy operations.\n  312   *\n  313:  *  \\param texture The texture to update.\n  314   *  \\param alpha     The alpha value multiplied into copy operations.\n  315   *\n  ...\n  338   *  \\brief Set the blend mode used for texture copy operations.\n  339   *\n  340:  *  \\param texture The texture to update.\n  341   *  \\param blendMode ::SDL_BlendMode to use for texture blending.\n  342   *\n  ...\n  366  \n  367  /**\n  368:  *  \\brief Update the given texture rectangle with new pixel data.\n  369   *\n  370:  *  \\param texture   The texture to update\n  371:  *  \\param rect      A pointer to the rectangle of pixels to update, or NULL to\n  372:  *                   update the entire texture.\n  373   *  \\param pixels    The raw pixel data.\n  374   *  \\param pitch     The number of bytes between rows of pixel data.\n  ...\n  378   *  \\note This is a fairly slow function.\n  379   */\n  380: extern DECLSPEC int SDLCALL SDL_UpdateTexture(SDL_Texture * texture,\n  381                                                const SDL_Rect * rect,\n  382                                                const void *pixels, int pitch);\n  383  \n  384  /**\n  385:  *  \\brief Update a rectangle within a planar YV12 or IYUV texture with new pixel data.\n  386   *\n  387:  *  \\param texture   The texture to update\n  388:  *  \\param rect      A pointer to the rectangle of pixels to update, or NULL to\n  389:  *                   update the entire texture.\n  390   *  \\param Yplane    The raw pixel data for the Y plane.\n  391   *  \\param Ypitch    The number of bytes between rows of pixel data for the Y plane.\n  ...\n  397   *  \\return 0 on success, or -1 if the texture is not valid.\n  398   *\n  399:  *  \\note You can use SDL_UpdateTexture() as long as your pixel data is\n  400   *        a contiguous block of Y and U/V planes in the proper order, but\n  401   *        this function is available if your pixel data is not contiguous.\n  402   */\n  403: extern DECLSPEC int SDLCALL SDL_UpdateYUVTexture(SDL_Texture * texture,\n  404                                                   const SDL_Rect * rect,\n  405                                                   const Uint8 *Yplane, int Ypitch,\n  ...\n  817  \n  818  /**\n  819:  *  \\brief Update the screen with rendering performed.\n  820   */\n  821  extern DECLSPEC void SDLCALL SDL_RenderPresent(SDL_Renderer * renderer);\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_surface.h:\n  214   *  \\brief Sets the color key (transparent pixel) in a blittable surface.\n  215   *\n  216:  *  \\param surface The surface to update\n  217   *  \\param flag Non-zero to enable colorkey and 0 to disable colorkey\n  218   *  \\param key The transparent pixel in the native surface format\n  ...\n  228   *  \\brief Gets the color key (transparent pixel) in a blittable surface.\n  229   *\n  230:  *  \\param surface The surface to update\n  231   *  \\param key A pointer filled in with the transparent pixel in the native\n  232   *             surface format\n  ...\n  241   *  \\brief Set an additional color value used in blit operations.\n  242   *\n  243:  *  \\param surface The surface to update.\n  244   *  \\param r The red color value multiplied into blit operations.\n  245   *  \\param g The green color value multiplied into blit operations.\n  ...\n  273   *  \\brief Set an additional alpha value used in blit operations.\n  274   *\n  275:  *  \\param surface The surface to update.\n  276   *  \\param alpha The alpha value multiplied into blit operations.\n  277   *\n  ...\n  299   *  \\brief Set the blend mode used for blit operations.\n  300   *\n  301:  *  \\param surface The surface to update.\n  302   *  \\param blendMode ::SDL_BlendMode to use for blit blending.\n  303   *\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_test_assert.h:\n   62  \n   63  /**\n   64:  * \\brief Assert for test cases that logs but does not break execution flow on failures. Updates assertion counters.\n   65   *\n   66   * \\param assertCondition Evaluated condition or variable to assert; fail (==0) or pass (!=0).\n   ..\n   72  \n   73  /**\n   74:  * \\brief Explicitely pass without checking an assertion condition. Updates assertion counter.\n   75   *\n   76   * \\param assertDescription Message to log with the assert describing it.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_test_md5.h:\n   48   **  To form the message digest for a message M                       **\n   49   **    (1) Initialize a context buffer mdContext using MD5Init        **\n   50:  **    (2) Call MD5Update on mdContext and M                          **\n   51   **    (3) Call MD5Final on mdContext                                 **\n   52   **  The message digest is now in mdContext->digest[0...15]           **\n   ..\n   91  \n   92  /**\n   93:  * /brief update digest from variable length data\n   94   *\n   95   * /param  mdContext       pointer to context variable\n   ..\n   97   * /param  inLen           length of data array/string\n   98   *\n   99:  * Note: The function updates the message-digest context to account\n  100   *       for the presence of each of the characters inBuf[0..inLen-1]\n  101   *       in the message whose digest is being computed.\n  102  */\n  103  \n  104:  void SDLTest_Md5Update(SDLTest_Md5Context * mdContext, unsigned char *inBuf,\n  105                   unsigned int inLen);\n  106  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_version.h:\n   53      Uint8 major;        /**< major version */\n   54      Uint8 minor;        /**< minor version */\n   55:     Uint8 patch;        /**< update version */\n   56  } SDL_version;\n   57  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_video.h:\n  682   *  \\note You may not combine this with 3D or the rendering API on this window.\n  683   *\n  684:  *  \\sa SDL_UpdateWindowSurface()\n  685:  *  \\sa SDL_UpdateWindowSurfaceRects()\n  686   */\n  687  extern DECLSPEC SDL_Surface * SDLCALL SDL_GetWindowSurface(SDL_Window * window);\n  ...\n  693   *\n  694   *  \\sa SDL_GetWindowSurface()\n  695:  *  \\sa SDL_UpdateWindowSurfaceRects()\n  696   */\n  697: extern DECLSPEC int SDLCALL SDL_UpdateWindowSurface(SDL_Window * window);\n  698  \n  699  /**\n  ...\n  703   *\n  704   *  \\sa SDL_GetWindowSurface()\n  705:  *  \\sa SDL_UpdateWindowSurfaceRect()\n  706   */\n  707: extern DECLSPEC int SDLCALL SDL_UpdateWindowSurfaceRects(SDL_Window * window,\n  708                                                           const SDL_Rect * rects,\n  709                                                           int numrects);\n  ...\n  929   *  \\brief Set the swap interval for the current OpenGL context.\n  930   *\n  931:  *  \\param interval 0 for immediate updates, 1 for updates synchronized with the\n  932   *                  vertical retrace. If the system supports it, you may\n  933   *                  specify -1 to allow late swaps to happen immediately\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/GameObject.h:\n   38      virtual ~GameObject() {}\n   39  \n   40:     virtual void Update();\n   41  \n   42      // State that says everything is changed\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/Player.h:\n   22      };\n   23      virtual uint32_t GetAllStateMask() const override { return ALL_STATE; }\n   24:     virtual void Update() override;\n   25  \n   26      void ProcessInput( float inDeltaTime, const InputState& inInputState );\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/World.h:\n   27      void RemoveGameObject( GameObjectPtr inGameObject );\n   28  \n   29:     void Update();\n   30  \n   31      const std::vector<GameObjectPtr>& GetGameObjects();\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/math/WeightedTimedMovingAverage.h:\n   13      }\n   14  \n   15:     void UpdatePerSecond( float inValue )\n   16      {\n   17          float time = Timing::sInstance.GetTimef();\n   ..\n   20          float valueOverTime = inValue / timeSinceLastEntry;\n   21  \n   22:         // now update our value by whatever amount of the duration that was..\n   23          float fractionOfDuration = ( timeSinceLastEntry / mDuration );\n   24          if ( fractionOfDuration > 1.f )\n   ..\n   33      }\n   34  \n   35:     void Update( float inValue )\n   36      {\n   37          float time = Timing::sInstance.GetTimef();\n   38          float timeSinceLastEntry = time - mTimeLastEntryMade;\n   39  \n   40:         // now update our value by whatever amount of the duration that was..\n   41          float fractionOfDuration = ( timeSinceLastEntry / mDuration );\n   42          if ( fractionOfDuration > 1.f )\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/ReplicationCommand.h:\n    7  {\n    8      RA_CREATE=1,\n    9:     RA_UPDATE,\n   10      RA_DESTROY,\n   11      RA_RPC,\n   ..\n   25  \n   26      // our create command was acked, stop sending create packets and send\n   27:     // just update ones\n   28      void HandleCreateAckd()\n   29      {\n   30          if ( mAction == RA_CREATE )\n   31:             mAction = RA_UPDATE;\n   32      }\n   33  \n   ..\n   59      {\n   60          // Don't destroy the object if we want to clear it's state\n   61:         mAction = RA_UPDATE;\n   62      }\n   63  }\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/timing/Timing.h:\n    9      Timing();\n   10  \n   11:     void Update();\n   12  \n   13      float GetDeltaTime() const { return mDeltaTime; }\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/gameobjects/Engine.cpp:\n   52  bool Engine::DoFrame()\n   53  {\n   54:     World::sInstance->Update();\n   55      return true;\n   56  }\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/gameobjects/GameObject.cpp:\n   10  \n   11  GameObject::GameObject() : mIndexInWorld( -1 ), mNetworkId( 0 ) {}\n   12: void GameObject::Update() {}\n   13  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/gameobjects/Player.cpp:\n   24  }\n   25  \n   26: void Player::Update() {\n   27  //    LOG(\"At %.2f, %.2f\", GetLocation().mX, GetLocation().mY);\n   28  }\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/gameobjects/World.cpp:\n   44  }\n   45  \n   46: void World::Update()\n   47  {\n   48      for ( auto const& go : mGameObjects )\n   49      {\n   50:         go->Update();\n   51      }\n   52  }\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/NetworkManager.cpp:\n   58      ProcessQueuedPackets();\n   59  \n   60:     // UpdateBytesSentLastFrame();\n   61  }\n   62  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/timing/Timing.cpp:\n   32  }\n   33  \n   34: void Timing::Update()\n   35  {\n   36  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground.xcodeproj/project.xcworkspace/xcuserdata/erikparreira.xcuserdatad/UserInterfaceState.xcuserstate:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground.xcodeproj/xcuserdata/erikparreira.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist:\n  588              startingLineNumber = \"94\"\n  589              endingLineNumber = \"94\"\n  590:             landmarkName = \"InputManager::Update()\"\n  591              landmarkType = \"5\">\n  592           </BreakpointContent>\n  ...\n 1033              startingLineNumber = \"22\"\n 1034              endingLineNumber = \"22\"\n 1035:             landmarkName = \"PlayerClient::Update()\"\n 1036              landmarkType = \"5\">\n 1037           </BreakpointContent>\n ....\n 1049              startingLineNumber = \"26\"\n 1050              endingLineNumber = \"26\"\n 1051:             landmarkName = \"PlayerServer::Update()\"\n 1052              landmarkType = \"5\">\n 1053           </BreakpointContent>\n ....\n 1257              startingLineNumber = \"130\"\n 1258              endingLineNumber = \"130\"\n 1259:             landmarkName = \"NetworkManagerClient::UpdateSendingInputPacket()\"\n 1260              landmarkType = \"5\">\n 1261           </BreakpointContent>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/gameobjects/PlayerClient.h:\n   18      }\n   19  \n   20:     virtual void Update() override;\n   21      virtual void Read( InputMemoryBitStream& inInputStream ) override;\n   22  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/input/InputManager.h:\n   33      }\n   34  \n   35:     void Update();\n   36  \n   37    private:\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/networking/NetworkManagerClient.h:\n   48                 const std::string& inName );\n   49  \n   50:     void UpdateSayingHello();\n   51      void SendHelloPacket();\n   52  \n   ..\n   59      void HandleGameObjectState( InputMemoryBitStream& inInputStream );\n   60  \n   61:     void UpdateSendingInputPacket();\n   62      void SendInputPacket();\n   63  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/networking/ReplicationManagerClient.h:\n   12      void ReadAndDoCreateAction( InputMemoryBitStream& inInputStream,\n   13                                  int inNetworkId );\n   14:     void ReadAndDoUpdateAction( InputMemoryBitStream& inInputStream,\n   15                                  int inNetworkId );\n   16      void ReadAndDoDestroyAction( InputMemoryBitStream& inInputStream,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/gameobjects/Client.cpp:\n   66      }\n   67  \n   68:     Timing::sInstance.Update();\n   69  \n   70:     InputManager::sInstance->Update();\n   71  \n   72      auto objs = World::sInstance->GetGameObjects();\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/gameobjects/PlayerClient.cpp:\n   16  }\n   17  \n   18: // Update called every frame on the client\n   19: void PlayerClient::Update()\n   20  {\n   21      if ( !IsCreatedOnServer() )\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/input/InputManager.cpp:\n   16  }\n   17  \n   18: inline void UpdateDesireVariableFromKey( EInputAction inInputAction,\n   19                                           bool& ioVariable )\n   20  {\n   ..\n   29  }\n   30  \n   31: inline void UpdateDesireFloatFromKey( EInputAction inInputAction,\n   32                                        float& ioVariable )\n   33  {\n   ..\n   47      {\n   48      case 'a':\n   49:         UpdateDesireFloatFromKey( inInputAction, mCurrentState.mLeftAmount );\n   50          break;\n   51      case 'd':\n   52:         UpdateDesireFloatFromKey( inInputAction, mCurrentState.mRightAmount );\n   53          break;\n   54      case 'w':\n   55:         UpdateDesireFloatFromKey( inInputAction, mCurrentState.mForwardAmount );\n   56          break;\n   57      case 's':\n   58:         UpdateDesireFloatFromKey( inInputAction, mCurrentState.mBackAmount );\n   59          break;\n   60      case 'k':\n   61:         UpdateDesireVariableFromKey( inInputAction, mCurrentState.mIsShooting );\n   62          break;\n   63      default:\n   ..\n   85  \n   86  // Input Should be sampled if the follow criteria is met\n   87: // 1. It's time i.e only sample during a frame update.\n   88  // 2. There is input to sample\n   89  bool InputManager::shouldSampleMove()\n   ..\n   92  }\n   93  \n   94: void InputManager::Update()\n   95  {\n   96      // TODO: No.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/networking/NetworkManagerClient.cpp:\n   61      {\n   62      case NCS_SayingHello:\n   63:         UpdateSayingHello();\n   64          break;\n   65      case NCS_Welcomed:\n   66:         UpdateSendingInputPacket();\n   67      default:\n   68          break;\n   ..\n   70  }\n   71  \n   72: void NetworkManagerClient::UpdateSayingHello()\n   73  {\n   74      float time = Timing::sInstance.GetTimef();\n   ..\n  121  }\n  122  \n  123: void NetworkManagerClient::UpdateSendingInputPacket()\n  124  {\n  125      float time = Timing::sInstance.GetTimef();\n  ...\n  188      mLastRoundTripTime = rtt;\n  189  \n  190:     mAvgRoundTripTime.Update( rtt );\n  191      InputManager::sInstance->GetMoveList().RemoveProcessedMoves(\n  192          mLastMoveProcessedByServerTimestamp );\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/networking/ReplicationManagerClient.cpp:\n   22              break;\n   23  \n   24:         case RA_UPDATE:\n   25:             ReadAndDoUpdateAction( inInputStream, networkId );\n   26              break;\n   27          case RA_DESTROY:\n   ..\n   59  }\n   60  \n   61: void ReplicationManagerClient::ReadAndDoUpdateAction(\n   62      InputMemoryBitStream& inInputStream, int inNetworkId )\n   63  {\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include/gameobjects/PlayerServer.h:\n   20      }\n   21  \n   22:     virtual void Update();\n   23  \n   24      void SetCatControlType( PlayerControlType inType )\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include/networking/ClientProxy.h:\n   36      const InputState& GetInputState() const { return mInputState; }\n   37  \n   38:     void UpdateLastPacketTime();\n   39      float GetLastPacketFromClientTime() const\n   40      {\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include/networking/NetworkManagerServer.h:\n   53  \n   54      void SendWelcomePacket( ClientProxyPtr inClientProxy );\n   55:     void UpdateAllClients();\n   56      void AddWorldStateToPacket( OutputMemoryBitStream& inOutputStream );\n   57      void SendStatePacketToClient( ClientProxyPtr inClientProxy );\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include/networking/ReplicationManagerServer.h:\n   32      uint32_t WriteCreateAction( OutputMemoryBitStream& inOutputStream,\n   33                                  int inNetworkId, uint32_t inDirtyState );\n   34:     uint32_t WriteUpdateAction( OutputMemoryBitStream& inOutputStream,\n   35                                  int inNetworkId, uint32_t inDirtyState );\n   36      uint32_t WriteDestroyAction( OutputMemoryBitStream& inOutputStream,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include/networking/ReplicationManagerTransmissionData.h:\n   52      // Failure handlers\n   53      void HandleCreateDeliveryFailure( int inNetworkId ) const;\n   54:     void HandleUpdateStateDeliveryFailure(\n   55          int inNetworkId, uint32_t inState,\n   56          DeliveryNotificationManager* inDeliveryNotificationManager ) const;\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/gameobjects/PlayerServer.cpp:\n    5  PlayerServer::PlayerServer() : mControlType( PCT_HUMAN ) {}\n    6  \n    7: void PlayerServer::Update()\n    8  {\n    9:     Player::Update();\n   10  \n   11      Vector3 oldLocation = GetLocation();\n   ..\n   35  \n   36          // TODO: Check if there velocity has actually changed before sending\n   37:         // update\n   38          NetworkManagerServer::sInstance->SetStateDirty( GetNetworkId(),\n   39                                                          PRS_POSI );\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/ClientProxy.cpp:\n    8        mIsLastMoveTimestampDirty( false ), mTimeToRespawn( 0.f )\n    9  {\n   10:     UpdateLastPacketTime();\n   11  }\n   12  \n   13: void ClientProxy::UpdateLastPacketTime()\n   14  {\n   15      mLastPacketFromClientTime = Timing::sInstance.GetTimef();\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/NetworkManagerServer.cpp:\n   55                                            InputMemoryBitStream& inInputStream )\n   56  {\n   57:     inClientProxy->UpdateLastPacketTime();\n   58  \n   59      uint32_t packetType;\n   ..\n  182      }\n  183  }\n  184: void NetworkManagerServer::UpdateAllClients() {}\n  185  \n  186  // The thing that actually sends the world state to the clients\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/ReplicationManagerServer.cpp:\n   70                  WriteCreateAction( inOutputStream, networkId, dirtyState );\n   71              break;\n   72:         case RA_UPDATE:\n   73              writtenState =\n   74:                 WriteUpdateAction( inOutputStream, networkId, dirtyState );\n   75              break;\n   76          default:\n   ..\n  100  }\n  101  \n  102: uint32_t ReplicationManagerServer::WriteUpdateAction(\n  103      OutputMemoryBitStream& inOutputStream, int inNetworkId,\n  104      uint32_t inDirtyState )\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/ReplicationManagerTransmissionData.cpp:\n   27              HandleCreateDeliveryFailure( networkId );\n   28              break;\n   29:         case RA_UPDATE:\n   30:             HandleUpdateStateDeliveryFailure( networkId, rt.GetState(),\n   31                                                inDeliveryNotificationManager );\n   32              break;\n   ..\n   64  }\n   65  \n   66: void ReplicationManagerTransmissionData::HandleUpdateStateDeliveryFailure(\n   67      int inNetworkId, uint32_t inState,\n   68      DeliveryNotificationManager* inDeliveryNotificationManager ) const\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/Server.cpp:\n   54  \n   55  \n   56:     Timing::sInstance.Update();\n   57  \n   58      // Run \"Physics\" at 60 hertz\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/timing/timing.h:\n    9      Timing();\n   10  \n   11:     void Update();\n   12  \n   13      float GetDeltaTime() const { return mDeltaTime; }\n\n303 matches across 97 files\n\n\nSearching 657 files for \"enum\"\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/scratch.cpp:\n  423      CLASS_IDENTIFICATION( 'RCAT', GameObject )\n  424      \n  425:     enum ECatReplicationState\n  426      {\n  427          ECRS_Pose = 1 << 0,\n  ...\n  506  \n  507  \n  508: enum ECatControlType { ESCT_Human, ESCT_AI };\n  509  \n  510  class RoboCatServer : public RoboCat {\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/bin/Debug/networkplaygroundclient:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/bin/Debug/networkplaygroundserver:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/cmake-build-debug/networkplaygroundclient:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/cmake-build-debug/networkplaygroundserver:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/cmake-build-debug/CMakeFiles/CMakeOutput.log:\n  280      Feature record: CXX_FEATURE:1cxx_deleted_functions\n  281      Feature record: CXX_FEATURE:1cxx_digit_separators\n  282:     Feature record: CXX_FEATURE:1cxx_enum_forward_declarations\n  283      Feature record: CXX_FEATURE:1cxx_explicit_conversions\n  284      Feature record: CXX_FEATURE:1cxx_extended_friend_declarations\n  ...\n  307      Feature record: CXX_FEATURE:1cxx_sizeof_member\n  308      Feature record: CXX_FEATURE:1cxx_static_assert\n  309:     Feature record: CXX_FEATURE:1cxx_strong_enums\n  310      Feature record: CXX_FEATURE:1cxx_template_template_parameters\n  311      Feature record: CXX_FEATURE:1cxx_thread_local\n  ...\n  351      Feature record: CXX_FEATURE:1cxx_deleted_functions\n  352      Feature record: CXX_FEATURE:0cxx_digit_separators\n  353:     Feature record: CXX_FEATURE:1cxx_enum_forward_declarations\n  354      Feature record: CXX_FEATURE:1cxx_explicit_conversions\n  355      Feature record: CXX_FEATURE:1cxx_extended_friend_declarations\n  ...\n  378      Feature record: CXX_FEATURE:1cxx_sizeof_member\n  379      Feature record: CXX_FEATURE:1cxx_static_assert\n  380:     Feature record: CXX_FEATURE:1cxx_strong_enums\n  381      Feature record: CXX_FEATURE:1cxx_template_template_parameters\n  382      Feature record: CXX_FEATURE:1cxx_thread_local\n  ...\n  422      Feature record: CXX_FEATURE:0cxx_deleted_functions\n  423      Feature record: CXX_FEATURE:0cxx_digit_separators\n  424:     Feature record: CXX_FEATURE:0cxx_enum_forward_declarations\n  425      Feature record: CXX_FEATURE:0cxx_explicit_conversions\n  426      Feature record: CXX_FEATURE:0cxx_extended_friend_declarations\n  ...\n  449      Feature record: CXX_FEATURE:0cxx_sizeof_member\n  450      Feature record: CXX_FEATURE:0cxx_static_assert\n  451:     Feature record: CXX_FEATURE:0cxx_strong_enums\n  452      Feature record: CXX_FEATURE:1cxx_template_template_parameters\n  453      Feature record: CXX_FEATURE:0cxx_thread_local\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/cmake-build-debug/CMakeFiles/feature_tests.bin:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/cmake-build-debug/CMakeFiles/feature_tests.cxx:\n  140  \"0\"\n  141  #endif\n  142: \"cxx_enum_forward_declarations\\n\"\n  143  \"CXX_FEATURE:\"\n  144  #if ((__clang_major__ * 100) + __clang_minor__) >= 400 && __has_feature(cxx_explicit_conversions)\n  ...\n  324  \"cxx_static_assert\\n\"\n  325  \"CXX_FEATURE:\"\n  326: #if ((__clang_major__ * 100) + __clang_minor__) >= 400 && __has_feature(cxx_strong_enums)\n  327  \"1\"\n  328  #else\n  329  \"0\"\n  330  #endif\n  331: \"cxx_strong_enums\\n\"\n  332  \"CXX_FEATURE:\"\n  333  #if ((__clang_major__ * 100) + __clang_minor__) >= 400 && __cplusplus >= 199711L\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/cmake-build-debug/CMakeFiles/3.7.1/CMakeCXXCompiler.cmake:\n    5  set(CMAKE_CXX_COMPILER_WRAPPER \"\")\n    6  set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT \"98\")\n    7: set(CMAKE_CXX_COMPILE_FEATURES \"cxx_template_template_parameters;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates;cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates\")\n    8  set(CMAKE_CXX98_COMPILE_FEATURES \"cxx_template_template_parameters\")\n    9: set(CMAKE_CXX11_COMPILE_FEATURES \"cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates\")\n   10  set(CMAKE_CXX14_COMPILE_FEATURES \"cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates\")\n   11  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/CookBook.md:\n 2235  \n 2236  ```\n 2237: enum class AccessLevel { kInternal, kPublic };\n 2238  \n 2239  class Buzz {\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/docs/DevGuide.md:\n   27  being courteous is not the same as failing to constructively disagree\n   28  with each other, but it does mean that we should be respectful of each\n   29: other when enumerating the 42 technical reasons that a particular\n   30  proposal may not be the best choice. There's never a reason to be\n   31  antagonistic or dismissive toward anyone who is sincerely trying to\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/include/gmock/gmock-spec-builders.h:\n  255   protected:\n  256    // Gives each clause in the ON_CALL() statement a name.\n  257:   enum Clause {\n  258:     // Do not change the order of the enum members!  The run-time\n  259      // syntax checking relies on it.\n  260      kNone,\n  ...\n  359  \n  360  // Possible reactions on uninteresting calls.\n  361: enum CallReaction {\n  362    kAllow,\n  363    kWarn,\n  ...\n  720    friend class UntypedFunctionMockerBase;\n  721  \n  722:   enum Clause {\n  723:     // Don't change the order of the enum members!\n  724      kNone,\n  725      kWith,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h:\n  124  // when a matcher argument type can be safely converted to another\n  125  // type in the implementation of SafeMatcherCast.\n  126: enum TypeKind {\n  127    kBool, kInteger, kFloatingPoint, kOther\n  128  };\n  ...\n  130  // KindOf<T>::value is the kind of type T.\n  131  template <typename T> struct KindOf {\n  132:   enum { value = kOther };  // The default kind.\n  133  };\n  134  \n  135  // This macro declares that the kind of 'type' is 'kind'.\n  136  #define GMOCK_DECLARE_KIND_(type, kind) \\\n  137:   template <> struct KindOf<type> { enum { value = kind }; }\n  138  \n  139  GMOCK_DECLARE_KIND_(bool, kBool);\n  ...\n  260   public:\n  261    // The type of a failure (either non-fatal or fatal).\n  262:   enum FailureType {\n  263      kNonfatal, kFatal\n  264    };\n  ...\n  304  \n  305  // Severity level of a log.\n  306: enum LogSeverity {\n  307    kInfo = 0,\n  308    kWarning = 1\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/scripts/generator/cpp/ast.py:\n  315  \n  316  \n  317: class Enum(_NestedType):\n  318      pass\n  319  \n  ...\n  539          if needs_name_removed:\n  540              # Handle default (initial) values properly.\n  541:             for i, t in enumerate(parts):\n  542                  if t.name == '=':\n  543                      default = parts[i+1:]\n  ...\n  835                  assert name\n  836                  value = ''\n  837:                 for i, c in enumerate(name):\n  838                      if c.isspace():\n  839                          value = name[i:].lstrip()\n  ...\n 1264          return self._GetNestedType(Union)\n 1265  \n 1266:     def handle_enum(self):\n 1267:         return self._GetNestedType(Enum)\n 1268  \n 1269      def handle_auto(self):\n ....\n 1351          if (token.token_type == tokenize.NAME and\n 1352              keywords.IsKeyword(token.name)):\n 1353:             # Token must be struct/enum/union/class.\n 1354              method = getattr(self, 'handle_' + token.name)\n 1355              self._handling_typedef = True\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/scripts/generator/cpp/keywords.py:\n   41  \n   42  OTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\n   43: OTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\n   44  \n   45  CONTROL = set('case switch default if else return goto'.split())\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/test/gmock-cardinalities_test.cc:\n  133  // Tests AtLeast(n).\n  134  \n  135: TEST(AtLeastTest, OnNegativeNumber) {\n  136    EXPECT_NONFATAL_FAILURE({  // NOLINT\n  137      AtLeast(-1);\n  ...\n  153  }\n  154  \n  155: TEST(AtLeastTest, OnPositiveNumber) {\n  156    const Cardinality c = AtLeast(2);\n  157    EXPECT_FALSE(c.IsSatisfiedByCallCount(0));\n  ...\n  188  // Tests AtMost(n).\n  189  \n  190: TEST(AtMostTest, OnNegativeNumber) {\n  191    EXPECT_NONFATAL_FAILURE({  // NOLINT\n  192      AtMost(-1);\n  ...\n  208  }\n  209  \n  210: TEST(AtMostTest, OnPositiveNumber) {\n  211    const Cardinality c = AtMost(2);\n  212    EXPECT_TRUE(c.IsSatisfiedByCallCount(0));\n  ...\n  342  // Tests Exactly(n).\n  343  \n  344: TEST(ExactlyTest, OnNegativeNumber) {\n  345    EXPECT_NONFATAL_FAILURE({  // NOLINT\n  346      Exactly(-1);\n  ...\n  362  }\n  363  \n  364: TEST(ExactlyTest, OnPositiveNumber) {\n  365    const Cardinality c = Exactly(2);\n  366    EXPECT_FALSE(c.IsSatisfiedByCallCount(0));\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googlemock/test/gmock-spec-builders_test.cc:\n 1531  }\n 1532  \n 1533: TEST(ExpectationSetTest, IsEnumerable) {\n 1534    ExpectationSet es;\n 1535    EXPECT_TRUE(es.begin() == es.end());\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/codegear/gtest.cbproj:\n   44      <BCC_UseRegisterVariables>None</BCC_UseRegisterVariables>\n   45      <DCC_Define>DEBUG</DCC_Define>\n   46:     <BCC_DebugLineNumbers>true</BCC_DebugLineNumbers>\n   47      <IntermediateOutputDir>Debug</IntermediateOutputDir>\n   48      <TASM_DisplaySourceLines>true</TASM_DisplaySourceLines>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/codegear/gtest_main.cbproj:\n   44      <BCC_UseRegisterVariables>None</BCC_UseRegisterVariables>\n   45      <DCC_Define>DEBUG</DCC_Define>\n   46:     <BCC_DebugLineNumbers>true</BCC_DebugLineNumbers>\n   47      <IntermediateOutputDir>Debug</IntermediateOutputDir>\n   48      <TASM_DisplaySourceLines>true</TASM_DisplaySourceLines>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/codegear/gtest_unittest.cbproj:\n   45      <BCC_UseRegisterVariables>None</BCC_UseRegisterVariables>\n   46      <DCC_Define>DEBUG</DCC_Define>\n   47:     <BCC_DebugLineNumbers>true</BCC_DebugLineNumbers>\n   48      <IntermediateOutputDir>Debug</IntermediateOutputDir>\n   49      <TASM_DisplaySourceLines>true</TASM_DisplaySourceLines>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/DevGuide.md:\n   27  being courteous is not the same as failing to constructively disagree\n   28  with each other, but it does mean that we should be respectful of each\n   29: other when enumerating the 42 technical reasons that a particular\n   30  proposal may not be the best choice. There's never a reason to be\n   31  antagonistic or dismissive toward anyone who is sincerely trying to\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/FAQ.md:\n   24    * Nonfatal assertions (`EXPECT_*`) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.\n   25    * It's easy to write assertions that generate informative messages: you just use the stream syntax to append any additional information, e.g. `ASSERT_EQ(5, Foo(i)) << \" where i = \" << i;`.  It doesn't require a new set of macros or special functions.\n   26:   * Google Test automatically detects your tests and doesn't require you to enumerate them in order to run them.\n   27    * Death tests are pretty handy for ensuring that your asserts in production code are triggered by the right conditions.\n   28    * `SCOPED_TRACE` helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/Primer.md:\n   13    1. Tests should be _portable_ and _reusable_. The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral.  Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations.  (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)\n   14    1. When tests fail, they should provide as much _information_ about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\n   15:   1. The testing framework should liberate test writers from housekeeping chores and let them focus on the test _content_.  Google C++ Testing Framework automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\n   16    1. Tests should be _fast_. With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\n   17  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_5_FAQ.md:\n   24    * Nonfatal assertions (`EXPECT_*`) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.\n   25    * It's easy to write assertions that generate informative messages: you just use the stream syntax to append any additional information, e.g. `ASSERT_EQ(5, Foo(i)) << \" where i = \" << i;`.  It doesn't require a new set of macros or special functions.\n   26:   * Google Test automatically detects your tests and doesn't require you to enumerate them in order to run them.\n   27    * No framework can anticipate all your needs, so Google Test provides `EXPECT_PRED*` to make it easy to extend your assertion vocabulary.  For a nicer syntax, you can define your own assertion macros trivially in terms of `EXPECT_PRED*`.\n   28    * Death tests are pretty handy for ensuring that your asserts in production code are triggered by the right conditions.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_5_Primer.md:\n   13    1. Tests should be _portable_ and _reusable_. The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral.  Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations.  (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)\n   14    1. When tests fail, they should provide as much _information_ about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\n   15:   1. The testing framework should liberate test writers from housekeeping chores and let them focus on the test _content_.  Google C++ Testing Framework automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\n   16    1. Tests should be _fast_. With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\n   17  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_6_FAQ.md:\n   24    * Nonfatal assertions (`EXPECT_*`) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.\n   25    * It's easy to write assertions that generate informative messages: you just use the stream syntax to append any additional information, e.g. `ASSERT_EQ(5, Foo(i)) << \" where i = \" << i;`.  It doesn't require a new set of macros or special functions.\n   26:   * Google Test automatically detects your tests and doesn't require you to enumerate them in order to run them.\n   27    * Death tests are pretty handy for ensuring that your asserts in production code are triggered by the right conditions.\n   28    * `SCOPED_TRACE` helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_6_Primer.md:\n   13    1. Tests should be _portable_ and _reusable_. The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral.  Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations.  (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)\n   14    1. When tests fail, they should provide as much _information_ about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\n   15:   1. The testing framework should liberate test writers from housekeeping chores and let them focus on the test _content_.  Google C++ Testing Framework automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\n   16    1. Tests should be _fast_. With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\n   17  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_7_FAQ.md:\n   24    * Nonfatal assertions (`EXPECT_*`) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.\n   25    * It's easy to write assertions that generate informative messages: you just use the stream syntax to append any additional information, e.g. `ASSERT_EQ(5, Foo(i)) << \" where i = \" << i;`.  It doesn't require a new set of macros or special functions.\n   26:   * Google Test automatically detects your tests and doesn't require you to enumerate them in order to run them.\n   27    * Death tests are pretty handy for ensuring that your asserts in production code are triggered by the right conditions.\n   28    * `SCOPED_TRACE` helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/docs/V1_7_Primer.md:\n   13    1. Tests should be _portable_ and _reusable_. The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral.  Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations.  (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)\n   14    1. When tests fail, they should provide as much _information_ about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\n   15:   1. The testing framework should liberate test writers from housekeeping chores and let them focus on the test _content_.  Google C++ Testing Framework automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\n   16    1. Tests should be _fast_. With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\n   17  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/gtest-param-test.h:\n 1244  // tuple(\"dog\", BLACK), and tuple(\"dog\", WHITE):\n 1245  //\n 1246: // enum Color { BLACK, GRAY, WHITE };\n 1247  // class AnimalTest\n 1248  //     : public testing::TestWithParam<tuple<const char*, Color> > {...};\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/gtest-param-test.h.pump:\n  401  // tuple(\"dog\", BLACK), and tuple(\"dog\", WHITE):\n  402  //\n  403: // enum Color { BLACK, GRAY, WHITE };\n  404  // class AnimalTest\n  405  //     : public testing::TestWithParam<tuple<const char*, Color> > {...};\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/gtest-printers.h:\n  122  // For selecting which printer to use when a given type has neither <<\n  123  // nor PrintTo().\n  124: enum TypeKind {\n  125    kProtobuf,              // a protobuf type\n  126    kConvertibleToInteger,  // a type implicitly convertible to BiggestInt\n  127:                           // (e.g. a named or unnamed enum type)\n  128    kOtherType              // anything else\n  129  };\n  ...\n  132  // by the universal printer to print a value of type T when neither\n  133  // operator<< nor PrintTo() is defined for T, where kTypeKind is the\n  134: // \"kind\" of T as defined by enum TypeKind.\n  135  template <typename T, TypeKind kTypeKind>\n  136  class TypeWithoutFormatter {\n  ...\n  166    // converted to BiggestInt, we print it as a BiggestInt.\n  167    //\n  168:   // Most likely T is an enum type (either named or unnamed), in which\n  169    // case printing it as an integer is the desired behavior.  In case\n  170:   // T is not an enum, printing it as an integer is the best we can do\n  171    // given that it has no user-defined printer.\n  172    static void PrintValue(const T& value, ::std::ostream* os) {\n  ...\n  177  \n  178  // Prints the given value to the given ostream.  If the value is a\n  179: // protocol message, its debug string is printed; if it's an enum or\n  180  // of a type implicitly convertible to BiggestInt, it's printed as an\n  181  // integer; otherwise the bytes in the value are printed.  This is\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/gtest-spi.h:\n   53   public:\n   54    // The two possible mocking modes of this object.\n   55:   enum InterceptMode {\n   56      INTERCEPT_ONLY_CURRENT_THREAD,  // Intercepts only thread local failures.\n   57      INTERCEPT_ALL_THREADS           // Intercepts all failures.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/gtest-test-part.h:\n   49    // The possible outcomes of a test part (i.e. an assertion or an\n   50    // explicit SUCCEED(), FAIL(), or ADD_FAILURE()).\n   51:   enum Type {\n   52      kSuccess,          // Succeeded.\n   53      kNonFatalFailure,  // Failed but the test can continue.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/gtest.h:\n 1398  }\n 1399  \n 1400: // With this overloaded version, we allow anonymous enums to be used\n 1401: // in {ASSERT|EXPECT}_EQ when compiled with gcc 4, as anonymous enums\n 1402  // can be implicitly cast to BiggestInt.\n 1403  GTEST_API_ AssertionResult CmpHelperEQ(const char* lhs_expression,\n ....\n 1422    }\n 1423  \n 1424:   // With this overloaded version, we allow anonymous enums to be used\n 1425    // in {ASSERT|EXPECT}_EQ when compiled with gcc 4, as anonymous\n 1426:   // enums can be implicitly cast to BiggestInt.\n 1427    //\n 1428    // Even though its body looks the same as the above version, we\n 1429:   // cannot merge the two, as it will make anonymous enums unhappy.\n 1430    static AssertionResult Compare(const char* lhs_expression,\n 1431                                   const char* rhs_expression,\n ....\n 1499  // For each templatized helper function, we also define an overloaded\n 1500  // version for BiggestInt in order to reduce code bloat and allow\n 1501: // anonymous enums to be used with {ASSERT|EXPECT}_?? when compiled\n 1502  // with gcc 4.\n 1503  //\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h:\n   92    } GTEST_ATTRIBUTE_UNUSED_;\n   93  \n   94:   // An enumeration of possible roles that may be taken when a death\n   95    // test is encountered.  EXECUTE means that the death test logic should\n   96    // be executed immediately.  OVERSEE means that the program should prepare\n   97    // the appropriate environment for a child process to execute the death\n   98    // test, then wait for it to complete.\n   99:   enum TestRole { OVERSEE_TEST, EXECUTE_TEST };\n  100  \n  101:   // An enumeration of the three reasons that a test might be aborted.\n  102:   enum AbortReason {\n  103      TEST_ENCOUNTERED_RETURN_STATEMENT,\n  104      TEST_THREW_EXCEPTION,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/internal/gtest-internal.h:\n  178  // Simple implementation of the Wagner–Fischer algorithm.\n  179  // See http://en.wikipedia.org/wiki/Wagner-Fischer_algorithm\n  180: enum EditType { kMatch, kAdd, kRemove, kReplace };\n  181  GTEST_API_ std::vector<EditType> CalculateOptimalEdits(\n  182      const std::vector<size_t>& left, const std::vector<size_t>& right);\n  ...\n  361      if (is_nan() || rhs.is_nan()) return false;\n  362  \n  363:     return DistanceBetweenSignAndMagnitudeNumbers(u_.bits_, rhs.u_.bits_)\n  364          <= kMaxUlps;\n  365    }\n  ...\n  399    // Given two numbers in the sign-and-magnitude representation,\n  400    // returns the distance between them as an unsigned number.\n  401:   static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,\n  402                                                       const Bits &sam2) {\n  403      const Bits biased1 = SignAndMagnitudeToBiased(sam1);\n  ...\n 1069  \n 1070   private:\n 1071:   enum {\n 1072      kCheckTypeIsNotConstOrAReference = StaticAssertTypeEqHelper<\n 1073          Element, GTEST_REMOVE_REFERENCE_AND_CONST_(Element)>::value,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/internal/gtest-port.h:\n 1086  template <typename T>\n 1087  struct StaticAssertTypeEqHelper<T, T> {\n 1088:   enum { value = true };\n 1089  };\n 1090  \n ....\n 1242  //   FlushInfoLog() - flushes informational log messages.\n 1243  \n 1244: enum GTestLogSeverity {\n 1245    GTEST_INFO,\n 1246    GTEST_WARNING,\n ....\n 1660  class GTEST_API_ Mutex {\n 1661   public:\n 1662:   enum MutexType { kStatic = 0, kDynamic = 1 };\n 1663    // We rely on kStaticMutex being 0 as it is to what the linker initializes\n 1664    // type_ in static mutexes.  critical_section_ will be initialized lazily\n 1665    // in ThreadSafeLazyInit().\n 1666:   enum StaticConstructorSelector { kStaticMutex = 0 };\n 1667  \n 1668    // This constructor intentionally does nothing.  It relies on type_ being\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/samples/sample6_unittest.cc:\n  197  \n  198  // Type-parameterized tests involve one extra step: you have to\n  199: // enumerate the tests you defined:\n  200  REGISTER_TYPED_TEST_CASE_P(\n  201      PrimeTableTest2,  // The first argument is the test case name.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/samples/sample9_unittest.cc:\n   31  // This sample shows how to use Google Test listener API to implement\n   32  // an alternative console output and how to use the UnitTest reflection API\n   33: // to enumerate test cases and tests and to inspect their results.\n   34  \n   35  #include <stdio.h>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/src/gtest-death-test.cc:\n  244  static const char kDeathTestInternalError = 'I';\n  245  \n  246: // An enumeration describing all of the possible ways that a death test can\n  247  // conclude.  DIED means that the process died while executing the test\n  248  // code; LIVED means that process lived beyond the end of the test code;\n  ...\n  253  // TODO(vladl@google.com): Unify names and possibly values for\n  254  // AbortReason, DeathTestOutcome, and flag characters above.\n  255: enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };\n  256  \n  257  // Routine for aborting the program which is safe to call from an\n  ...\n  521  //\n  522  // Private data members:\n  523: //   outcome:  An enumeration describing how the death test\n  524  //             concluded: DIED, LIVED, THREW, or RETURNED.  The death test\n  525  //             fails in the latter three cases.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/src/gtest-internal-inl.h:\n  715    void RecordProperty(const TestProperty& test_property);\n  716  \n  717:   enum ReactionToSharding {\n  718      HONOR_SHARDING_PROTOCOL,\n  719      IGNORE_SHARDING_PROTOCOL\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/src/gtest-printers.cc:\n  126  //   - as a hexidecimal escape sequence (e.g. '\\x7F'), or\n  127  //   - as a special escape sequence (e.g. '\\r', '\\n').\n  128: enum CharFormat {\n  129    kAsIs,\n  130    kHexEscape,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/src/gtest.cc:\n 1433  namespace internal {\n 1434  \n 1435: // The helper function for {ASSERT|EXPECT}_EQ with int or enum\n 1436  // arguments.\n 1437  AssertionResult CmpHelperEQ(const char* lhs_expression,\n ....\n 1451  \n 1452  // A macro for implementing the helper functions needed to implement\n 1453: // ASSERT_?? and EXPECT_?? with integer or enum arguments.  It is here\n 1454  // just to avoid copy-and-paste of similar code.\n 1455  #define GTEST_IMPL_CMP_HELPER_(op_name, op)\\\n ....\n 1467  \n 1468  // Implements the helper function for {ASSERT|EXPECT}_NE with int or\n 1469: // enum arguments.\n 1470  GTEST_IMPL_CMP_HELPER_(NE, !=)\n 1471  // Implements the helper function for {ASSERT|EXPECT}_LE with int or\n 1472: // enum arguments.\n 1473  GTEST_IMPL_CMP_HELPER_(LE, <=)\n 1474  // Implements the helper function for {ASSERT|EXPECT}_LT with int or\n 1475: // enum arguments.\n 1476  GTEST_IMPL_CMP_HELPER_(LT, < )\n 1477  // Implements the helper function for {ASSERT|EXPECT}_GE with int or\n 1478: // enum arguments.\n 1479  GTEST_IMPL_CMP_HELPER_(GE, >=)\n 1480  // Implements the helper function for {ASSERT|EXPECT}_GT with int or\n 1481: // enum arguments.\n 1482  GTEST_IMPL_CMP_HELPER_(GT, > )\n 1483  \n ....\n 2824  }\n 2825  \n 2826: // Converts a TestPartResult::Type enum to human-friendly string\n 2827  // representation.  Both kNonFatalFailure and kFatalFailure are translated\n 2828  // to \"Failure\", as the user usually doesn't care about the difference\n ....\n 2878  // class PrettyUnitTestResultPrinter\n 2879  \n 2880: enum GTestColor {\n 2881    COLOR_DEFAULT,\n 2882    COLOR_RED,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest-filepath_test.cc:\n  254  }\n  255  \n  256: TEST(MakeFileNameTest, GenerateFileNameNumberGtZero) {\n  257    FilePath actual = FilePath::MakeFileName(FilePath(\"foo\"), FilePath(\"bar\"),\n  258        12, \"xml\");\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest-param-test_test.cc:\n  624  class TestGenerationTest : public TestWithParam<int> {\n  625   public:\n  626:   enum {\n  627      PARAMETER_COUNT =\n  628          sizeof(test_generation_params)/sizeof(test_generation_params[0])\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest-printers_test.cc:\n   65  // Some user-defined types for testing the universal value printer.\n   66  \n   67: // An anonymous enum type.\n   68: enum AnonymousEnum {\n   69    kAE1 = -1,\n   70    kAE2 = 1\n   71  };\n   72  \n   73: // An enum without a user-defined printer.\n   74: enum EnumWithoutPrinter {\n   75    kEWP1 = -2,\n   76    kEWP2 = 42\n   77  };\n   78  \n   79: // An enum with a << operator.\n   80: enum EnumWithStreaming {\n   81    kEWS1 = 10\n   82  };\n   83  \n   84: std::ostream& operator<<(std::ostream& os, EnumWithStreaming e) {\n   85    return os << (e == kEWS1 ? \"kEWS1\" : \"invalid\");\n   86  }\n   87  \n   88: // An enum with a PrintTo() function.\n   89: enum EnumWithPrintTo {\n   90    kEWPT1 = 1\n   91  };\n   92  \n   93: void PrintTo(EnumWithPrintTo e, std::ostream* os) {\n   94    *os << (e == kEWPT1 ? \"kEWPT1\" : \"invalid\");\n   95  }\n   ..\n  249  }\n  250  \n  251: // Tests printing various enum types.\n  252  \n  253: TEST(PrintEnumTest, AnonymousEnum) {\n  254    EXPECT_EQ(\"-1\", Print(kAE1));\n  255    EXPECT_EQ(\"1\", Print(kAE2));\n  256  }\n  257  \n  258: TEST(PrintEnumTest, EnumWithoutPrinter) {\n  259    EXPECT_EQ(\"-2\", Print(kEWP1));\n  260    EXPECT_EQ(\"42\", Print(kEWP2));\n  261  }\n  262  \n  263: TEST(PrintEnumTest, EnumWithStreaming) {\n  264    EXPECT_EQ(\"kEWS1\", Print(kEWS1));\n  265:   EXPECT_EQ(\"invalid\", Print(static_cast<EnumWithStreaming>(0)));\n  266  }\n  267  \n  268: TEST(PrintEnumTest, EnumWithPrintTo) {\n  269    EXPECT_EQ(\"kEWPT1\", Print(kEWPT1));\n  270:   EXPECT_EQ(\"invalid\", Print(static_cast<EnumWithPrintTo>(0)));\n  271  }\n  272  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_environment_test.cc:\n   46  namespace {\n   47  \n   48: enum FailureType {\n   49    NO_FAILURE, NON_FATAL_FAILURE, FATAL_FAILURE\n   50  };\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_filter_unittest.py:\n  601                                       [LIST_TESTS_FLAG])\n  602      finally:\n  603:       # This assertion ensures that Google Test enumerated the tests as\n  604        # opposed to running them.\n  605        self.assert_('[==========]' not in output,\n  606:                    'Unexpected output during test enumeration.\\n'\n  607                     'Please ensure that LIST_TESTS_FLAG is assigned the\\n'\n  608                     'correct flag value for listing Google Test tests.')\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_output_test_.cc:\n  459  }\n  460  \n  461: TEST(AddFailureAtTest, MessageContainsSpecifiedFileAndLineNumber) {\n  462    ADD_FAILURE_AT(\"foo.cc\", 42) << \"Expected failure in foo.cc\";\n  463  }\n  ...\n  877  class ExpectFailureTest : public testing::Test {\n  878   public:  // Must be public and not protected due to a bug in g++ 3.4.2.\n  879:   enum FailureMode {\n  880      FATAL_FAILURE,\n  881      NONFATAL_FAILURE\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_output_test_golden_lin.txt:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/test/gtest_unittest.cc:\n  389  }\n  390  \n  391: TEST(FormatTimeInMillisAsSecondsTest, FormatsPositiveNumber) {\n  392    EXPECT_EQ(\"0.003\", FormatTimeInMillisAsSeconds(3));\n  393    EXPECT_EQ(\"0.01\", FormatTimeInMillisAsSeconds(10));\n  ...\n  397  }\n  398  \n  399: TEST(FormatTimeInMillisAsSecondsTest, FormatsNegativeNumber) {\n  400    EXPECT_EQ(\"-0.003\", FormatTimeInMillisAsSeconds(-3));\n  401    EXPECT_EQ(\"-0.01\", FormatTimeInMillisAsSeconds(-10));\n  ...\n 1092  class ScopedFakeTestPartResultReporterTest : public Test {\n 1093   public:  // Must be public and not protected due to a bug in g++ 3.4.2.\n 1094:   enum FailureMode {\n 1095      FATAL_FAILURE,\n 1096      NONFATAL_FAILURE\n ....\n 3665  \n 3666  // Tests using ASSERT_EQ on double values.  The purpose is to make\n 3667: // sure that the specialization we did for integer and anonymous enums\n 3668  // isn't used for double arguments.\n 3669  TEST(ExpectTest, ASSERT_EQ_Double) {\n ....\n 3878  }\n 3879  \n 3880: enum NamedEnum {\n 3881    kE1 = 0,\n 3882    kE2 = 1\n 3883  };\n 3884  \n 3885: TEST(AssertionTest, NamedEnum) {\n 3886    EXPECT_EQ(kE1, kE1);\n 3887    EXPECT_LT(kE1, kE2);\n ....\n 3891  \n 3892  // The version of gcc used in XCode 2.2 has a bug and doesn't allow\n 3893: // anonymous enums in assertions.  Therefore the following test is not\n 3894  // done on Mac.\n 3895  // Sun Studio and HP aCC also reject this code.\n 3896  #if !GTEST_OS_MAC && !defined(__SUNPRO_CC) && !defined(__HP_aCC)\n 3897  \n 3898: // Tests using assertions with anonymous enums.\n 3899: enum {\n 3900    kCaseA = -1,\n 3901  \n 3902  # if GTEST_OS_LINUX\n 3903  \n 3904:   // We want to test the case where the size of the anonymous enum is\n 3905    // larger than sizeof(int), to make sure our implementation of the\n 3906:   // assertions doesn't truncate the enums.  However, MSVC\n 3907:   // (incorrectly) doesn't allow an enum value to exceed the range of\n 3908    // an int, so this has to be conditionally compiled.\n 3909    //\n ....\n 3922  };\n 3923  \n 3924: TEST(AssertionTest, AnonymousEnum) {\n 3925  # if GTEST_OS_LINUX\n 3926  \n ....\n 4399  \n 4400  // Tests using EXPECT_EQ on double values.  The purpose is to make\n 4401: // sure that the specialization we did for integer and anonymous enums\n 4402  // isn't used for double arguments.\n 4403  TEST(ExpectTest, EXPECT_EQ_Double) {\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/WhatsNew.txt:\n  103  * Fixed the accelerometer axis rotation relative to the device rotation\n  104  * Fixed race conditions when handling the EGL context on pause/resume\n  105: * Touch devices are available for enumeration immediately after init\n  106  \n  107  Raspberry Pi:\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_assert.h:\n   96      do { (void) sizeof ((condition)); } while (SDL_NULL_WHILE_LOOP_CONDITION)\n   97  \n   98: typedef enum\n   99  {\n  100      SDL_ASSERTION_RETRY,  /**< Retry the assert immediately. */\n  ...\n  111      const char *condition;\n  112      const char *filename;\n  113:     int linenum;\n  114      const char *function;\n  115      const struct SDL_assert_data *next;\n  ...\n  254   *      printf(\"'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\n\",\n  255   *             item->condition, item->function, item->filename,\n  256:  *             item->linenum, item->trigger_count,\n  257   *             item->always_ignore ? \"yes\" : \"no\");\n  258   *      item = item->next;\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_audio.h:\n  361   */\n  362  /* @{ */\n  363: typedef enum\n  364  {\n  365      SDL_AUDIO_STOPPED = 0,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_blendmode.h:\n   23   *  \\file SDL_blendmode.h\n   24   *\n   25:  *  Header file declaring the SDL_BlendMode enumeration\n   26   */\n   27  \n   ..\n   38   *  \\brief The blend mode used in SDL_RenderCopy() and drawing operations.\n   39   */\n   40: typedef enum\n   41  {\n   42      SDL_BLENDMODE_NONE = 0x00000000,     /**< no blending\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_error.h:\n   53  #define SDL_Unsupported()   SDL_Error(SDL_UNSUPPORTED)\n   54  #define SDL_InvalidParamError(param)    SDL_SetError(\"Parameter '%s' is invalid\", (param))\n   55: typedef enum\n   56  {\n   57      SDL_ENOMEM,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_events.h:\n   53   * \\brief The types of events that can be delivered.\n   54   */\n   55: typedef enum\n   56  {\n   57      SDL_FIRSTEVENT     = 0,     /**< Unused (do not remove) */\n   ..\n  546  \n  547  /* @{ */\n  548: typedef enum\n  549  {\n  550      SDL_ADDEVENT,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_gamecontroller.h:\n   57  \n   58  \n   59: typedef enum\n   60  {\n   61      SDL_CONTROLLER_BINDTYPE_NONE = 0,\n   ..\n  210   *  The list of axes available from a controller\n  211   */\n  212: typedef enum\n  213  {\n  214      SDL_CONTROLLER_AXIS_INVALID = -1,\n  ...\n  228  \n  229  /**\n  230:  *  turn this axis enum into a string mapping\n  231   */\n  232  extern DECLSPEC const char* SDLCALL SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);\n  ...\n  253   *  The list of buttons available from a controller\n  254   */\n  255: typedef enum\n  256  {\n  257      SDL_CONTROLLER_BUTTON_INVALID = -1,\n  ...\n  280  \n  281  /**\n  282:  *  turn this button enum into a string mapping\n  283   */\n  284  extern DECLSPEC const char* SDLCALL SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_hints.h:\n  438  \n  439  /**\n  440:  *  \\brief  An enumeration of hint priorities\n  441   */\n  442: typedef enum\n  443  {\n  444      SDL_HINT_DEFAULT,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_image.h:\n   56  extern DECLSPEC const SDL_version * SDLCALL IMG_Linked_Version(void);\n   57  \n   58: typedef enum\n   59  {\n   60      IMG_INIT_JPG = 0x00000001,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_keycode.h:\n   45  #define SDL_SCANCODE_TO_KEYCODE(X)  (X | SDLK_SCANCODE_MASK)\n   46  \n   47: enum\n   48  {\n   49      SDLK_UNKNOWN = 0,\n   ..\n  313  \n  314  /**\n  315:  * \\brief Enumeration of valid key mods (possibly OR'd together).\n  316   */\n  317: typedef enum\n  318  {\n  319      KMOD_NONE = 0x0000,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_log.h:\n   62   *  CRITICAL level.\n   63   */\n   64: enum\n   65  {\n   66      SDL_LOG_CATEGORY_APPLICATION,\n   ..\n   87  \n   88      /* Beyond this point is reserved for application use, e.g.\n   89:        enum {\n   90             MYAPP_CATEGORY_AWESOME1 = SDL_LOG_CATEGORY_CUSTOM,\n   91             MYAPP_CATEGORY_AWESOME2,\n   ..\n  100   *  \\brief The predefined log priorities\n  101   */\n  102: typedef enum\n  103  {\n  104      SDL_LOG_PRIORITY_VERBOSE = 1,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_messagebox.h:\n   35   * \\brief SDL_MessageBox flags. If supported will display warning icon, etc.\n   36   */\n   37: typedef enum\n   38  {\n   39      SDL_MESSAGEBOX_ERROR        = 0x00000010,   /**< error dialog */\n   ..\n   45   * \\brief Flags for SDL_MessageBoxButtonData.\n   46   */\n   47: typedef enum\n   48  {\n   49      SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001,  /**< Marks the default button when return is hit */\n   ..\n   69  } SDL_MessageBoxColor;\n   70  \n   71: typedef enum\n   72  {\n   73      SDL_MESSAGEBOX_COLOR_BACKGROUND,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_mixer.h:\n   65  extern DECLSPEC const SDL_version * SDLCALL Mix_Linked_Version(void);\n   66  \n   67: typedef enum\n   68  {\n   69      MIX_INIT_FLAC        = 0x00000001,\n   ..\n  109  \n  110  /* The different fading types supported */\n  111: typedef enum {\n  112      MIX_NO_FADING,\n  113      MIX_FADING_OUT,\n  ...\n  115  } Mix_Fading;\n  116  \n  117: typedef enum {\n  118      MUS_NONE,\n  119      MUS_CMD,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_mouse.h:\n   44   * \\brief Cursor types for SDL_CreateSystemCursor.\n   45   */\n   46: typedef enum\n   47  {\n   48      SDL_SYSTEM_CURSOR_ARROW,     /**< Arrow */\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_opengl.h:\n 5203  \n 5204  #ifndef GL_ARB_debug_output\n 5205: typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);\n 5206  #endif\n 5207  \n 5208  #ifndef GL_AMD_debug_output\n 5209: typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);\n 5210  #endif\n 5211  \n ....\n 5218  #ifdef GL_GLEXT_PROTOTYPES\n 5219  GLAPI void APIENTRY glBlendColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\n 5220: GLAPI void APIENTRY glBlendEquation (GLenum mode);\n 5221: GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);\n 5222: GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 5223: GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);\n 5224: GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 5225  #endif /* GL_GLEXT_PROTOTYPES */\n 5226  typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\n 5227: typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);\n 5228: typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);\n 5229: typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 5230: typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);\n 5231: typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 5232  #endif\n 5233  \n ....\n 5235  #define GL_VERSION_1_2_DEPRECATED 1\n 5236  #ifdef GL_GLEXT_PROTOTYPES\n 5237: GLAPI void APIENTRY glColorTable (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);\n 5238: GLAPI void APIENTRY glColorTableParameterfv (GLenum target, GLenum pname, const GLfloat *params);\n 5239: GLAPI void APIENTRY glColorTableParameteriv (GLenum target, GLenum pname, const GLint *params);\n 5240: GLAPI void APIENTRY glCopyColorTable (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);\n 5241: GLAPI void APIENTRY glGetColorTable (GLenum target, GLenum format, GLenum type, GLvoid *table);\n 5242: GLAPI void APIENTRY glGetColorTableParameterfv (GLenum target, GLenum pname, GLfloat *params);\n 5243: GLAPI void APIENTRY glGetColorTableParameteriv (GLenum target, GLenum pname, GLint *params);\n 5244: GLAPI void APIENTRY glColorSubTable (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);\n 5245: GLAPI void APIENTRY glCopyColorSubTable (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);\n 5246: GLAPI void APIENTRY glConvolutionFilter1D (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);\n 5247: GLAPI void APIENTRY glConvolutionFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);\n 5248: GLAPI void APIENTRY glConvolutionParameterf (GLenum target, GLenum pname, GLfloat params);\n 5249: GLAPI void APIENTRY glConvolutionParameterfv (GLenum target, GLenum pname, const GLfloat *params);\n 5250: GLAPI void APIENTRY glConvolutionParameteri (GLenum target, GLenum pname, GLint params);\n 5251: GLAPI void APIENTRY glConvolutionParameteriv (GLenum target, GLenum pname, const GLint *params);\n 5252: GLAPI void APIENTRY glCopyConvolutionFilter1D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);\n 5253: GLAPI void APIENTRY glCopyConvolutionFilter2D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);\n 5254: GLAPI void APIENTRY glGetConvolutionFilter (GLenum target, GLenum format, GLenum type, GLvoid *image);\n 5255: GLAPI void APIENTRY glGetConvolutionParameterfv (GLenum target, GLenum pname, GLfloat *params);\n 5256: GLAPI void APIENTRY glGetConvolutionParameteriv (GLenum target, GLenum pname, GLint *params);\n 5257: GLAPI void APIENTRY glGetSeparableFilter (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);\n 5258: GLAPI void APIENTRY glSeparableFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);\n 5259: GLAPI void APIENTRY glGetHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);\n 5260: GLAPI void APIENTRY glGetHistogramParameterfv (GLenum target, GLenum pname, GLfloat *params);\n 5261: GLAPI void APIENTRY glGetHistogramParameteriv (GLenum target, GLenum pname, GLint *params);\n 5262: GLAPI void APIENTRY glGetMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);\n 5263: GLAPI void APIENTRY glGetMinmaxParameterfv (GLenum target, GLenum pname, GLfloat *params);\n 5264: GLAPI void APIENTRY glGetMinmaxParameteriv (GLenum target, GLenum pname, GLint *params);\n 5265: GLAPI void APIENTRY glHistogram (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);\n 5266: GLAPI void APIENTRY glMinmax (GLenum target, GLenum internalformat, GLboolean sink);\n 5267: GLAPI void APIENTRY glResetHistogram (GLenum target);\n 5268: GLAPI void APIENTRY glResetMinmax (GLenum target);\n 5269  #endif /* GL_GLEXT_PROTOTYPES */\n 5270: typedef void (APIENTRYP PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);\n 5271: typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);\n 5272: typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);\n 5273: typedef void (APIENTRYP PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);\n 5274: typedef void (APIENTRYP PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);\n 5275: typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);\n 5276: typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);\n 5277: typedef void (APIENTRYP PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);\n 5278: typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);\n 5279: typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);\n 5280: typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);\n 5281: typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);\n 5282: typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);\n 5283: typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);\n 5284: typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);\n 5285: typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);\n 5286: typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);\n 5287: typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);\n 5288: typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);\n 5289: typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);\n 5290: typedef void (APIENTRYP PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);\n 5291: typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);\n 5292: typedef void (APIENTRYP PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);\n 5293: typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);\n 5294: typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);\n 5295: typedef void (APIENTRYP PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);\n 5296: typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);\n 5297: typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);\n 5298: typedef void (APIENTRYP PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);\n 5299: typedef void (APIENTRYP PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);\n 5300: typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC) (GLenum target);\n 5301: typedef void (APIENTRYP PFNGLRESETMINMAXPROC) (GLenum target);\n 5302  #endif\n 5303  \n ....\n 5305  #define GL_VERSION_1_3 1\n 5306  #ifdef GL_GLEXT_PROTOTYPES\n 5307: GLAPI void APIENTRY glActiveTexture (GLenum texture);\n 5308  GLAPI void APIENTRY glSampleCoverage (GLclampf value, GLboolean invert);\n 5309: GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);\n 5310: GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);\n 5311: GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);\n 5312: GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);\n 5313: GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);\n 5314: GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);\n 5315: GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, GLvoid *img);\n 5316  #endif /* GL_GLEXT_PROTOTYPES */\n 5317: typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);\n 5318  typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);\n 5319: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);\n 5320: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);\n 5321: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);\n 5322: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);\n 5323: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);\n 5324: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);\n 5325: typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);\n 5326  #endif\n 5327  \n ....\n 5329  #define GL_VERSION_1_3_DEPRECATED 1\n 5330  #ifdef GL_GLEXT_PROTOTYPES\n 5331: GLAPI void APIENTRY glClientActiveTexture (GLenum texture);\n 5332: GLAPI void APIENTRY glMultiTexCoord1d (GLenum target, GLdouble s);\n 5333: GLAPI void APIENTRY glMultiTexCoord1dv (GLenum target, const GLdouble *v);\n 5334: GLAPI void APIENTRY glMultiTexCoord1f (GLenum target, GLfloat s);\n 5335: GLAPI void APIENTRY glMultiTexCoord1fv (GLenum target, const GLfloat *v);\n 5336: GLAPI void APIENTRY glMultiTexCoord1i (GLenum target, GLint s);\n 5337: GLAPI void APIENTRY glMultiTexCoord1iv (GLenum target, const GLint *v);\n 5338: GLAPI void APIENTRY glMultiTexCoord1s (GLenum target, GLshort s);\n 5339: GLAPI void APIENTRY glMultiTexCoord1sv (GLenum target, const GLshort *v);\n 5340: GLAPI void APIENTRY glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble t);\n 5341: GLAPI void APIENTRY glMultiTexCoord2dv (GLenum target, const GLdouble *v);\n 5342: GLAPI void APIENTRY glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat t);\n 5343: GLAPI void APIENTRY glMultiTexCoord2fv (GLenum target, const GLfloat *v);\n 5344: GLAPI void APIENTRY glMultiTexCoord2i (GLenum target, GLint s, GLint t);\n 5345: GLAPI void APIENTRY glMultiTexCoord2iv (GLenum target, const GLint *v);\n 5346: GLAPI void APIENTRY glMultiTexCoord2s (GLenum target, GLshort s, GLshort t);\n 5347: GLAPI void APIENTRY glMultiTexCoord2sv (GLenum target, const GLshort *v);\n 5348: GLAPI void APIENTRY glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble t, GLdouble r);\n 5349: GLAPI void APIENTRY glMultiTexCoord3dv (GLenum target, const GLdouble *v);\n 5350: GLAPI void APIENTRY glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t, GLfloat r);\n 5351: GLAPI void APIENTRY glMultiTexCoord3fv (GLenum target, const GLfloat *v);\n 5352: GLAPI void APIENTRY glMultiTexCoord3i (GLenum target, GLint s, GLint t, GLint r);\n 5353: GLAPI void APIENTRY glMultiTexCoord3iv (GLenum target, const GLint *v);\n 5354: GLAPI void APIENTRY glMultiTexCoord3s (GLenum target, GLshort s, GLshort t, GLshort r);\n 5355: GLAPI void APIENTRY glMultiTexCoord3sv (GLenum target, const GLshort *v);\n 5356: GLAPI void APIENTRY glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);\n 5357: GLAPI void APIENTRY glMultiTexCoord4dv (GLenum target, const GLdouble *v);\n 5358: GLAPI void APIENTRY glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);\n 5359: GLAPI void APIENTRY glMultiTexCoord4fv (GLenum target, const GLfloat *v);\n 5360: GLAPI void APIENTRY glMultiTexCoord4i (GLenum target, GLint s, GLint t, GLint r, GLint q);\n 5361: GLAPI void APIENTRY glMultiTexCoord4iv (GLenum target, const GLint *v);\n 5362: GLAPI void APIENTRY glMultiTexCoord4s (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);\n 5363: GLAPI void APIENTRY glMultiTexCoord4sv (GLenum target, const GLshort *v);\n 5364  GLAPI void APIENTRY glLoadTransposeMatrixf (const GLfloat *m);\n 5365  GLAPI void APIENTRY glLoadTransposeMatrixd (const GLdouble *m);\n ....\n 5367  GLAPI void APIENTRY glMultTransposeMatrixd (const GLdouble *m);\n 5368  #endif /* GL_GLEXT_PROTOTYPES */\n 5369: typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);\n 5370: typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);\n 5371: typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);\n 5372: typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);\n 5373: typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);\n 5374: typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);\n 5375: typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);\n 5376: typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);\n 5377: typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);\n 5378: typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);\n 5379: typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);\n 5380: typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);\n 5381: typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);\n 5382: typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);\n 5383: typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);\n 5384: typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);\n 5385: typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);\n 5386: typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);\n 5387: typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);\n 5388: typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);\n 5389: typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);\n 5390: typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);\n 5391: typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);\n 5392: typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);\n 5393: typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);\n 5394: typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);\n 5395: typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);\n 5396: typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);\n 5397: typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);\n 5398: typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);\n 5399: typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);\n 5400: typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);\n 5401: typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);\n 5402  typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat *m);\n 5403  typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble *m);\n ....\n 5409  #define GL_VERSION_1_4 1\n 5410  #ifdef GL_GLEXT_PROTOTYPES\n 5411: GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 5412: GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);\n 5413: GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);\n 5414: GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);\n 5415: GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params);\n 5416: GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);\n 5417: GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);\n 5418  #endif /* GL_GLEXT_PROTOTYPES */\n 5419: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 5420: typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);\n 5421: typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);\n 5422: typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);\n 5423: typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);\n 5424: typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);\n 5425: typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);\n 5426  #endif\n 5427  \n ....\n 5433  GLAPI void APIENTRY glFogCoordd (GLdouble coord);\n 5434  GLAPI void APIENTRY glFogCoorddv (const GLdouble *coord);\n 5435: GLAPI void APIENTRY glFogCoordPointer (GLenum type, GLsizei stride, const GLvoid *pointer);\n 5436  GLAPI void APIENTRY glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue);\n 5437  GLAPI void APIENTRY glSecondaryColor3bv (const GLbyte *v);\n ....\n 5450  GLAPI void APIENTRY glSecondaryColor3us (GLushort red, GLushort green, GLushort blue);\n 5451  GLAPI void APIENTRY glSecondaryColor3usv (const GLushort *v);\n 5452: GLAPI void APIENTRY glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 5453  GLAPI void APIENTRY glWindowPos2d (GLdouble x, GLdouble y);\n 5454  GLAPI void APIENTRY glWindowPos2dv (const GLdouble *v);\n ....\n 5472  typedef void (APIENTRYP PFNGLFOGCOORDDPROC) (GLdouble coord);\n 5473  typedef void (APIENTRYP PFNGLFOGCOORDDVPROC) (const GLdouble *coord);\n 5474: typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);\n 5475  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);\n 5476  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);\n ....\n 5489  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);\n 5490  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);\n 5491: typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 5492  typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);\n 5493  typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);\n ....\n 5514  GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);\n 5515  GLAPI GLboolean APIENTRY glIsQuery (GLuint id);\n 5516: GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);\n 5517: GLAPI void APIENTRY glEndQuery (GLenum target);\n 5518: GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params);\n 5519: GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);\n 5520: GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);\n 5521: GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);\n 5522  GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);\n 5523  GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);\n 5524  GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);\n 5525: GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);\n 5526: GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);\n 5527: GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);\n 5528: GLAPI GLvoid* APIENTRY glMapBuffer (GLenum target, GLenum access);\n 5529: GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);\n 5530: GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);\n 5531: GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, GLvoid* *params);\n 5532  #endif /* GL_GLEXT_PROTOTYPES */\n 5533  typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);\n 5534  typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);\n 5535  typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);\n 5536: typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);\n 5537: typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);\n 5538: typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);\n 5539: typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);\n 5540: typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);\n 5541: typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);\n 5542  typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);\n 5543  typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);\n 5544  typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);\n 5545: typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);\n 5546: typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);\n 5547: typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);\n 5548: typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);\n 5549: typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);\n 5550: typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);\n 5551: typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid* *params);\n 5552  #endif\n 5553  \n ....\n 5555  #define GL_VERSION_2_0 1\n 5556  #ifdef GL_GLEXT_PROTOTYPES\n 5557: GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);\n 5558: GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);\n 5559: GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);\n 5560: GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);\n 5561: GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);\n 5562  GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);\n 5563  GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);\n 5564  GLAPI void APIENTRY glCompileShader (GLuint shader);\n 5565  GLAPI GLuint APIENTRY glCreateProgram (void);\n 5566: GLAPI GLuint APIENTRY glCreateShader (GLenum type);\n 5567  GLAPI void APIENTRY glDeleteProgram (GLuint program);\n 5568  GLAPI void APIENTRY glDeleteShader (GLuint shader);\n ....\n 5570  GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);\n 5571  GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);\n 5572: GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);\n 5573: GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);\n 5574  GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);\n 5575  GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name);\n 5576: GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params);\n 5577  GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);\n 5578: GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params);\n 5579  GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);\n 5580  GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);\n ....\n 5582  GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params);\n 5583  GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params);\n 5584: GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);\n 5585: GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);\n 5586: GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);\n 5587: GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, GLvoid* *pointer);\n 5588  GLAPI GLboolean APIENTRY glIsProgram (GLuint program);\n 5589  GLAPI GLboolean APIENTRY glIsShader (GLuint shader);\n ....\n 5647  GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);\n 5648  GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);\n 5649: GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);\n 5650  #endif /* GL_GLEXT_PROTOTYPES */\n 5651: typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);\n 5652: typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);\n 5653: typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);\n 5654: typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);\n 5655: typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);\n 5656  typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);\n 5657  typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);\n 5658  typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);\n 5659  typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);\n 5660: typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);\n 5661  typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);\n 5662  typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);\n ....\n 5664  typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);\n 5665  typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);\n 5666: typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);\n 5667: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);\n 5668  typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);\n 5669  typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);\n 5670: typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);\n 5671  typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);\n 5672: typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);\n 5673  typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);\n 5674  typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);\n ....\n 5676  typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);\n 5677  typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);\n 5678: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);\n 5679: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);\n 5680: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);\n 5681: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);\n 5682  typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);\n 5683  typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);\n ....\n 5741  typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);\n 5742  typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);\n 5743: typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);\n 5744  #endif\n 5745  \n ....\n 5770  #ifdef GL_GLEXT_PROTOTYPES\n 5771  GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);\n 5772: GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);\n 5773: GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data);\n 5774: GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);\n 5775: GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);\n 5776: GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);\n 5777: GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);\n 5778  GLAPI void APIENTRY glEndTransformFeedback (void);\n 5779: GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);\n 5780: GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer);\n 5781: GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);\n 5782: GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);\n 5783: GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);\n 5784: GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);\n 5785  GLAPI void APIENTRY glEndConditionalRender (void);\n 5786: GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 5787: GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);\n 5788: GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);\n 5789  GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);\n 5790  GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);\n ....\n 5818  GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value);\n 5819  GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value);\n 5820: GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);\n 5821: GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);\n 5822: GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);\n 5823: GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);\n 5824: GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value);\n 5825: GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value);\n 5826: GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value);\n 5827: GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);\n 5828: GLAPI const GLubyte * APIENTRY glGetStringi (GLenum name, GLuint index);\n 5829  #endif /* GL_GLEXT_PROTOTYPES */\n 5830  typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);\n 5831: typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);\n 5832: typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);\n 5833: typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);\n 5834: typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);\n 5835: typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);\n 5836: typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);\n 5837  typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void);\n 5838: typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);\n 5839: typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);\n 5840: typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);\n 5841: typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);\n 5842: typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);\n 5843: typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);\n 5844  typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void);\n 5845: typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 5846: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);\n 5847: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);\n 5848  typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);\n 5849  typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);\n ....\n 5877  typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);\n 5878  typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);\n 5879: typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);\n 5880: typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);\n 5881: typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);\n 5882: typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);\n 5883: typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);\n 5884: typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);\n 5885: typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);\n 5886: typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);\n 5887: typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);\n 5888  #endif\n 5889  \n ....\n 5894  /* ARB_uniform_buffer_object */\n 5895  #ifdef GL_GLEXT_PROTOTYPES\n 5896: GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei primcount);\n 5897: GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);\n 5898: GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer);\n 5899  GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);\n 5900  #endif /* GL_GLEXT_PROTOTYPES */\n 5901: typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);\n 5902: typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);\n 5903: typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);\n 5904  typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);\n 5905  #endif\n ....\n 5913  /* ARB_texture_multisample */\n 5914  #ifdef GL_GLEXT_PROTOTYPES\n 5915: GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data);\n 5916: GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params);\n 5917: GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level);\n 5918  #endif /* GL_GLEXT_PROTOTYPES */\n 5919: typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);\n 5920: typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);\n 5921: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);\n 5922  #endif\n 5923  \n ....\n 5956  #ifdef GL_GLEXT_PROTOTYPES\n 5957  GLAPI void APIENTRY glMinSampleShading (GLclampf value);\n 5958: GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);\n 5959: GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 5960: GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);\n 5961: GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 5962  #endif /* GL_GLEXT_PROTOTYPES */\n 5963  typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLclampf value);\n 5964: typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);\n 5965: typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 5966: typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);\n 5967: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 5968  #endif\n 5969  \n ....\n 5982  #define GL_ARB_multitexture 1\n 5983  #ifdef GL_GLEXT_PROTOTYPES\n 5984: GLAPI void APIENTRY glActiveTextureARB (GLenum texture);\n 5985: GLAPI void APIENTRY glClientActiveTextureARB (GLenum texture);\n 5986: GLAPI void APIENTRY glMultiTexCoord1dARB (GLenum target, GLdouble s);\n 5987: GLAPI void APIENTRY glMultiTexCoord1dvARB (GLenum target, const GLdouble *v);\n 5988: GLAPI void APIENTRY glMultiTexCoord1fARB (GLenum target, GLfloat s);\n 5989: GLAPI void APIENTRY glMultiTexCoord1fvARB (GLenum target, const GLfloat *v);\n 5990: GLAPI void APIENTRY glMultiTexCoord1iARB (GLenum target, GLint s);\n 5991: GLAPI void APIENTRY glMultiTexCoord1ivARB (GLenum target, const GLint *v);\n 5992: GLAPI void APIENTRY glMultiTexCoord1sARB (GLenum target, GLshort s);\n 5993: GLAPI void APIENTRY glMultiTexCoord1svARB (GLenum target, const GLshort *v);\n 5994: GLAPI void APIENTRY glMultiTexCoord2dARB (GLenum target, GLdouble s, GLdouble t);\n 5995: GLAPI void APIENTRY glMultiTexCoord2dvARB (GLenum target, const GLdouble *v);\n 5996: GLAPI void APIENTRY glMultiTexCoord2fARB (GLenum target, GLfloat s, GLfloat t);\n 5997: GLAPI void APIENTRY glMultiTexCoord2fvARB (GLenum target, const GLfloat *v);\n 5998: GLAPI void APIENTRY glMultiTexCoord2iARB (GLenum target, GLint s, GLint t);\n 5999: GLAPI void APIENTRY glMultiTexCoord2ivARB (GLenum target, const GLint *v);\n 6000: GLAPI void APIENTRY glMultiTexCoord2sARB (GLenum target, GLshort s, GLshort t);\n 6001: GLAPI void APIENTRY glMultiTexCoord2svARB (GLenum target, const GLshort *v);\n 6002: GLAPI void APIENTRY glMultiTexCoord3dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r);\n 6003: GLAPI void APIENTRY glMultiTexCoord3dvARB (GLenum target, const GLdouble *v);\n 6004: GLAPI void APIENTRY glMultiTexCoord3fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r);\n 6005: GLAPI void APIENTRY glMultiTexCoord3fvARB (GLenum target, const GLfloat *v);\n 6006: GLAPI void APIENTRY glMultiTexCoord3iARB (GLenum target, GLint s, GLint t, GLint r);\n 6007: GLAPI void APIENTRY glMultiTexCoord3ivARB (GLenum target, const GLint *v);\n 6008: GLAPI void APIENTRY glMultiTexCoord3sARB (GLenum target, GLshort s, GLshort t, GLshort r);\n 6009: GLAPI void APIENTRY glMultiTexCoord3svARB (GLenum target, const GLshort *v);\n 6010: GLAPI void APIENTRY glMultiTexCoord4dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);\n 6011: GLAPI void APIENTRY glMultiTexCoord4dvARB (GLenum target, const GLdouble *v);\n 6012: GLAPI void APIENTRY glMultiTexCoord4fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);\n 6013: GLAPI void APIENTRY glMultiTexCoord4fvARB (GLenum target, const GLfloat *v);\n 6014: GLAPI void APIENTRY glMultiTexCoord4iARB (GLenum target, GLint s, GLint t, GLint r, GLint q);\n 6015: GLAPI void APIENTRY glMultiTexCoord4ivARB (GLenum target, const GLint *v);\n 6016: GLAPI void APIENTRY glMultiTexCoord4sARB (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);\n 6017: GLAPI void APIENTRY glMultiTexCoord4svARB (GLenum target, const GLshort *v);\n 6018  #endif /* GL_GLEXT_PROTOTYPES */\n 6019: typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC) (GLenum texture);\n 6020: typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);\n 6021: typedef void (APIENTRYP PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);\n 6022: typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);\n 6023: typedef void (APIENTRYP PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);\n 6024: typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);\n 6025: typedef void (APIENTRYP PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);\n 6026: typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);\n 6027: typedef void (APIENTRYP PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);\n 6028: typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);\n 6029: typedef void (APIENTRYP PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);\n 6030: typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);\n 6031: typedef void (APIENTRYP PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);\n 6032: typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);\n 6033: typedef void (APIENTRYP PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);\n 6034: typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);\n 6035: typedef void (APIENTRYP PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);\n 6036: typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);\n 6037: typedef void (APIENTRYP PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);\n 6038: typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);\n 6039: typedef void (APIENTRYP PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);\n 6040: typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);\n 6041: typedef void (APIENTRYP PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);\n 6042: typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);\n 6043: typedef void (APIENTRYP PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);\n 6044: typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);\n 6045: typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);\n 6046: typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);\n 6047: typedef void (APIENTRYP PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);\n 6048: typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);\n 6049: typedef void (APIENTRYP PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);\n 6050: typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);\n 6051: typedef void (APIENTRYP PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);\n 6052: typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);\n 6053  #endif\n 6054  \n ....\n 6086  #define GL_ARB_texture_compression 1\n 6087  #ifdef GL_GLEXT_PROTOTYPES\n 6088: GLAPI void APIENTRY glCompressedTexImage3DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);\n 6089: GLAPI void APIENTRY glCompressedTexImage2DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);\n 6090: GLAPI void APIENTRY glCompressedTexImage1DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);\n 6091: GLAPI void APIENTRY glCompressedTexSubImage3DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);\n 6092: GLAPI void APIENTRY glCompressedTexSubImage2DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);\n 6093: GLAPI void APIENTRY glCompressedTexSubImage1DARB (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);\n 6094: GLAPI void APIENTRY glGetCompressedTexImageARB (GLenum target, GLint level, GLvoid *img);\n 6095  #endif /* GL_GLEXT_PROTOTYPES */\n 6096: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);\n 6097: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);\n 6098: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);\n 6099: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);\n 6100: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);\n 6101: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);\n 6102: typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, GLvoid *img);\n 6103  #endif\n 6104  \n ....\n 6110  #define GL_ARB_point_parameters 1\n 6111  #ifdef GL_GLEXT_PROTOTYPES\n 6112: GLAPI void APIENTRY glPointParameterfARB (GLenum pname, GLfloat param);\n 6113: GLAPI void APIENTRY glPointParameterfvARB (GLenum pname, const GLfloat *params);\n 6114  #endif /* GL_GLEXT_PROTOTYPES */\n 6115: typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);\n 6116: typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);\n 6117  #endif\n 6118  \n ....\n 6128  GLAPI void APIENTRY glWeightusvARB (GLint size, const GLushort *weights);\n 6129  GLAPI void APIENTRY glWeightuivARB (GLint size, const GLuint *weights);\n 6130: GLAPI void APIENTRY glWeightPointerARB (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 6131  GLAPI void APIENTRY glVertexBlendARB (GLint count);\n 6132  #endif /* GL_GLEXT_PROTOTYPES */\n ....\n 6139  typedef void (APIENTRYP PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);\n 6140  typedef void (APIENTRYP PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);\n 6141: typedef void (APIENTRYP PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 6142  typedef void (APIENTRYP PFNGLVERTEXBLENDARBPROC) (GLint count);\n 6143  #endif\n ....\n 6150  GLAPI void APIENTRY glMatrixIndexusvARB (GLint size, const GLushort *indices);\n 6151  GLAPI void APIENTRY glMatrixIndexuivARB (GLint size, const GLuint *indices);\n 6152: GLAPI void APIENTRY glMatrixIndexPointerARB (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 6153  #endif /* GL_GLEXT_PROTOTYPES */\n 6154  typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);\n ....\n 6156  typedef void (APIENTRYP PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);\n 6157  typedef void (APIENTRYP PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);\n 6158: typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 6159  #endif\n 6160  \n ....\n 6264  GLAPI void APIENTRY glVertexAttrib4uivARB (GLuint index, const GLuint *v);\n 6265  GLAPI void APIENTRY glVertexAttrib4usvARB (GLuint index, const GLushort *v);\n 6266: GLAPI void APIENTRY glVertexAttribPointerARB (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);\n 6267  GLAPI void APIENTRY glEnableVertexAttribArrayARB (GLuint index);\n 6268  GLAPI void APIENTRY glDisableVertexAttribArrayARB (GLuint index);\n 6269: GLAPI void APIENTRY glProgramStringARB (GLenum target, GLenum format, GLsizei len, const GLvoid *string);\n 6270: GLAPI void APIENTRY glBindProgramARB (GLenum target, GLuint program);\n 6271  GLAPI void APIENTRY glDeleteProgramsARB (GLsizei n, const GLuint *programs);\n 6272  GLAPI void APIENTRY glGenProgramsARB (GLsizei n, GLuint *programs);\n 6273: GLAPI void APIENTRY glProgramEnvParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 6274: GLAPI void APIENTRY glProgramEnvParameter4dvARB (GLenum target, GLuint index, const GLdouble *params);\n 6275: GLAPI void APIENTRY glProgramEnvParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 6276: GLAPI void APIENTRY glProgramEnvParameter4fvARB (GLenum target, GLuint index, const GLfloat *params);\n 6277: GLAPI void APIENTRY glProgramLocalParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 6278: GLAPI void APIENTRY glProgramLocalParameter4dvARB (GLenum target, GLuint index, const GLdouble *params);\n 6279: GLAPI void APIENTRY glProgramLocalParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 6280: GLAPI void APIENTRY glProgramLocalParameter4fvARB (GLenum target, GLuint index, const GLfloat *params);\n 6281: GLAPI void APIENTRY glGetProgramEnvParameterdvARB (GLenum target, GLuint index, GLdouble *params);\n 6282: GLAPI void APIENTRY glGetProgramEnvParameterfvARB (GLenum target, GLuint index, GLfloat *params);\n 6283: GLAPI void APIENTRY glGetProgramLocalParameterdvARB (GLenum target, GLuint index, GLdouble *params);\n 6284: GLAPI void APIENTRY glGetProgramLocalParameterfvARB (GLenum target, GLuint index, GLfloat *params);\n 6285: GLAPI void APIENTRY glGetProgramivARB (GLenum target, GLenum pname, GLint *params);\n 6286: GLAPI void APIENTRY glGetProgramStringARB (GLenum target, GLenum pname, GLvoid *string);\n 6287: GLAPI void APIENTRY glGetVertexAttribdvARB (GLuint index, GLenum pname, GLdouble *params);\n 6288: GLAPI void APIENTRY glGetVertexAttribfvARB (GLuint index, GLenum pname, GLfloat *params);\n 6289: GLAPI void APIENTRY glGetVertexAttribivARB (GLuint index, GLenum pname, GLint *params);\n 6290: GLAPI void APIENTRY glGetVertexAttribPointervARB (GLuint index, GLenum pname, GLvoid* *pointer);\n 6291  GLAPI GLboolean APIENTRY glIsProgramARB (GLuint program);\n 6292  #endif /* GL_GLEXT_PROTOTYPES */\n ....\n 6327  typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);\n 6328  typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);\n 6329: typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);\n 6330  typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);\n 6331  typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);\n 6332: typedef void (APIENTRYP PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);\n 6333: typedef void (APIENTRYP PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);\n 6334  typedef void (APIENTRYP PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);\n 6335  typedef void (APIENTRYP PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);\n 6336: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 6337: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);\n 6338: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 6339: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);\n 6340: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 6341: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);\n 6342: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 6343: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);\n 6344: typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);\n 6345: typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);\n 6346: typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);\n 6347: typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);\n 6348: typedef void (APIENTRYP PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);\n 6349: typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, GLvoid *string);\n 6350: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);\n 6351: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);\n 6352: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);\n 6353: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, GLvoid* *pointer);\n 6354  typedef GLboolean (APIENTRYP PFNGLISPROGRAMARBPROC) (GLuint program);\n 6355  #endif\n ....\n 6363  #define GL_ARB_vertex_buffer_object 1\n 6364  #ifdef GL_GLEXT_PROTOTYPES\n 6365: GLAPI void APIENTRY glBindBufferARB (GLenum target, GLuint buffer);\n 6366  GLAPI void APIENTRY glDeleteBuffersARB (GLsizei n, const GLuint *buffers);\n 6367  GLAPI void APIENTRY glGenBuffersARB (GLsizei n, GLuint *buffers);\n 6368  GLAPI GLboolean APIENTRY glIsBufferARB (GLuint buffer);\n 6369: GLAPI void APIENTRY glBufferDataARB (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);\n 6370: GLAPI void APIENTRY glBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);\n 6371: GLAPI void APIENTRY glGetBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);\n 6372: GLAPI GLvoid* APIENTRY glMapBufferARB (GLenum target, GLenum access);\n 6373: GLAPI GLboolean APIENTRY glUnmapBufferARB (GLenum target);\n 6374: GLAPI void APIENTRY glGetBufferParameterivARB (GLenum target, GLenum pname, GLint *params);\n 6375: GLAPI void APIENTRY glGetBufferPointervARB (GLenum target, GLenum pname, GLvoid* *params);\n 6376  #endif /* GL_GLEXT_PROTOTYPES */\n 6377: typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);\n 6378  typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);\n 6379  typedef void (APIENTRYP PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);\n 6380  typedef GLboolean (APIENTRYP PFNGLISBUFFERARBPROC) (GLuint buffer);\n 6381: typedef void (APIENTRYP PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);\n 6382: typedef void (APIENTRYP PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);\n 6383: typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);\n 6384: typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);\n 6385: typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERARBPROC) (GLenum target);\n 6386: typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);\n 6387: typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, GLvoid* *params);\n 6388  #endif\n 6389  \n ....\n 6394  GLAPI void APIENTRY glDeleteQueriesARB (GLsizei n, const GLuint *ids);\n 6395  GLAPI GLboolean APIENTRY glIsQueryARB (GLuint id);\n 6396: GLAPI void APIENTRY glBeginQueryARB (GLenum target, GLuint id);\n 6397: GLAPI void APIENTRY glEndQueryARB (GLenum target);\n 6398: GLAPI void APIENTRY glGetQueryivARB (GLenum target, GLenum pname, GLint *params);\n 6399: GLAPI void APIENTRY glGetQueryObjectivARB (GLuint id, GLenum pname, GLint *params);\n 6400: GLAPI void APIENTRY glGetQueryObjectuivARB (GLuint id, GLenum pname, GLuint *params);\n 6401  #endif /* GL_GLEXT_PROTOTYPES */\n 6402  typedef void (APIENTRYP PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids);\n 6403  typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids);\n 6404  typedef GLboolean (APIENTRYP PFNGLISQUERYARBPROC) (GLuint id);\n 6405: typedef void (APIENTRYP PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);\n 6406: typedef void (APIENTRYP PFNGLENDQUERYARBPROC) (GLenum target);\n 6407: typedef void (APIENTRYP PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params);\n 6408: typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params);\n 6409: typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params);\n 6410  #endif\n 6411  \n ....\n 6414  #ifdef GL_GLEXT_PROTOTYPES\n 6415  GLAPI void APIENTRY glDeleteObjectARB (GLhandleARB obj);\n 6416: GLAPI GLhandleARB APIENTRY glGetHandleARB (GLenum pname);\n 6417  GLAPI void APIENTRY glDetachObjectARB (GLhandleARB containerObj, GLhandleARB attachedObj);\n 6418: GLAPI GLhandleARB APIENTRY glCreateShaderObjectARB (GLenum shaderType);\n 6419  GLAPI void APIENTRY glShaderSourceARB (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);\n 6420  GLAPI void APIENTRY glCompileShaderARB (GLhandleARB shaderObj);\n ....\n 6443  GLAPI void APIENTRY glUniformMatrix3fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);\n 6444  GLAPI void APIENTRY glUniformMatrix4fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);\n 6445: GLAPI void APIENTRY glGetObjectParameterfvARB (GLhandleARB obj, GLenum pname, GLfloat *params);\n 6446: GLAPI void APIENTRY glGetObjectParameterivARB (GLhandleARB obj, GLenum pname, GLint *params);\n 6447  GLAPI void APIENTRY glGetInfoLogARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);\n 6448  GLAPI void APIENTRY glGetAttachedObjectsARB (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);\n 6449  GLAPI GLint APIENTRY glGetUniformLocationARB (GLhandleARB programObj, const GLcharARB *name);\n 6450: GLAPI void APIENTRY glGetActiveUniformARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);\n 6451  GLAPI void APIENTRY glGetUniformfvARB (GLhandleARB programObj, GLint location, GLfloat *params);\n 6452  GLAPI void APIENTRY glGetUniformivARB (GLhandleARB programObj, GLint location, GLint *params);\n ....\n 6454  #endif /* GL_GLEXT_PROTOTYPES */\n 6455  typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);\n 6456: typedef GLhandleARB (APIENTRYP PFNGLGETHANDLEARBPROC) (GLenum pname);\n 6457  typedef void (APIENTRYP PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);\n 6458: typedef GLhandleARB (APIENTRYP PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);\n 6459  typedef void (APIENTRYP PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);\n 6460  typedef void (APIENTRYP PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);\n ....\n 6483  typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);\n 6484  typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);\n 6485: typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);\n 6486: typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);\n 6487  typedef void (APIENTRYP PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);\n 6488  typedef void (APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);\n 6489  typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);\n 6490: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);\n 6491  typedef void (APIENTRYP PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);\n 6492  typedef void (APIENTRYP PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);\n ....\n 6498  #ifdef GL_GLEXT_PROTOTYPES\n 6499  GLAPI void APIENTRY glBindAttribLocationARB (GLhandleARB programObj, GLuint index, const GLcharARB *name);\n 6500: GLAPI void APIENTRY glGetActiveAttribARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);\n 6501  GLAPI GLint APIENTRY glGetAttribLocationARB (GLhandleARB programObj, const GLcharARB *name);\n 6502  #endif /* GL_GLEXT_PROTOTYPES */\n 6503  typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name);\n 6504: typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);\n 6505  typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);\n 6506  #endif\n ....\n 6529  #define GL_ARB_draw_buffers 1\n 6530  #ifdef GL_GLEXT_PROTOTYPES\n 6531: GLAPI void APIENTRY glDrawBuffersARB (GLsizei n, const GLenum *bufs);\n 6532  #endif /* GL_GLEXT_PROTOTYPES */\n 6533: typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs);\n 6534  #endif\n 6535  \n ....\n 6541  #define GL_ARB_color_buffer_float 1\n 6542  #ifdef GL_GLEXT_PROTOTYPES\n 6543: GLAPI void APIENTRY glClampColorARB (GLenum target, GLenum clamp);\n 6544  #endif /* GL_GLEXT_PROTOTYPES */\n 6545: typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);\n 6546  #endif\n 6547  \n ....\n 6565  #define GL_ARB_draw_instanced 1\n 6566  #ifdef GL_GLEXT_PROTOTYPES\n 6567: GLAPI void APIENTRY glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount);\n 6568: GLAPI void APIENTRY glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);\n 6569  #endif /* GL_GLEXT_PROTOTYPES */\n 6570: typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);\n 6571: typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);\n 6572  #endif\n 6573  \n ....\n 6576  #ifdef GL_GLEXT_PROTOTYPES\n 6577  GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);\n 6578: GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);\n 6579  GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);\n 6580  GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);\n 6581: GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);\n 6582: GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);\n 6583  GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);\n 6584: GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);\n 6585  GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);\n 6586  GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);\n 6587: GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);\n 6588: GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 6589: GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 6590: GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);\n 6591: GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);\n 6592: GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params);\n 6593: GLAPI void APIENTRY glGenerateMipmap (GLenum target);\n 6594: GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 6595: GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 6596: GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);\n 6597  #endif /* GL_GLEXT_PROTOTYPES */\n 6598  typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);\n 6599: typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);\n 6600  typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);\n 6601  typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);\n 6602: typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);\n 6603: typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);\n 6604  typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);\n 6605: typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);\n 6606  typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);\n 6607  typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);\n 6608: typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);\n 6609: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 6610: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 6611: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);\n 6612: typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);\n 6613: typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);\n 6614: typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);\n 6615: typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 6616: typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 6617: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);\n 6618  #endif\n 6619  \n ....\n 6625  #define GL_ARB_geometry_shader4 1\n 6626  #ifdef GL_GLEXT_PROTOTYPES\n 6627: GLAPI void APIENTRY glProgramParameteriARB (GLuint program, GLenum pname, GLint value);\n 6628: GLAPI void APIENTRY glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level);\n 6629: GLAPI void APIENTRY glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);\n 6630: GLAPI void APIENTRY glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);\n 6631  #endif /* GL_GLEXT_PROTOTYPES */\n 6632: typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);\n 6633: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);\n 6634: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);\n 6635: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);\n 6636  #endif\n 6637  \n ....\n 6651  #define GL_ARB_map_buffer_range 1\n 6652  #ifdef GL_GLEXT_PROTOTYPES\n 6653: GLAPI GLvoid* APIENTRY glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);\n 6654: GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);\n 6655  #endif /* GL_GLEXT_PROTOTYPES */\n 6656: typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);\n 6657: typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);\n 6658  #endif\n 6659  \n ....\n 6661  #define GL_ARB_texture_buffer_object 1\n 6662  #ifdef GL_GLEXT_PROTOTYPES\n 6663: GLAPI void APIENTRY glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer);\n 6664  #endif /* GL_GLEXT_PROTOTYPES */\n 6665: typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);\n 6666  #endif\n 6667  \n ....\n 6692  #ifdef GL_GLEXT_PROTOTYPES\n 6693  GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);\n 6694: GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);\n 6695  GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);\n 6696  GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);\n 6697: GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);\n 6698  GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);\n 6699  GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);\n 6700  #endif /* GL_GLEXT_PROTOTYPES */\n 6701  typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);\n 6702: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);\n 6703  typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);\n 6704  typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);\n 6705: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);\n 6706  typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);\n 6707  typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);\n ....\n 6715  #define GL_ARB_copy_buffer 1\n 6716  #ifdef GL_GLEXT_PROTOTYPES\n 6717: GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\n 6718  #endif /* GL_GLEXT_PROTOTYPES */\n 6719: typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\n 6720  #endif\n 6721  \n ....\n 6731  #define GL_ARB_draw_elements_base_vertex 1\n 6732  #ifdef GL_GLEXT_PROTOTYPES\n 6733: GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);\n 6734: GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);\n 6735: GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);\n 6736: GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);\n 6737  #endif /* GL_GLEXT_PROTOTYPES */\n 6738: typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);\n 6739: typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);\n 6740: typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);\n 6741: typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);\n 6742  #endif\n 6743  \n ....\n 6749  #define GL_ARB_provoking_vertex 1\n 6750  #ifdef GL_GLEXT_PROTOTYPES\n 6751: GLAPI void APIENTRY glProvokingVertex (GLenum mode);\n 6752  #endif /* GL_GLEXT_PROTOTYPES */\n 6753: typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);\n 6754  #endif\n 6755  \n ....\n 6761  #define GL_ARB_sync 1\n 6762  #ifdef GL_GLEXT_PROTOTYPES\n 6763: GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);\n 6764  GLAPI GLboolean APIENTRY glIsSync (GLsync sync);\n 6765  GLAPI void APIENTRY glDeleteSync (GLsync sync);\n 6766: GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);\n 6767  GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);\n 6768: GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *params);\n 6769: GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);\n 6770  #endif /* GL_GLEXT_PROTOTYPES */\n 6771: typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);\n 6772  typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);\n 6773  typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);\n 6774: typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);\n 6775  typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);\n 6776: typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *params);\n 6777: typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);\n 6778  #endif\n 6779  \n ....\n 6781  #define GL_ARB_texture_multisample 1\n 6782  #ifdef GL_GLEXT_PROTOTYPES\n 6783: GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);\n 6784: GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);\n 6785: GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val);\n 6786  GLAPI void APIENTRY glSampleMaski (GLuint index, GLbitfield mask);\n 6787  #endif /* GL_GLEXT_PROTOTYPES */\n 6788: typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);\n 6789: typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);\n 6790: typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);\n 6791  typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);\n 6792  #endif\n ....\n 6799  #define GL_ARB_draw_buffers_blend 1\n 6800  #ifdef GL_GLEXT_PROTOTYPES\n 6801: GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);\n 6802: GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 6803: GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);\n 6804: GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 6805  #endif /* GL_GLEXT_PROTOTYPES */\n 6806: typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);\n 6807: typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 6808: typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);\n 6809: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 6810  #endif\n 6811  \n ....\n 6833  #define GL_ARB_shading_language_include 1\n 6834  #ifdef GL_GLEXT_PROTOTYPES\n 6835: GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);\n 6836  GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name);\n 6837  GLAPI void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);\n 6838  GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name);\n 6839  GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);\n 6840: GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params);\n 6841  #endif /* GL_GLEXT_PROTOTYPES */\n 6842: typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);\n 6843  typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);\n 6844  typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);\n 6845  typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);\n 6846  typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);\n 6847: typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);\n 6848  #endif\n 6849  \n ....\n 6877  GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);\n 6878  GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);\n 6879: GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);\n 6880: GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param);\n 6881: GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);\n 6882: GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param);\n 6883: GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param);\n 6884: GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param);\n 6885: GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params);\n 6886: GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params);\n 6887: GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params);\n 6888: GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params);\n 6889  #endif /* GL_GLEXT_PROTOTYPES */\n 6890  typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);\n ....\n 6892  typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler);\n 6893  typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);\n 6894: typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);\n 6895: typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);\n 6896: typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);\n 6897: typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);\n 6898: typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);\n 6899: typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);\n 6900: typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);\n 6901: typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);\n 6902: typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);\n 6903: typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);\n 6904  #endif\n 6905  \n ....\n 6915  #define GL_ARB_timer_query 1\n 6916  #ifdef GL_GLEXT_PROTOTYPES\n 6917: GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);\n 6918: GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params);\n 6919: GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params);\n 6920  #endif /* GL_GLEXT_PROTOTYPES */\n 6921: typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);\n 6922: typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);\n 6923: typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);\n 6924  #endif\n 6925  \n ....\n 6927  #define GL_ARB_vertex_type_2_10_10_10_rev 1\n 6928  #ifdef GL_GLEXT_PROTOTYPES\n 6929: GLAPI void APIENTRY glVertexP2ui (GLenum type, GLuint value);\n 6930: GLAPI void APIENTRY glVertexP2uiv (GLenum type, const GLuint *value);\n 6931: GLAPI void APIENTRY glVertexP3ui (GLenum type, GLuint value);\n 6932: GLAPI void APIENTRY glVertexP3uiv (GLenum type, const GLuint *value);\n 6933: GLAPI void APIENTRY glVertexP4ui (GLenum type, GLuint value);\n 6934: GLAPI void APIENTRY glVertexP4uiv (GLenum type, const GLuint *value);\n 6935: GLAPI void APIENTRY glTexCoordP1ui (GLenum type, GLuint coords);\n 6936: GLAPI void APIENTRY glTexCoordP1uiv (GLenum type, const GLuint *coords);\n 6937: GLAPI void APIENTRY glTexCoordP2ui (GLenum type, GLuint coords);\n 6938: GLAPI void APIENTRY glTexCoordP2uiv (GLenum type, const GLuint *coords);\n 6939: GLAPI void APIENTRY glTexCoordP3ui (GLenum type, GLuint coords);\n 6940: GLAPI void APIENTRY glTexCoordP3uiv (GLenum type, const GLuint *coords);\n 6941: GLAPI void APIENTRY glTexCoordP4ui (GLenum type, GLuint coords);\n 6942: GLAPI void APIENTRY glTexCoordP4uiv (GLenum type, const GLuint *coords);\n 6943: GLAPI void APIENTRY glMultiTexCoordP1ui (GLenum texture, GLenum type, GLuint coords);\n 6944: GLAPI void APIENTRY glMultiTexCoordP1uiv (GLenum texture, GLenum type, const GLuint *coords);\n 6945: GLAPI void APIENTRY glMultiTexCoordP2ui (GLenum texture, GLenum type, GLuint coords);\n 6946: GLAPI void APIENTRY glMultiTexCoordP2uiv (GLenum texture, GLenum type, const GLuint *coords);\n 6947: GLAPI void APIENTRY glMultiTexCoordP3ui (GLenum texture, GLenum type, GLuint coords);\n 6948: GLAPI void APIENTRY glMultiTexCoordP3uiv (GLenum texture, GLenum type, const GLuint *coords);\n 6949: GLAPI void APIENTRY glMultiTexCoordP4ui (GLenum texture, GLenum type, GLuint coords);\n 6950: GLAPI void APIENTRY glMultiTexCoordP4uiv (GLenum texture, GLenum type, const GLuint *coords);\n 6951: GLAPI void APIENTRY glNormalP3ui (GLenum type, GLuint coords);\n 6952: GLAPI void APIENTRY glNormalP3uiv (GLenum type, const GLuint *coords);\n 6953: GLAPI void APIENTRY glColorP3ui (GLenum type, GLuint color);\n 6954: GLAPI void APIENTRY glColorP3uiv (GLenum type, const GLuint *color);\n 6955: GLAPI void APIENTRY glColorP4ui (GLenum type, GLuint color);\n 6956: GLAPI void APIENTRY glColorP4uiv (GLenum type, const GLuint *color);\n 6957: GLAPI void APIENTRY glSecondaryColorP3ui (GLenum type, GLuint color);\n 6958: GLAPI void APIENTRY glSecondaryColorP3uiv (GLenum type, const GLuint *color);\n 6959: GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);\n 6960: GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);\n 6961: GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);\n 6962: GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);\n 6963: GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);\n 6964: GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);\n 6965: GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);\n 6966: GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);\n 6967  #endif /* GL_GLEXT_PROTOTYPES */\n 6968: typedef void (APIENTRYP PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);\n 6969: typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value);\n 6970: typedef void (APIENTRYP PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);\n 6971: typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value);\n 6972: typedef void (APIENTRYP PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);\n 6973: typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value);\n 6974: typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);\n 6975: typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords);\n 6976: typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);\n 6977: typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords);\n 6978: typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);\n 6979: typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords);\n 6980: typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);\n 6981: typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords);\n 6982: typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);\n 6983: typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);\n 6984: typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);\n 6985: typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);\n 6986: typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);\n 6987: typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);\n 6988: typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);\n 6989: typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);\n 6990: typedef void (APIENTRYP PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);\n 6991: typedef void (APIENTRYP PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords);\n 6992: typedef void (APIENTRYP PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);\n 6993: typedef void (APIENTRYP PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color);\n 6994: typedef void (APIENTRYP PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);\n 6995: typedef void (APIENTRYP PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color);\n 6996: typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);\n 6997: typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color);\n 6998: typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);\n 6999: typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);\n 7000: typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);\n 7001: typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);\n 7002: typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);\n 7003: typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);\n 7004: typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);\n 7005: typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);\n 7006  #endif\n 7007  \n ....\n 7009  #define GL_ARB_draw_indirect 1\n 7010  #ifdef GL_GLEXT_PROTOTYPES\n 7011: GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const GLvoid *indirect);\n 7012: GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const GLvoid *indirect);\n 7013  #endif /* GL_GLEXT_PROTOTYPES */\n 7014: typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const GLvoid *indirect);\n 7015: typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const GLvoid *indirect);\n 7016  #endif\n 7017  \n ....\n 7065  #define GL_ARB_shader_subroutine 1\n 7066  #ifdef GL_GLEXT_PROTOTYPES\n 7067: GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name);\n 7068: GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name);\n 7069: GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);\n 7070: GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);\n 7071: GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);\n 7072: GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices);\n 7073: GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params);\n 7074: GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values);\n 7075  #endif /* GL_GLEXT_PROTOTYPES */\n 7076: typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);\n 7077: typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);\n 7078: typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);\n 7079: typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);\n 7080: typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);\n 7081: typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);\n 7082: typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);\n 7083: typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);\n 7084  #endif\n 7085  \n ....\n 7087  #define GL_ARB_tessellation_shader 1\n 7088  #ifdef GL_GLEXT_PROTOTYPES\n 7089: GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);\n 7090: GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values);\n 7091  #endif /* GL_GLEXT_PROTOTYPES */\n 7092: typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);\n 7093: typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);\n 7094  #endif\n 7095  \n ....\n 7101  #define GL_ARB_transform_feedback2 1\n 7102  #ifdef GL_GLEXT_PROTOTYPES\n 7103: GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);\n 7104  GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids);\n 7105  GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);\n ....\n 7107  GLAPI void APIENTRY glPauseTransformFeedback (void);\n 7108  GLAPI void APIENTRY glResumeTransformFeedback (void);\n 7109: GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);\n 7110  #endif /* GL_GLEXT_PROTOTYPES */\n 7111: typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);\n 7112  typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);\n 7113  typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);\n ....\n 7115  typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);\n 7116  typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);\n 7117: typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);\n 7118  #endif\n 7119  \n ....\n 7121  #define GL_ARB_transform_feedback3 1\n 7122  #ifdef GL_GLEXT_PROTOTYPES\n 7123: GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream);\n 7124: GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id);\n 7125: GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);\n 7126: GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params);\n 7127  #endif /* GL_GLEXT_PROTOTYPES */\n 7128: typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);\n 7129: typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);\n 7130: typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);\n 7131: typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);\n 7132  #endif\n 7133  \n ....\n 7136  #ifdef GL_GLEXT_PROTOTYPES\n 7137  GLAPI void APIENTRY glReleaseShaderCompiler (void);\n 7138: GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);\n 7139: GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);\n 7140  GLAPI void APIENTRY glDepthRangef (GLclampf n, GLclampf f);\n 7141  GLAPI void APIENTRY glClearDepthf (GLclampf d);\n 7142  #endif /* GL_GLEXT_PROTOTYPES */\n 7143  typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void);\n 7144: typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);\n 7145: typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);\n 7146  typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLclampf n, GLclampf f);\n 7147  typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLclampf d);\n ....\n 7151  #define GL_ARB_get_program_binary 1\n 7152  #ifdef GL_GLEXT_PROTOTYPES\n 7153: GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);\n 7154: GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);\n 7155: GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value);\n 7156  #endif /* GL_GLEXT_PROTOTYPES */\n 7157: typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);\n 7158: typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);\n 7159: typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);\n 7160  #endif\n 7161  \n ....\n 7165  GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);\n 7166  GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program);\n 7167: GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar* *strings);\n 7168  GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);\n 7169  GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines);\n 7170  GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);\n 7171  GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);\n 7172: GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params);\n 7173  GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0);\n 7174  GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value);\n ....\n 7226  typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);\n 7227  typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);\n 7228: typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar* *strings);\n 7229  typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);\n 7230  typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);\n 7231  typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);\n 7232  typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);\n 7233: typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);\n 7234  typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);\n 7235  typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);\n ....\n 7297  GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);\n 7298  GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);\n 7299: GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 7300: GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params);\n 7301  #endif /* GL_GLEXT_PROTOTYPES */\n 7302  typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);\n ....\n 7308  typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);\n 7309  typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);\n 7310: typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 7311: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);\n 7312  #endif\n 7313  \n ....\n 7323  GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLclampd *v);\n 7324  GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLclampd n, GLclampd f);\n 7325: GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data);\n 7326: GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data);\n 7327  #endif /* GL_GLEXT_PROTOTYPES */\n 7328  typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);\n ....\n 7334  typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLclampd *v);\n 7335  typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLclampd n, GLclampd f);\n 7336: typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);\n 7337: typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);\n 7338  #endif\n 7339  \n ....\n 7349  #define GL_ARB_debug_output 1\n 7350  #ifdef GL_GLEXT_PROTOTYPES\n 7351: GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);\n 7352: GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);\n 7353  GLAPI void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const GLvoid *userParam);\n 7354: GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);\n 7355  #endif /* GL_GLEXT_PROTOTYPES */\n 7356: typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);\n 7357: typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);\n 7358  typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const GLvoid *userParam);\n 7359: typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);\n 7360  #endif\n 7361  \n ....\n 7363  #define GL_ARB_robustness 1\n 7364  #ifdef GL_GLEXT_PROTOTYPES\n 7365: GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void);\n 7366: GLAPI void APIENTRY glGetnMapdvARB (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);\n 7367: GLAPI void APIENTRY glGetnMapfvARB (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);\n 7368: GLAPI void APIENTRY glGetnMapivARB (GLenum target, GLenum query, GLsizei bufSize, GLint *v);\n 7369: GLAPI void APIENTRY glGetnPixelMapfvARB (GLenum map, GLsizei bufSize, GLfloat *values);\n 7370: GLAPI void APIENTRY glGetnPixelMapuivARB (GLenum map, GLsizei bufSize, GLuint *values);\n 7371: GLAPI void APIENTRY glGetnPixelMapusvARB (GLenum map, GLsizei bufSize, GLushort *values);\n 7372  GLAPI void APIENTRY glGetnPolygonStippleARB (GLsizei bufSize, GLubyte *pattern);\n 7373: GLAPI void APIENTRY glGetnColorTableARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);\n 7374: GLAPI void APIENTRY glGetnConvolutionFilterARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);\n 7375: GLAPI void APIENTRY glGetnSeparableFilterARB (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);\n 7376: GLAPI void APIENTRY glGetnHistogramARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);\n 7377: GLAPI void APIENTRY glGetnMinmaxARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);\n 7378: GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);\n 7379: GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);\n 7380: GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);\n 7381  GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);\n 7382  GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params);\n ....\n 7384  GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);\n 7385  #endif /* GL_GLEXT_PROTOTYPES */\n 7386: typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);\n 7387: typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);\n 7388: typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);\n 7389: typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v);\n 7390: typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat *values);\n 7391: typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint *values);\n 7392: typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort *values);\n 7393  typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte *pattern);\n 7394: typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);\n 7395: typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);\n 7396: typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);\n 7397: typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);\n 7398: typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);\n 7399: typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);\n 7400: typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);\n 7401: typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);\n 7402  typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);\n 7403  typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);\n ....\n 7437  #define GL_EXT_texture3D 1\n 7438  #ifdef GL_GLEXT_PROTOTYPES\n 7439: GLAPI void APIENTRY glTexImage3DEXT (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 7440: GLAPI void APIENTRY glTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);\n 7441  #endif /* GL_GLEXT_PROTOTYPES */\n 7442: typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 7443: typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);\n 7444  #endif\n 7445  \n ....\n 7447  #define GL_SGIS_texture_filter4 1\n 7448  #ifdef GL_GLEXT_PROTOTYPES\n 7449: GLAPI void APIENTRY glGetTexFilterFuncSGIS (GLenum target, GLenum filter, GLfloat *weights);\n 7450: GLAPI void APIENTRY glTexFilterFuncSGIS (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);\n 7451  #endif /* GL_GLEXT_PROTOTYPES */\n 7452: typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);\n 7453: typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);\n 7454  #endif\n 7455  \n ....\n 7457  #define GL_EXT_subtexture 1\n 7458  #ifdef GL_GLEXT_PROTOTYPES\n 7459: GLAPI void APIENTRY glTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);\n 7460: GLAPI void APIENTRY glTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);\n 7461  #endif /* GL_GLEXT_PROTOTYPES */\n 7462: typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);\n 7463: typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);\n 7464  #endif\n 7465  \n ....\n 7467  #define GL_EXT_copy_texture 1\n 7468  #ifdef GL_GLEXT_PROTOTYPES\n 7469: GLAPI void APIENTRY glCopyTexImage1DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);\n 7470: GLAPI void APIENTRY glCopyTexImage2DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);\n 7471: GLAPI void APIENTRY glCopyTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);\n 7472: GLAPI void APIENTRY glCopyTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 7473: GLAPI void APIENTRY glCopyTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 7474  #endif /* GL_GLEXT_PROTOTYPES */\n 7475: typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);\n 7476: typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);\n 7477: typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);\n 7478: typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 7479: typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 7480  #endif\n 7481  \n ....\n 7483  #define GL_EXT_histogram 1\n 7484  #ifdef GL_GLEXT_PROTOTYPES\n 7485: GLAPI void APIENTRY glGetHistogramEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);\n 7486: GLAPI void APIENTRY glGetHistogramParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);\n 7487: GLAPI void APIENTRY glGetHistogramParameterivEXT (GLenum target, GLenum pname, GLint *params);\n 7488: GLAPI void APIENTRY glGetMinmaxEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);\n 7489: GLAPI void APIENTRY glGetMinmaxParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);\n 7490: GLAPI void APIENTRY glGetMinmaxParameterivEXT (GLenum target, GLenum pname, GLint *params);\n 7491: GLAPI void APIENTRY glHistogramEXT (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);\n 7492: GLAPI void APIENTRY glMinmaxEXT (GLenum target, GLenum internalformat, GLboolean sink);\n 7493: GLAPI void APIENTRY glResetHistogramEXT (GLenum target);\n 7494: GLAPI void APIENTRY glResetMinmaxEXT (GLenum target);\n 7495  #endif /* GL_GLEXT_PROTOTYPES */\n 7496: typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);\n 7497: typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);\n 7498: typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);\n 7499: typedef void (APIENTRYP PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);\n 7500: typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);\n 7501: typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);\n 7502: typedef void (APIENTRYP PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);\n 7503: typedef void (APIENTRYP PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);\n 7504: typedef void (APIENTRYP PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);\n 7505: typedef void (APIENTRYP PFNGLRESETMINMAXEXTPROC) (GLenum target);\n 7506  #endif\n 7507  \n ....\n 7509  #define GL_EXT_convolution 1\n 7510  #ifdef GL_GLEXT_PROTOTYPES\n 7511: GLAPI void APIENTRY glConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);\n 7512: GLAPI void APIENTRY glConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);\n 7513: GLAPI void APIENTRY glConvolutionParameterfEXT (GLenum target, GLenum pname, GLfloat params);\n 7514: GLAPI void APIENTRY glConvolutionParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params);\n 7515: GLAPI void APIENTRY glConvolutionParameteriEXT (GLenum target, GLenum pname, GLint params);\n 7516: GLAPI void APIENTRY glConvolutionParameterivEXT (GLenum target, GLenum pname, const GLint *params);\n 7517: GLAPI void APIENTRY glCopyConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);\n 7518: GLAPI void APIENTRY glCopyConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);\n 7519: GLAPI void APIENTRY glGetConvolutionFilterEXT (GLenum target, GLenum format, GLenum type, GLvoid *image);\n 7520: GLAPI void APIENTRY glGetConvolutionParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);\n 7521: GLAPI void APIENTRY glGetConvolutionParameterivEXT (GLenum target, GLenum pname, GLint *params);\n 7522: GLAPI void APIENTRY glGetSeparableFilterEXT (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);\n 7523: GLAPI void APIENTRY glSeparableFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);\n 7524  #endif /* GL_GLEXT_PROTOTYPES */\n 7525: typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);\n 7526: typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);\n 7527: typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);\n 7528: typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);\n 7529: typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);\n 7530: typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);\n 7531: typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);\n 7532: typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);\n 7533: typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);\n 7534: typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);\n 7535: typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);\n 7536: typedef void (APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);\n 7537: typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);\n 7538  #endif\n 7539  \n ....\n 7545  #define GL_SGI_color_table 1\n 7546  #ifdef GL_GLEXT_PROTOTYPES\n 7547: GLAPI void APIENTRY glColorTableSGI (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);\n 7548: GLAPI void APIENTRY glColorTableParameterfvSGI (GLenum target, GLenum pname, const GLfloat *params);\n 7549: GLAPI void APIENTRY glColorTableParameterivSGI (GLenum target, GLenum pname, const GLint *params);\n 7550: GLAPI void APIENTRY glCopyColorTableSGI (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);\n 7551: GLAPI void APIENTRY glGetColorTableSGI (GLenum target, GLenum format, GLenum type, GLvoid *table);\n 7552: GLAPI void APIENTRY glGetColorTableParameterfvSGI (GLenum target, GLenum pname, GLfloat *params);\n 7553: GLAPI void APIENTRY glGetColorTableParameterivSGI (GLenum target, GLenum pname, GLint *params);\n 7554  #endif /* GL_GLEXT_PROTOTYPES */\n 7555: typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);\n 7556: typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);\n 7557: typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);\n 7558: typedef void (APIENTRYP PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);\n 7559: typedef void (APIENTRYP PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);\n 7560: typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);\n 7561: typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);\n 7562  #endif\n 7563  \n ....\n 7565  #define GL_SGIX_pixel_texture 1\n 7566  #ifdef GL_GLEXT_PROTOTYPES\n 7567: GLAPI void APIENTRY glPixelTexGenSGIX (GLenum mode);\n 7568  #endif /* GL_GLEXT_PROTOTYPES */\n 7569: typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);\n 7570  #endif\n 7571  \n ....\n 7573  #define GL_SGIS_pixel_texture 1\n 7574  #ifdef GL_GLEXT_PROTOTYPES\n 7575: GLAPI void APIENTRY glPixelTexGenParameteriSGIS (GLenum pname, GLint param);\n 7576: GLAPI void APIENTRY glPixelTexGenParameterivSGIS (GLenum pname, const GLint *params);\n 7577: GLAPI void APIENTRY glPixelTexGenParameterfSGIS (GLenum pname, GLfloat param);\n 7578: GLAPI void APIENTRY glPixelTexGenParameterfvSGIS (GLenum pname, const GLfloat *params);\n 7579: GLAPI void APIENTRY glGetPixelTexGenParameterivSGIS (GLenum pname, GLint *params);\n 7580: GLAPI void APIENTRY glGetPixelTexGenParameterfvSGIS (GLenum pname, GLfloat *params);\n 7581  #endif /* GL_GLEXT_PROTOTYPES */\n 7582: typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);\n 7583: typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);\n 7584: typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);\n 7585: typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);\n 7586: typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);\n 7587: typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);\n 7588  #endif\n 7589  \n ....\n 7591  #define GL_SGIS_texture4D 1\n 7592  #ifdef GL_GLEXT_PROTOTYPES\n 7593: GLAPI void APIENTRY glTexImage4DSGIS (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 7594: GLAPI void APIENTRY glTexSubImage4DSGIS (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);\n 7595  #endif /* GL_GLEXT_PROTOTYPES */\n 7596: typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 7597: typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);\n 7598  #endif\n 7599  \n ....\n 7610  #ifdef GL_GLEXT_PROTOTYPES\n 7611  GLAPI GLboolean APIENTRY glAreTexturesResidentEXT (GLsizei n, const GLuint *textures, GLboolean *residences);\n 7612: GLAPI void APIENTRY glBindTextureEXT (GLenum target, GLuint texture);\n 7613  GLAPI void APIENTRY glDeleteTexturesEXT (GLsizei n, const GLuint *textures);\n 7614  GLAPI void APIENTRY glGenTexturesEXT (GLsizei n, GLuint *textures);\n ....\n 7617  #endif /* GL_GLEXT_PROTOTYPES */\n 7618  typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);\n 7619: typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);\n 7620  typedef void (APIENTRYP PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);\n 7621  typedef void (APIENTRYP PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);\n ....\n 7627  #define GL_SGIS_detail_texture 1\n 7628  #ifdef GL_GLEXT_PROTOTYPES\n 7629: GLAPI void APIENTRY glDetailTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points);\n 7630: GLAPI void APIENTRY glGetDetailTexFuncSGIS (GLenum target, GLfloat *points);\n 7631  #endif /* GL_GLEXT_PROTOTYPES */\n 7632: typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);\n 7633: typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);\n 7634  #endif\n 7635  \n ....\n 7637  #define GL_SGIS_sharpen_texture 1\n 7638  #ifdef GL_GLEXT_PROTOTYPES\n 7639: GLAPI void APIENTRY glSharpenTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points);\n 7640: GLAPI void APIENTRY glGetSharpenTexFuncSGIS (GLenum target, GLfloat *points);\n 7641  #endif /* GL_GLEXT_PROTOTYPES */\n 7642: typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);\n 7643: typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);\n 7644  #endif\n 7645  \n ....\n 7656  #ifdef GL_GLEXT_PROTOTYPES\n 7657  GLAPI void APIENTRY glSampleMaskSGIS (GLclampf value, GLboolean invert);\n 7658: GLAPI void APIENTRY glSamplePatternSGIS (GLenum pattern);\n 7659  #endif /* GL_GLEXT_PROTOTYPES */\n 7660  typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);\n 7661: typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);\n 7662  #endif\n 7663  \n ....\n 7670  #ifdef GL_GLEXT_PROTOTYPES\n 7671  GLAPI void APIENTRY glArrayElementEXT (GLint i);\n 7672: GLAPI void APIENTRY glColorPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7673: GLAPI void APIENTRY glDrawArraysEXT (GLenum mode, GLint first, GLsizei count);\n 7674  GLAPI void APIENTRY glEdgeFlagPointerEXT (GLsizei stride, GLsizei count, const GLboolean *pointer);\n 7675: GLAPI void APIENTRY glGetPointervEXT (GLenum pname, GLvoid* *params);\n 7676: GLAPI void APIENTRY glIndexPointerEXT (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7677: GLAPI void APIENTRY glNormalPointerEXT (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7678: GLAPI void APIENTRY glTexCoordPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7679: GLAPI void APIENTRY glVertexPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7680  #endif /* GL_GLEXT_PROTOTYPES */\n 7681  typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC) (GLint i);\n 7682: typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7683: typedef void (APIENTRYP PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);\n 7684  typedef void (APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);\n 7685: typedef void (APIENTRYP PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);\n 7686: typedef void (APIENTRYP PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7687: typedef void (APIENTRYP PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7688: typedef void (APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7689: typedef void (APIENTRYP PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);\n 7690  #endif\n 7691  \n ....\n 7717  #define GL_EXT_blend_minmax 1\n 7718  #ifdef GL_GLEXT_PROTOTYPES\n 7719: GLAPI void APIENTRY glBlendEquationEXT (GLenum mode);\n 7720  #endif /* GL_GLEXT_PROTOTYPES */\n 7721: typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);\n 7722  #endif\n 7723  \n ....\n 7745  #define GL_SGIX_sprite 1\n 7746  #ifdef GL_GLEXT_PROTOTYPES\n 7747: GLAPI void APIENTRY glSpriteParameterfSGIX (GLenum pname, GLfloat param);\n 7748: GLAPI void APIENTRY glSpriteParameterfvSGIX (GLenum pname, const GLfloat *params);\n 7749: GLAPI void APIENTRY glSpriteParameteriSGIX (GLenum pname, GLint param);\n 7750: GLAPI void APIENTRY glSpriteParameterivSGIX (GLenum pname, const GLint *params);\n 7751  #endif /* GL_GLEXT_PROTOTYPES */\n 7752: typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);\n 7753: typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);\n 7754: typedef void (APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);\n 7755: typedef void (APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);\n 7756  #endif\n 7757  \n ....\n 7763  #define GL_EXT_point_parameters 1\n 7764  #ifdef GL_GLEXT_PROTOTYPES\n 7765: GLAPI void APIENTRY glPointParameterfEXT (GLenum pname, GLfloat param);\n 7766: GLAPI void APIENTRY glPointParameterfvEXT (GLenum pname, const GLfloat *params);\n 7767  #endif /* GL_GLEXT_PROTOTYPES */\n 7768: typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);\n 7769: typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);\n 7770  #endif\n 7771  \n ....\n 7773  #define GL_SGIS_point_parameters 1\n 7774  #ifdef GL_GLEXT_PROTOTYPES\n 7775: GLAPI void APIENTRY glPointParameterfSGIS (GLenum pname, GLfloat param);\n 7776: GLAPI void APIENTRY glPointParameterfvSGIS (GLenum pname, const GLfloat *params);\n 7777  #endif /* GL_GLEXT_PROTOTYPES */\n 7778: typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);\n 7779: typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);\n 7780  #endif\n 7781  \n ....\n 7821  #define GL_SGIX_polynomial_ffd 1\n 7822  #ifdef GL_GLEXT_PROTOTYPES\n 7823: GLAPI void APIENTRY glDeformationMap3dSGIX (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);\n 7824: GLAPI void APIENTRY glDeformationMap3fSGIX (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);\n 7825  GLAPI void APIENTRY glDeformSGIX (GLbitfield mask);\n 7826  GLAPI void APIENTRY glLoadIdentityDeformationMapSGIX (GLbitfield mask);\n 7827  #endif /* GL_GLEXT_PROTOTYPES */\n 7828: typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);\n 7829: typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);\n 7830  typedef void (APIENTRYP PFNGLDEFORMSGIXPROC) (GLbitfield mask);\n 7831  typedef void (APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);\n ....\n 7869  #define GL_HP_image_transform 1\n 7870  #ifdef GL_GLEXT_PROTOTYPES\n 7871: GLAPI void APIENTRY glImageTransformParameteriHP (GLenum target, GLenum pname, GLint param);\n 7872: GLAPI void APIENTRY glImageTransformParameterfHP (GLenum target, GLenum pname, GLfloat param);\n 7873: GLAPI void APIENTRY glImageTransformParameterivHP (GLenum target, GLenum pname, const GLint *params);\n 7874: GLAPI void APIENTRY glImageTransformParameterfvHP (GLenum target, GLenum pname, const GLfloat *params);\n 7875: GLAPI void APIENTRY glGetImageTransformParameterivHP (GLenum target, GLenum pname, GLint *params);\n 7876: GLAPI void APIENTRY glGetImageTransformParameterfvHP (GLenum target, GLenum pname, GLfloat *params);\n 7877  #endif /* GL_GLEXT_PROTOTYPES */\n 7878: typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);\n 7879: typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);\n 7880: typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);\n 7881: typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);\n 7882: typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);\n 7883: typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);\n 7884  #endif\n 7885  \n ....\n 7895  #define GL_EXT_color_subtable 1\n 7896  #ifdef GL_GLEXT_PROTOTYPES\n 7897: GLAPI void APIENTRY glColorSubTableEXT (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);\n 7898: GLAPI void APIENTRY glCopyColorSubTableEXT (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);\n 7899  #endif /* GL_GLEXT_PROTOTYPES */\n 7900: typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);\n 7901: typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);\n 7902  #endif\n 7903  \n ....\n 7909  #define GL_PGI_misc_hints 1\n 7910  #ifdef GL_GLEXT_PROTOTYPES\n 7911: GLAPI void APIENTRY glHintPGI (GLenum target, GLint mode);\n 7912  #endif /* GL_GLEXT_PROTOTYPES */\n 7913: typedef void (APIENTRYP PFNGLHINTPGIPROC) (GLenum target, GLint mode);\n 7914  #endif\n 7915  \n ....\n 7917  #define GL_EXT_paletted_texture 1\n 7918  #ifdef GL_GLEXT_PROTOTYPES\n 7919: GLAPI void APIENTRY glColorTableEXT (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);\n 7920: GLAPI void APIENTRY glGetColorTableEXT (GLenum target, GLenum format, GLenum type, GLvoid *data);\n 7921: GLAPI void APIENTRY glGetColorTableParameterivEXT (GLenum target, GLenum pname, GLint *params);\n 7922: GLAPI void APIENTRY glGetColorTableParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);\n 7923  #endif /* GL_GLEXT_PROTOTYPES */\n 7924: typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);\n 7925: typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *data);\n 7926: typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);\n 7927: typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);\n 7928  #endif\n 7929  \n ....\n 7935  #define GL_SGIX_list_priority 1\n 7936  #ifdef GL_GLEXT_PROTOTYPES\n 7937: GLAPI void APIENTRY glGetListParameterfvSGIX (GLuint list, GLenum pname, GLfloat *params);\n 7938: GLAPI void APIENTRY glGetListParameterivSGIX (GLuint list, GLenum pname, GLint *params);\n 7939: GLAPI void APIENTRY glListParameterfSGIX (GLuint list, GLenum pname, GLfloat param);\n 7940: GLAPI void APIENTRY glListParameterfvSGIX (GLuint list, GLenum pname, const GLfloat *params);\n 7941: GLAPI void APIENTRY glListParameteriSGIX (GLuint list, GLenum pname, GLint param);\n 7942: GLAPI void APIENTRY glListParameterivSGIX (GLuint list, GLenum pname, const GLint *params);\n 7943  #endif /* GL_GLEXT_PROTOTYPES */\n 7944: typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);\n 7945: typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);\n 7946: typedef void (APIENTRYP PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);\n 7947: typedef void (APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);\n 7948: typedef void (APIENTRYP PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);\n 7949: typedef void (APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);\n 7950  #endif\n 7951  \n ....\n 7973  #define GL_EXT_index_material 1\n 7974  #ifdef GL_GLEXT_PROTOTYPES\n 7975: GLAPI void APIENTRY glIndexMaterialEXT (GLenum face, GLenum mode);\n 7976  #endif /* GL_GLEXT_PROTOTYPES */\n 7977: typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);\n 7978  #endif\n 7979  \n ....\n 7981  #define GL_EXT_index_func 1\n 7982  #ifdef GL_GLEXT_PROTOTYPES\n 7983: GLAPI void APIENTRY glIndexFuncEXT (GLenum func, GLclampf ref);\n 7984  #endif /* GL_GLEXT_PROTOTYPES */\n 7985: typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);\n 7986  #endif\n 7987  \n ....\n 8003  #define GL_EXT_cull_vertex 1\n 8004  #ifdef GL_GLEXT_PROTOTYPES\n 8005: GLAPI void APIENTRY glCullParameterdvEXT (GLenum pname, GLdouble *params);\n 8006: GLAPI void APIENTRY glCullParameterfvEXT (GLenum pname, GLfloat *params);\n 8007  #endif /* GL_GLEXT_PROTOTYPES */\n 8008: typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);\n 8009: typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);\n 8010  #endif\n 8011  \n ....\n 8017  #define GL_SGIX_fragment_lighting 1\n 8018  #ifdef GL_GLEXT_PROTOTYPES\n 8019: GLAPI void APIENTRY glFragmentColorMaterialSGIX (GLenum face, GLenum mode);\n 8020: GLAPI void APIENTRY glFragmentLightfSGIX (GLenum light, GLenum pname, GLfloat param);\n 8021: GLAPI void APIENTRY glFragmentLightfvSGIX (GLenum light, GLenum pname, const GLfloat *params);\n 8022: GLAPI void APIENTRY glFragmentLightiSGIX (GLenum light, GLenum pname, GLint param);\n 8023: GLAPI void APIENTRY glFragmentLightivSGIX (GLenum light, GLenum pname, const GLint *params);\n 8024: GLAPI void APIENTRY glFragmentLightModelfSGIX (GLenum pname, GLfloat param);\n 8025: GLAPI void APIENTRY glFragmentLightModelfvSGIX (GLenum pname, const GLfloat *params);\n 8026: GLAPI void APIENTRY glFragmentLightModeliSGIX (GLenum pname, GLint param);\n 8027: GLAPI void APIENTRY glFragmentLightModelivSGIX (GLenum pname, const GLint *params);\n 8028: GLAPI void APIENTRY glFragmentMaterialfSGIX (GLenum face, GLenum pname, GLfloat param);\n 8029: GLAPI void APIENTRY glFragmentMaterialfvSGIX (GLenum face, GLenum pname, const GLfloat *params);\n 8030: GLAPI void APIENTRY glFragmentMaterialiSGIX (GLenum face, GLenum pname, GLint param);\n 8031: GLAPI void APIENTRY glFragmentMaterialivSGIX (GLenum face, GLenum pname, const GLint *params);\n 8032: GLAPI void APIENTRY glGetFragmentLightfvSGIX (GLenum light, GLenum pname, GLfloat *params);\n 8033: GLAPI void APIENTRY glGetFragmentLightivSGIX (GLenum light, GLenum pname, GLint *params);\n 8034: GLAPI void APIENTRY glGetFragmentMaterialfvSGIX (GLenum face, GLenum pname, GLfloat *params);\n 8035: GLAPI void APIENTRY glGetFragmentMaterialivSGIX (GLenum face, GLenum pname, GLint *params);\n 8036: GLAPI void APIENTRY glLightEnviSGIX (GLenum pname, GLint param);\n 8037  #endif /* GL_GLEXT_PROTOTYPES */\n 8038: typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);\n 8039: typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);\n 8040: typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);\n 8041: typedef void (APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);\n 8042: typedef void (APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);\n 8043: typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);\n 8044: typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);\n 8045: typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);\n 8046: typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);\n 8047: typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);\n 8048: typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);\n 8049: typedef void (APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);\n 8050: typedef void (APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);\n 8051: typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);\n 8052: typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);\n 8053: typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);\n 8054: typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);\n 8055: typedef void (APIENTRYP PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);\n 8056  #endif\n 8057  \n ....\n 8067  #define GL_EXT_draw_range_elements 1\n 8068  #ifdef GL_GLEXT_PROTOTYPES\n 8069: GLAPI void APIENTRY glDrawRangeElementsEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);\n 8070  #endif /* GL_GLEXT_PROTOTYPES */\n 8071: typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);\n 8072  #endif\n 8073  \n ....\n 8083  #define GL_EXT_light_texture 1\n 8084  #ifdef GL_GLEXT_PROTOTYPES\n 8085: GLAPI void APIENTRY glApplyTextureEXT (GLenum mode);\n 8086: GLAPI void APIENTRY glTextureLightEXT (GLenum pname);\n 8087: GLAPI void APIENTRY glTextureMaterialEXT (GLenum face, GLenum mode);\n 8088  #endif /* GL_GLEXT_PROTOTYPES */\n 8089: typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);\n 8090: typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);\n 8091: typedef void (APIENTRYP PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);\n 8092  #endif\n 8093  \n ....\n 8129  #define GL_INTEL_parallel_arrays 1\n 8130  #ifdef GL_GLEXT_PROTOTYPES\n 8131: GLAPI void APIENTRY glVertexPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);\n 8132: GLAPI void APIENTRY glNormalPointervINTEL (GLenum type, const GLvoid* *pointer);\n 8133: GLAPI void APIENTRY glColorPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);\n 8134: GLAPI void APIENTRY glTexCoordPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);\n 8135  #endif /* GL_GLEXT_PROTOTYPES */\n 8136: typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);\n 8137: typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const GLvoid* *pointer);\n 8138: typedef void (APIENTRYP PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);\n 8139: typedef void (APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);\n 8140  #endif\n 8141  \n ....\n 8147  #define GL_EXT_pixel_transform 1\n 8148  #ifdef GL_GLEXT_PROTOTYPES\n 8149: GLAPI void APIENTRY glPixelTransformParameteriEXT (GLenum target, GLenum pname, GLint param);\n 8150: GLAPI void APIENTRY glPixelTransformParameterfEXT (GLenum target, GLenum pname, GLfloat param);\n 8151: GLAPI void APIENTRY glPixelTransformParameterivEXT (GLenum target, GLenum pname, const GLint *params);\n 8152: GLAPI void APIENTRY glPixelTransformParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params);\n 8153  #endif /* GL_GLEXT_PROTOTYPES */\n 8154: typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);\n 8155: typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);\n 8156: typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);\n 8157: typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);\n 8158  #endif\n 8159  \n ....\n 8189  GLAPI void APIENTRY glSecondaryColor3usEXT (GLushort red, GLushort green, GLushort blue);\n 8190  GLAPI void APIENTRY glSecondaryColor3usvEXT (const GLushort *v);\n 8191: GLAPI void APIENTRY glSecondaryColorPointerEXT (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 8192  #endif /* GL_GLEXT_PROTOTYPES */\n 8193  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);\n ....\n 8207  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);\n 8208  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);\n 8209: typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 8210  #endif\n 8211  \n ....\n 8213  #define GL_EXT_texture_perturb_normal 1\n 8214  #ifdef GL_GLEXT_PROTOTYPES\n 8215: GLAPI void APIENTRY glTextureNormalEXT (GLenum mode);\n 8216  #endif /* GL_GLEXT_PROTOTYPES */\n 8217: typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC) (GLenum mode);\n 8218  #endif\n 8219  \n ....\n 8221  #define GL_EXT_multi_draw_arrays 1\n 8222  #ifdef GL_GLEXT_PROTOTYPES\n 8223: GLAPI void APIENTRY glMultiDrawArraysEXT (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);\n 8224: GLAPI void APIENTRY glMultiDrawElementsEXT (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);\n 8225  #endif /* GL_GLEXT_PROTOTYPES */\n 8226: typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);\n 8227: typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);\n 8228  #endif\n 8229  \n ....\n 8235  GLAPI void APIENTRY glFogCoorddEXT (GLdouble coord);\n 8236  GLAPI void APIENTRY glFogCoorddvEXT (const GLdouble *coord);\n 8237: GLAPI void APIENTRY glFogCoordPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);\n 8238  #endif /* GL_GLEXT_PROTOTYPES */\n 8239  typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC) (GLfloat coord);\n ....\n 8241  typedef void (APIENTRYP PFNGLFOGCOORDDEXTPROC) (GLdouble coord);\n 8242  typedef void (APIENTRYP PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);\n 8243: typedef void (APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);\n 8244  #endif\n 8245  \n ....\n 8271  GLAPI void APIENTRY glBinormal3sEXT (GLshort bx, GLshort by, GLshort bz);\n 8272  GLAPI void APIENTRY glBinormal3svEXT (const GLshort *v);\n 8273: GLAPI void APIENTRY glTangentPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);\n 8274: GLAPI void APIENTRY glBinormalPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);\n 8275  #endif /* GL_GLEXT_PROTOTYPES */\n 8276  typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);\n ....\n 8294  typedef void (APIENTRYP PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);\n 8295  typedef void (APIENTRYP PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);\n 8296: typedef void (APIENTRYP PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);\n 8297: typedef void (APIENTRYP PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);\n 8298  #endif\n 8299  \n ....\n 8353  GLAPI void APIENTRY glReplacementCodeusvSUN (const GLushort *code);\n 8354  GLAPI void APIENTRY glReplacementCodeubvSUN (const GLubyte *code);\n 8355: GLAPI void APIENTRY glReplacementCodePointerSUN (GLenum type, GLsizei stride, const GLvoid* *pointer);\n 8356  #endif /* GL_GLEXT_PROTOTYPES */\n 8357  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);\n ....\n 8361  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);\n 8362  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);\n 8363: typedef void (APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const GLvoid* *pointer);\n 8364  #endif\n 8365  \n ....\n 8453  #define GL_EXT_blend_func_separate 1\n 8454  #ifdef GL_GLEXT_PROTOTYPES\n 8455: GLAPI void APIENTRY glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 8456  #endif /* GL_GLEXT_PROTOTYPES */\n 8457: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 8458  #endif\n 8459  \n ....\n 8461  #define GL_INGR_blend_func_separate 1\n 8462  #ifdef GL_GLEXT_PROTOTYPES\n 8463: GLAPI void APIENTRY glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 8464  #endif /* GL_GLEXT_PROTOTYPES */\n 8465: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\n 8466  #endif\n 8467  \n ....\n 8507  GLAPI void APIENTRY glVertexWeightfEXT (GLfloat weight);\n 8508  GLAPI void APIENTRY glVertexWeightfvEXT (const GLfloat *weight);\n 8509: GLAPI void APIENTRY glVertexWeightPointerEXT (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 8510  #endif /* GL_GLEXT_PROTOTYPES */\n 8511  typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);\n 8512  typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);\n 8513: typedef void (APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 8514  #endif\n 8515  \n ....\n 8531  #define GL_NV_register_combiners 1\n 8532  #ifdef GL_GLEXT_PROTOTYPES\n 8533: GLAPI void APIENTRY glCombinerParameterfvNV (GLenum pname, const GLfloat *params);\n 8534: GLAPI void APIENTRY glCombinerParameterfNV (GLenum pname, GLfloat param);\n 8535: GLAPI void APIENTRY glCombinerParameterivNV (GLenum pname, const GLint *params);\n 8536: GLAPI void APIENTRY glCombinerParameteriNV (GLenum pname, GLint param);\n 8537: GLAPI void APIENTRY glCombinerInputNV (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);\n 8538: GLAPI void APIENTRY glCombinerOutputNV (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);\n 8539: GLAPI void APIENTRY glFinalCombinerInputNV (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);\n 8540: GLAPI void APIENTRY glGetCombinerInputParameterfvNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);\n 8541: GLAPI void APIENTRY glGetCombinerInputParameterivNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);\n 8542: GLAPI void APIENTRY glGetCombinerOutputParameterfvNV (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);\n 8543: GLAPI void APIENTRY glGetCombinerOutputParameterivNV (GLenum stage, GLenum portion, GLenum pname, GLint *params);\n 8544: GLAPI void APIENTRY glGetFinalCombinerInputParameterfvNV (GLenum variable, GLenum pname, GLfloat *params);\n 8545: GLAPI void APIENTRY glGetFinalCombinerInputParameterivNV (GLenum variable, GLenum pname, GLint *params);\n 8546  #endif /* GL_GLEXT_PROTOTYPES */\n 8547: typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);\n 8548: typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);\n 8549: typedef void (APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);\n 8550: typedef void (APIENTRYP PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);\n 8551: typedef void (APIENTRYP PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);\n 8552: typedef void (APIENTRYP PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);\n 8553: typedef void (APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);\n 8554: typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);\n 8555: typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);\n 8556: typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);\n 8557: typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);\n 8558: typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);\n 8559: typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);\n 8560  #endif\n 8561  \n ....\n 8645  #define GL_IBM_multimode_draw_arrays 1\n 8646  #ifdef GL_GLEXT_PROTOTYPES\n 8647: GLAPI void APIENTRY glMultiModeDrawArraysIBM (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);\n 8648: GLAPI void APIENTRY glMultiModeDrawElementsIBM (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);\n 8649  #endif /* GL_GLEXT_PROTOTYPES */\n 8650: typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);\n 8651: typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);\n 8652  #endif\n 8653  \n ....\n 8655  #define GL_IBM_vertex_array_lists 1\n 8656  #ifdef GL_GLEXT_PROTOTYPES\n 8657: GLAPI void APIENTRY glColorPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8658: GLAPI void APIENTRY glSecondaryColorPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8659  GLAPI void APIENTRY glEdgeFlagPointerListIBM (GLint stride, const GLboolean* *pointer, GLint ptrstride);\n 8660: GLAPI void APIENTRY glFogCoordPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8661: GLAPI void APIENTRY glIndexPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8662: GLAPI void APIENTRY glNormalPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8663: GLAPI void APIENTRY glTexCoordPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8664: GLAPI void APIENTRY glVertexPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8665  #endif /* GL_GLEXT_PROTOTYPES */\n 8666: typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8667: typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8668  typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean* *pointer, GLint ptrstride);\n 8669: typedef void (APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8670: typedef void (APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8671: typedef void (APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8672: typedef void (APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8673: typedef void (APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);\n 8674  #endif\n 8675  \n ....\n 8710  #ifdef GL_GLEXT_PROTOTYPES\n 8711  GLAPI void APIENTRY glSampleMaskEXT (GLclampf value, GLboolean invert);\n 8712: GLAPI void APIENTRY glSamplePatternEXT (GLenum pattern);\n 8713  #endif /* GL_GLEXT_PROTOTYPES */\n 8714  typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);\n 8715: typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);\n 8716  #endif\n 8717  \n ....\n 8743  #define GL_SGIX_igloo_interface 1\n 8744  #ifdef GL_GLEXT_PROTOTYPES\n 8745: GLAPI void APIENTRY glIglooInterfaceSGIX (GLenum pname, const GLvoid *params);\n 8746  #endif /* GL_GLEXT_PROTOTYPES */\n 8747: typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const GLvoid *params);\n 8748  #endif\n 8749  \n ....\n 8763  GLAPI GLboolean APIENTRY glIsFenceNV (GLuint fence);\n 8764  GLAPI GLboolean APIENTRY glTestFenceNV (GLuint fence);\n 8765: GLAPI void APIENTRY glGetFenceivNV (GLuint fence, GLenum pname, GLint *params);\n 8766  GLAPI void APIENTRY glFinishFenceNV (GLuint fence);\n 8767: GLAPI void APIENTRY glSetFenceNV (GLuint fence, GLenum condition);\n 8768  #endif /* GL_GLEXT_PROTOTYPES */\n 8769  typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);\n ....\n 8771  typedef GLboolean (APIENTRYP PFNGLISFENCENVPROC) (GLuint fence);\n 8772  typedef GLboolean (APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence);\n 8773: typedef void (APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);\n 8774  typedef void (APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence);\n 8775: typedef void (APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);\n 8776  #endif\n 8777  \n ....\n 8779  #define GL_NV_evaluators 1\n 8780  #ifdef GL_GLEXT_PROTOTYPES\n 8781: GLAPI void APIENTRY glMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);\n 8782: GLAPI void APIENTRY glMapParameterivNV (GLenum target, GLenum pname, const GLint *params);\n 8783: GLAPI void APIENTRY glMapParameterfvNV (GLenum target, GLenum pname, const GLfloat *params);\n 8784: GLAPI void APIENTRY glGetMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);\n 8785: GLAPI void APIENTRY glGetMapParameterivNV (GLenum target, GLenum pname, GLint *params);\n 8786: GLAPI void APIENTRY glGetMapParameterfvNV (GLenum target, GLenum pname, GLfloat *params);\n 8787: GLAPI void APIENTRY glGetMapAttribParameterivNV (GLenum target, GLuint index, GLenum pname, GLint *params);\n 8788: GLAPI void APIENTRY glGetMapAttribParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params);\n 8789: GLAPI void APIENTRY glEvalMapsNV (GLenum target, GLenum mode);\n 8790  #endif /* GL_GLEXT_PROTOTYPES */\n 8791: typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);\n 8792: typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);\n 8793: typedef void (APIENTRYP PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);\n 8794: typedef void (APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);\n 8795: typedef void (APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);\n 8796: typedef void (APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);\n 8797: typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);\n 8798: typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);\n 8799: typedef void (APIENTRYP PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);\n 8800  #endif\n 8801  \n ....\n 8807  #define GL_NV_register_combiners2 1\n 8808  #ifdef GL_GLEXT_PROTOTYPES\n 8809: GLAPI void APIENTRY glCombinerStageParameterfvNV (GLenum stage, GLenum pname, const GLfloat *params);\n 8810: GLAPI void APIENTRY glGetCombinerStageParameterfvNV (GLenum stage, GLenum pname, GLfloat *params);\n 8811  #endif /* GL_GLEXT_PROTOTYPES */\n 8812: typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);\n 8813: typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);\n 8814  #endif\n 8815  \n ....\n 8838  #ifdef GL_GLEXT_PROTOTYPES\n 8839  GLAPI GLboolean APIENTRY glAreProgramsResidentNV (GLsizei n, const GLuint *programs, GLboolean *residences);\n 8840: GLAPI void APIENTRY glBindProgramNV (GLenum target, GLuint id);\n 8841  GLAPI void APIENTRY glDeleteProgramsNV (GLsizei n, const GLuint *programs);\n 8842: GLAPI void APIENTRY glExecuteProgramNV (GLenum target, GLuint id, const GLfloat *params);\n 8843  GLAPI void APIENTRY glGenProgramsNV (GLsizei n, GLuint *programs);\n 8844: GLAPI void APIENTRY glGetProgramParameterdvNV (GLenum target, GLuint index, GLenum pname, GLdouble *params);\n 8845: GLAPI void APIENTRY glGetProgramParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params);\n 8846: GLAPI void APIENTRY glGetProgramivNV (GLuint id, GLenum pname, GLint *params);\n 8847: GLAPI void APIENTRY glGetProgramStringNV (GLuint id, GLenum pname, GLubyte *program);\n 8848: GLAPI void APIENTRY glGetTrackMatrixivNV (GLenum target, GLuint address, GLenum pname, GLint *params);\n 8849: GLAPI void APIENTRY glGetVertexAttribdvNV (GLuint index, GLenum pname, GLdouble *params);\n 8850: GLAPI void APIENTRY glGetVertexAttribfvNV (GLuint index, GLenum pname, GLfloat *params);\n 8851: GLAPI void APIENTRY glGetVertexAttribivNV (GLuint index, GLenum pname, GLint *params);\n 8852: GLAPI void APIENTRY glGetVertexAttribPointervNV (GLuint index, GLenum pname, GLvoid* *pointer);\n 8853  GLAPI GLboolean APIENTRY glIsProgramNV (GLuint id);\n 8854: GLAPI void APIENTRY glLoadProgramNV (GLenum target, GLuint id, GLsizei len, const GLubyte *program);\n 8855: GLAPI void APIENTRY glProgramParameter4dNV (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 8856: GLAPI void APIENTRY glProgramParameter4dvNV (GLenum target, GLuint index, const GLdouble *v);\n 8857: GLAPI void APIENTRY glProgramParameter4fNV (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 8858: GLAPI void APIENTRY glProgramParameter4fvNV (GLenum target, GLuint index, const GLfloat *v);\n 8859: GLAPI void APIENTRY glProgramParameters4dvNV (GLenum target, GLuint index, GLuint count, const GLdouble *v);\n 8860: GLAPI void APIENTRY glProgramParameters4fvNV (GLenum target, GLuint index, GLuint count, const GLfloat *v);\n 8861  GLAPI void APIENTRY glRequestResidentProgramsNV (GLsizei n, const GLuint *programs);\n 8862: GLAPI void APIENTRY glTrackMatrixNV (GLenum target, GLuint address, GLenum matrix, GLenum transform);\n 8863: GLAPI void APIENTRY glVertexAttribPointerNV (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);\n 8864  GLAPI void APIENTRY glVertexAttrib1dNV (GLuint index, GLdouble x);\n 8865  GLAPI void APIENTRY glVertexAttrib1dvNV (GLuint index, const GLdouble *v);\n ....\n 8903  #endif /* GL_GLEXT_PROTOTYPES */\n 8904  typedef GLboolean (APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);\n 8905: typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);\n 8906  typedef void (APIENTRYP PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);\n 8907: typedef void (APIENTRYP PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);\n 8908  typedef void (APIENTRYP PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);\n 8909: typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);\n 8910: typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);\n 8911: typedef void (APIENTRYP PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);\n 8912: typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);\n 8913: typedef void (APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);\n 8914: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);\n 8915: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);\n 8916: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);\n 8917: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);\n 8918  typedef GLboolean (APIENTRYP PFNGLISPROGRAMNVPROC) (GLuint id);\n 8919: typedef void (APIENTRYP PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);\n 8920: typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 8921: typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);\n 8922: typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 8923: typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);\n 8924: typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLuint count, const GLdouble *v);\n 8925: typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLuint count, const GLfloat *v);\n 8926  typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);\n 8927: typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);\n 8928: typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);\n 8929  typedef void (APIENTRYP PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);\n 8930  typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);\n ....\n 8995  #define GL_ATI_envmap_bumpmap 1\n 8996  #ifdef GL_GLEXT_PROTOTYPES\n 8997: GLAPI void APIENTRY glTexBumpParameterivATI (GLenum pname, const GLint *param);\n 8998: GLAPI void APIENTRY glTexBumpParameterfvATI (GLenum pname, const GLfloat *param);\n 8999: GLAPI void APIENTRY glGetTexBumpParameterivATI (GLenum pname, GLint *param);\n 9000: GLAPI void APIENTRY glGetTexBumpParameterfvATI (GLenum pname, GLfloat *param);\n 9001  #endif /* GL_GLEXT_PROTOTYPES */\n 9002: typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);\n 9003: typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);\n 9004: typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);\n 9005: typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);\n 9006  #endif\n 9007  \n ....\n 9014  GLAPI void APIENTRY glBeginFragmentShaderATI (void);\n 9015  GLAPI void APIENTRY glEndFragmentShaderATI (void);\n 9016: GLAPI void APIENTRY glPassTexCoordATI (GLuint dst, GLuint coord, GLenum swizzle);\n 9017: GLAPI void APIENTRY glSampleMapATI (GLuint dst, GLuint interp, GLenum swizzle);\n 9018: GLAPI void APIENTRY glColorFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);\n 9019: GLAPI void APIENTRY glColorFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);\n 9020: GLAPI void APIENTRY glColorFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);\n 9021: GLAPI void APIENTRY glAlphaFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);\n 9022: GLAPI void APIENTRY glAlphaFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);\n 9023: GLAPI void APIENTRY glAlphaFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);\n 9024  GLAPI void APIENTRY glSetFragmentShaderConstantATI (GLuint dst, const GLfloat *value);\n 9025  #endif /* GL_GLEXT_PROTOTYPES */\n ....\n 9029  typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC) (void);\n 9030  typedef void (APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC) (void);\n 9031: typedef void (APIENTRYP PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);\n 9032: typedef void (APIENTRYP PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);\n 9033: typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);\n 9034: typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);\n 9035: typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);\n 9036: typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);\n 9037: typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);\n 9038: typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);\n 9039  typedef void (APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);\n 9040  #endif\n ....\n 9043  #define GL_ATI_pn_triangles 1\n 9044  #ifdef GL_GLEXT_PROTOTYPES\n 9045: GLAPI void APIENTRY glPNTrianglesiATI (GLenum pname, GLint param);\n 9046: GLAPI void APIENTRY glPNTrianglesfATI (GLenum pname, GLfloat param);\n 9047  #endif /* GL_GLEXT_PROTOTYPES */\n 9048: typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);\n 9049: typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);\n 9050  #endif\n 9051  \n ....\n 9053  #define GL_ATI_vertex_array_object 1\n 9054  #ifdef GL_GLEXT_PROTOTYPES\n 9055: GLAPI GLuint APIENTRY glNewObjectBufferATI (GLsizei size, const GLvoid *pointer, GLenum usage);\n 9056  GLAPI GLboolean APIENTRY glIsObjectBufferATI (GLuint buffer);\n 9057: GLAPI void APIENTRY glUpdateObjectBufferATI (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);\n 9058: GLAPI void APIENTRY glGetObjectBufferfvATI (GLuint buffer, GLenum pname, GLfloat *params);\n 9059: GLAPI void APIENTRY glGetObjectBufferivATI (GLuint buffer, GLenum pname, GLint *params);\n 9060  GLAPI void APIENTRY glFreeObjectBufferATI (GLuint buffer);\n 9061: GLAPI void APIENTRY glArrayObjectATI (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);\n 9062: GLAPI void APIENTRY glGetArrayObjectfvATI (GLenum array, GLenum pname, GLfloat *params);\n 9063: GLAPI void APIENTRY glGetArrayObjectivATI (GLenum array, GLenum pname, GLint *params);\n 9064: GLAPI void APIENTRY glVariantArrayObjectATI (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);\n 9065: GLAPI void APIENTRY glGetVariantArrayObjectfvATI (GLuint id, GLenum pname, GLfloat *params);\n 9066: GLAPI void APIENTRY glGetVariantArrayObjectivATI (GLuint id, GLenum pname, GLint *params);\n 9067  #endif /* GL_GLEXT_PROTOTYPES */\n 9068: typedef GLuint (APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const GLvoid *pointer, GLenum usage);\n 9069  typedef GLboolean (APIENTRYP PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);\n 9070: typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);\n 9071: typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);\n 9072: typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);\n 9073  typedef void (APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);\n 9074: typedef void (APIENTRYP PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);\n 9075: typedef void (APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);\n 9076: typedef void (APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);\n 9077: typedef void (APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);\n 9078: typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);\n 9079: typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);\n 9080  #endif\n 9081  \n ....\n 9088  GLAPI GLuint APIENTRY glGenVertexShadersEXT (GLuint range);\n 9089  GLAPI void APIENTRY glDeleteVertexShaderEXT (GLuint id);\n 9090: GLAPI void APIENTRY glShaderOp1EXT (GLenum op, GLuint res, GLuint arg1);\n 9091: GLAPI void APIENTRY glShaderOp2EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2);\n 9092: GLAPI void APIENTRY glShaderOp3EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);\n 9093: GLAPI void APIENTRY glSwizzleEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);\n 9094: GLAPI void APIENTRY glWriteMaskEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);\n 9095  GLAPI void APIENTRY glInsertComponentEXT (GLuint res, GLuint src, GLuint num);\n 9096  GLAPI void APIENTRY glExtractComponentEXT (GLuint res, GLuint src, GLuint num);\n 9097: GLAPI GLuint APIENTRY glGenSymbolsEXT (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);\n 9098: GLAPI void APIENTRY glSetInvariantEXT (GLuint id, GLenum type, const GLvoid *addr);\n 9099: GLAPI void APIENTRY glSetLocalConstantEXT (GLuint id, GLenum type, const GLvoid *addr);\n 9100  GLAPI void APIENTRY glVariantbvEXT (GLuint id, const GLbyte *addr);\n 9101  GLAPI void APIENTRY glVariantsvEXT (GLuint id, const GLshort *addr);\n ....\n 9106  GLAPI void APIENTRY glVariantusvEXT (GLuint id, const GLushort *addr);\n 9107  GLAPI void APIENTRY glVariantuivEXT (GLuint id, const GLuint *addr);\n 9108: GLAPI void APIENTRY glVariantPointerEXT (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);\n 9109  GLAPI void APIENTRY glEnableVariantClientStateEXT (GLuint id);\n 9110  GLAPI void APIENTRY glDisableVariantClientStateEXT (GLuint id);\n 9111: GLAPI GLuint APIENTRY glBindLightParameterEXT (GLenum light, GLenum value);\n 9112: GLAPI GLuint APIENTRY glBindMaterialParameterEXT (GLenum face, GLenum value);\n 9113: GLAPI GLuint APIENTRY glBindTexGenParameterEXT (GLenum unit, GLenum coord, GLenum value);\n 9114: GLAPI GLuint APIENTRY glBindTextureUnitParameterEXT (GLenum unit, GLenum value);\n 9115: GLAPI GLuint APIENTRY glBindParameterEXT (GLenum value);\n 9116: GLAPI GLboolean APIENTRY glIsVariantEnabledEXT (GLuint id, GLenum cap);\n 9117: GLAPI void APIENTRY glGetVariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);\n 9118: GLAPI void APIENTRY glGetVariantIntegervEXT (GLuint id, GLenum value, GLint *data);\n 9119: GLAPI void APIENTRY glGetVariantFloatvEXT (GLuint id, GLenum value, GLfloat *data);\n 9120: GLAPI void APIENTRY glGetVariantPointervEXT (GLuint id, GLenum value, GLvoid* *data);\n 9121: GLAPI void APIENTRY glGetInvariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);\n 9122: GLAPI void APIENTRY glGetInvariantIntegervEXT (GLuint id, GLenum value, GLint *data);\n 9123: GLAPI void APIENTRY glGetInvariantFloatvEXT (GLuint id, GLenum value, GLfloat *data);\n 9124: GLAPI void APIENTRY glGetLocalConstantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);\n 9125: GLAPI void APIENTRY glGetLocalConstantIntegervEXT (GLuint id, GLenum value, GLint *data);\n 9126: GLAPI void APIENTRY glGetLocalConstantFloatvEXT (GLuint id, GLenum value, GLfloat *data);\n 9127  #endif /* GL_GLEXT_PROTOTYPES */\n 9128  typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC) (void);\n ....\n 9131  typedef GLuint (APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);\n 9132  typedef void (APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);\n 9133: typedef void (APIENTRYP PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);\n 9134: typedef void (APIENTRYP PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);\n 9135: typedef void (APIENTRYP PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);\n 9136: typedef void (APIENTRYP PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);\n 9137: typedef void (APIENTRYP PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);\n 9138  typedef void (APIENTRYP PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);\n 9139  typedef void (APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);\n 9140: typedef GLuint (APIENTRYP PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);\n 9141: typedef void (APIENTRYP PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);\n 9142: typedef void (APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);\n 9143  typedef void (APIENTRYP PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);\n 9144  typedef void (APIENTRYP PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);\n ....\n 9149  typedef void (APIENTRYP PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);\n 9150  typedef void (APIENTRYP PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);\n 9151: typedef void (APIENTRYP PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);\n 9152  typedef void (APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);\n 9153  typedef void (APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);\n 9154: typedef GLuint (APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);\n 9155: typedef GLuint (APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);\n 9156: typedef GLuint (APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);\n 9157: typedef GLuint (APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);\n 9158: typedef GLuint (APIENTRYP PFNGLBINDPARAMETEREXTPROC) (GLenum value);\n 9159: typedef GLboolean (APIENTRYP PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);\n 9160: typedef void (APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);\n 9161: typedef void (APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);\n 9162: typedef void (APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);\n 9163: typedef void (APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, GLvoid* *data);\n 9164: typedef void (APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);\n 9165: typedef void (APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);\n 9166: typedef void (APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);\n 9167: typedef void (APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);\n 9168: typedef void (APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);\n 9169: typedef void (APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);\n 9170  #endif\n 9171  \n ....\n 9173  #define GL_ATI_vertex_streams 1\n 9174  #ifdef GL_GLEXT_PROTOTYPES\n 9175: GLAPI void APIENTRY glVertexStream1sATI (GLenum stream, GLshort x);\n 9176: GLAPI void APIENTRY glVertexStream1svATI (GLenum stream, const GLshort *coords);\n 9177: GLAPI void APIENTRY glVertexStream1iATI (GLenum stream, GLint x);\n 9178: GLAPI void APIENTRY glVertexStream1ivATI (GLenum stream, const GLint *coords);\n 9179: GLAPI void APIENTRY glVertexStream1fATI (GLenum stream, GLfloat x);\n 9180: GLAPI void APIENTRY glVertexStream1fvATI (GLenum stream, const GLfloat *coords);\n 9181: GLAPI void APIENTRY glVertexStream1dATI (GLenum stream, GLdouble x);\n 9182: GLAPI void APIENTRY glVertexStream1dvATI (GLenum stream, const GLdouble *coords);\n 9183: GLAPI void APIENTRY glVertexStream2sATI (GLenum stream, GLshort x, GLshort y);\n 9184: GLAPI void APIENTRY glVertexStream2svATI (GLenum stream, const GLshort *coords);\n 9185: GLAPI void APIENTRY glVertexStream2iATI (GLenum stream, GLint x, GLint y);\n 9186: GLAPI void APIENTRY glVertexStream2ivATI (GLenum stream, const GLint *coords);\n 9187: GLAPI void APIENTRY glVertexStream2fATI (GLenum stream, GLfloat x, GLfloat y);\n 9188: GLAPI void APIENTRY glVertexStream2fvATI (GLenum stream, const GLfloat *coords);\n 9189: GLAPI void APIENTRY glVertexStream2dATI (GLenum stream, GLdouble x, GLdouble y);\n 9190: GLAPI void APIENTRY glVertexStream2dvATI (GLenum stream, const GLdouble *coords);\n 9191: GLAPI void APIENTRY glVertexStream3sATI (GLenum stream, GLshort x, GLshort y, GLshort z);\n 9192: GLAPI void APIENTRY glVertexStream3svATI (GLenum stream, const GLshort *coords);\n 9193: GLAPI void APIENTRY glVertexStream3iATI (GLenum stream, GLint x, GLint y, GLint z);\n 9194: GLAPI void APIENTRY glVertexStream3ivATI (GLenum stream, const GLint *coords);\n 9195: GLAPI void APIENTRY glVertexStream3fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z);\n 9196: GLAPI void APIENTRY glVertexStream3fvATI (GLenum stream, const GLfloat *coords);\n 9197: GLAPI void APIENTRY glVertexStream3dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z);\n 9198: GLAPI void APIENTRY glVertexStream3dvATI (GLenum stream, const GLdouble *coords);\n 9199: GLAPI void APIENTRY glVertexStream4sATI (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);\n 9200: GLAPI void APIENTRY glVertexStream4svATI (GLenum stream, const GLshort *coords);\n 9201: GLAPI void APIENTRY glVertexStream4iATI (GLenum stream, GLint x, GLint y, GLint z, GLint w);\n 9202: GLAPI void APIENTRY glVertexStream4ivATI (GLenum stream, const GLint *coords);\n 9203: GLAPI void APIENTRY glVertexStream4fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 9204: GLAPI void APIENTRY glVertexStream4fvATI (GLenum stream, const GLfloat *coords);\n 9205: GLAPI void APIENTRY glVertexStream4dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 9206: GLAPI void APIENTRY glVertexStream4dvATI (GLenum stream, const GLdouble *coords);\n 9207: GLAPI void APIENTRY glNormalStream3bATI (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);\n 9208: GLAPI void APIENTRY glNormalStream3bvATI (GLenum stream, const GLbyte *coords);\n 9209: GLAPI void APIENTRY glNormalStream3sATI (GLenum stream, GLshort nx, GLshort ny, GLshort nz);\n 9210: GLAPI void APIENTRY glNormalStream3svATI (GLenum stream, const GLshort *coords);\n 9211: GLAPI void APIENTRY glNormalStream3iATI (GLenum stream, GLint nx, GLint ny, GLint nz);\n 9212: GLAPI void APIENTRY glNormalStream3ivATI (GLenum stream, const GLint *coords);\n 9213: GLAPI void APIENTRY glNormalStream3fATI (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);\n 9214: GLAPI void APIENTRY glNormalStream3fvATI (GLenum stream, const GLfloat *coords);\n 9215: GLAPI void APIENTRY glNormalStream3dATI (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);\n 9216: GLAPI void APIENTRY glNormalStream3dvATI (GLenum stream, const GLdouble *coords);\n 9217: GLAPI void APIENTRY glClientActiveVertexStreamATI (GLenum stream);\n 9218: GLAPI void APIENTRY glVertexBlendEnviATI (GLenum pname, GLint param);\n 9219: GLAPI void APIENTRY glVertexBlendEnvfATI (GLenum pname, GLfloat param);\n 9220  #endif /* GL_GLEXT_PROTOTYPES */\n 9221: typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);\n 9222: typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);\n 9223: typedef void (APIENTRYP PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);\n 9224: typedef void (APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);\n 9225: typedef void (APIENTRYP PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);\n 9226: typedef void (APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);\n 9227: typedef void (APIENTRYP PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);\n 9228: typedef void (APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);\n 9229: typedef void (APIENTRYP PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);\n 9230: typedef void (APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);\n 9231: typedef void (APIENTRYP PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);\n 9232: typedef void (APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);\n 9233: typedef void (APIENTRYP PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);\n 9234: typedef void (APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);\n 9235: typedef void (APIENTRYP PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);\n 9236: typedef void (APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);\n 9237: typedef void (APIENTRYP PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);\n 9238: typedef void (APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);\n 9239: typedef void (APIENTRYP PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);\n 9240: typedef void (APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);\n 9241: typedef void (APIENTRYP PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);\n 9242: typedef void (APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);\n 9243: typedef void (APIENTRYP PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);\n 9244: typedef void (APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);\n 9245: typedef void (APIENTRYP PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);\n 9246: typedef void (APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);\n 9247: typedef void (APIENTRYP PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);\n 9248: typedef void (APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);\n 9249: typedef void (APIENTRYP PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 9250: typedef void (APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);\n 9251: typedef void (APIENTRYP PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 9252: typedef void (APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);\n 9253: typedef void (APIENTRYP PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);\n 9254: typedef void (APIENTRYP PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);\n 9255: typedef void (APIENTRYP PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);\n 9256: typedef void (APIENTRYP PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);\n 9257: typedef void (APIENTRYP PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);\n 9258: typedef void (APIENTRYP PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);\n 9259: typedef void (APIENTRYP PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);\n 9260: typedef void (APIENTRYP PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);\n 9261: typedef void (APIENTRYP PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);\n 9262: typedef void (APIENTRYP PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);\n 9263: typedef void (APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);\n 9264: typedef void (APIENTRYP PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);\n 9265: typedef void (APIENTRYP PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);\n 9266  #endif\n 9267  \n ....\n 9269  #define GL_ATI_element_array 1\n 9270  #ifdef GL_GLEXT_PROTOTYPES\n 9271: GLAPI void APIENTRY glElementPointerATI (GLenum type, const GLvoid *pointer);\n 9272: GLAPI void APIENTRY glDrawElementArrayATI (GLenum mode, GLsizei count);\n 9273: GLAPI void APIENTRY glDrawRangeElementArrayATI (GLenum mode, GLuint start, GLuint end, GLsizei count);\n 9274  #endif /* GL_GLEXT_PROTOTYPES */\n 9275: typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC) (GLenum type, const GLvoid *pointer);\n 9276: typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);\n 9277: typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);\n 9278  #endif\n 9279  \n ....\n 9281  #define GL_SUN_mesh_array 1\n 9282  #ifdef GL_GLEXT_PROTOTYPES\n 9283: GLAPI void APIENTRY glDrawMeshArraysSUN (GLenum mode, GLint first, GLsizei count, GLsizei width);\n 9284  #endif /* GL_GLEXT_PROTOTYPES */\n 9285: typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);\n 9286  #endif\n 9287  \n ....\n 9306  GLAPI void APIENTRY glBeginOcclusionQueryNV (GLuint id);\n 9307  GLAPI void APIENTRY glEndOcclusionQueryNV (void);\n 9308: GLAPI void APIENTRY glGetOcclusionQueryivNV (GLuint id, GLenum pname, GLint *params);\n 9309: GLAPI void APIENTRY glGetOcclusionQueryuivNV (GLuint id, GLenum pname, GLuint *params);\n 9310  #endif /* GL_GLEXT_PROTOTYPES */\n 9311  typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);\n ....\n 9314  typedef void (APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);\n 9315  typedef void (APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC) (void);\n 9316: typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);\n 9317: typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);\n 9318  #endif\n 9319  \n ....\n 9321  #define GL_NV_point_sprite 1\n 9322  #ifdef GL_GLEXT_PROTOTYPES\n 9323: GLAPI void APIENTRY glPointParameteriNV (GLenum pname, GLint param);\n 9324: GLAPI void APIENTRY glPointParameterivNV (GLenum pname, const GLint *params);\n 9325  #endif /* GL_GLEXT_PROTOTYPES */\n 9326: typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);\n 9327: typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);\n 9328  #endif\n 9329  \n ....\n 9343  #define GL_EXT_stencil_two_side 1\n 9344  #ifdef GL_GLEXT_PROTOTYPES\n 9345: GLAPI void APIENTRY glActiveStencilFaceEXT (GLenum face);\n 9346  #endif /* GL_GLEXT_PROTOTYPES */\n 9347: typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);\n 9348  #endif\n 9349  \n ....\n 9359  #define GL_APPLE_element_array 1\n 9360  #ifdef GL_GLEXT_PROTOTYPES\n 9361: GLAPI void APIENTRY glElementPointerAPPLE (GLenum type, const GLvoid *pointer);\n 9362: GLAPI void APIENTRY glDrawElementArrayAPPLE (GLenum mode, GLint first, GLsizei count);\n 9363: GLAPI void APIENTRY glDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);\n 9364: GLAPI void APIENTRY glMultiDrawElementArrayAPPLE (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);\n 9365: GLAPI void APIENTRY glMultiDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);\n 9366  #endif /* GL_GLEXT_PROTOTYPES */\n 9367: typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const GLvoid *pointer);\n 9368: typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);\n 9369: typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);\n 9370: typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);\n 9371: typedef void (APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);\n 9372  #endif\n 9373  \n ....\n 9381  GLAPI GLboolean APIENTRY glTestFenceAPPLE (GLuint fence);\n 9382  GLAPI void APIENTRY glFinishFenceAPPLE (GLuint fence);\n 9383: GLAPI GLboolean APIENTRY glTestObjectAPPLE (GLenum object, GLuint name);\n 9384: GLAPI void APIENTRY glFinishObjectAPPLE (GLenum object, GLint name);\n 9385  #endif /* GL_GLEXT_PROTOTYPES */\n 9386  typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);\n ....\n 9390  typedef GLboolean (APIENTRYP PFNGLTESTFENCEAPPLEPROC) (GLuint fence);\n 9391  typedef void (APIENTRYP PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);\n 9392: typedef GLboolean (APIENTRYP PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);\n 9393: typedef void (APIENTRYP PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);\n 9394  #endif\n 9395  \n ....\n 9413  GLAPI void APIENTRY glVertexArrayRangeAPPLE (GLsizei length, GLvoid *pointer);\n 9414  GLAPI void APIENTRY glFlushVertexArrayRangeAPPLE (GLsizei length, GLvoid *pointer);\n 9415: GLAPI void APIENTRY glVertexArrayParameteriAPPLE (GLenum pname, GLint param);\n 9416  #endif /* GL_GLEXT_PROTOTYPES */\n 9417  typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);\n 9418  typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);\n 9419: typedef void (APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);\n 9420  #endif\n 9421  \n ....\n 9431  #define GL_ATI_draw_buffers 1\n 9432  #ifdef GL_GLEXT_PROTOTYPES\n 9433: GLAPI void APIENTRY glDrawBuffersATI (GLsizei n, const GLenum *bufs);\n 9434  #endif /* GL_GLEXT_PROTOTYPES */\n 9435: typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);\n 9436  #endif\n 9437  \n 9438  #ifndef GL_ATI_pixel_format_float\n 9439  #define GL_ATI_pixel_format_float 1\n 9440: /* This is really a WGL extension, but defines some associated GL enums.\n 9441   * ATI does not export \"GL_ATI_pixel_format_float\" in the GL_EXTENSIONS string.\n 9442   */\n ....\n 9497  GLAPI void APIENTRY glTexCoord4hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);\n 9498  GLAPI void APIENTRY glTexCoord4hvNV (const GLhalfNV *v);\n 9499: GLAPI void APIENTRY glMultiTexCoord1hNV (GLenum target, GLhalfNV s);\n 9500: GLAPI void APIENTRY glMultiTexCoord1hvNV (GLenum target, const GLhalfNV *v);\n 9501: GLAPI void APIENTRY glMultiTexCoord2hNV (GLenum target, GLhalfNV s, GLhalfNV t);\n 9502: GLAPI void APIENTRY glMultiTexCoord2hvNV (GLenum target, const GLhalfNV *v);\n 9503: GLAPI void APIENTRY glMultiTexCoord3hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);\n 9504: GLAPI void APIENTRY glMultiTexCoord3hvNV (GLenum target, const GLhalfNV *v);\n 9505: GLAPI void APIENTRY glMultiTexCoord4hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);\n 9506: GLAPI void APIENTRY glMultiTexCoord4hvNV (GLenum target, const GLhalfNV *v);\n 9507  GLAPI void APIENTRY glFogCoordhNV (GLhalfNV fog);\n 9508  GLAPI void APIENTRY glFogCoordhvNV (const GLhalfNV *fog);\n ....\n 9544  typedef void (APIENTRYP PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);\n 9545  typedef void (APIENTRYP PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);\n 9546: typedef void (APIENTRYP PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);\n 9547: typedef void (APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);\n 9548: typedef void (APIENTRYP PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);\n 9549: typedef void (APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);\n 9550: typedef void (APIENTRYP PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);\n 9551: typedef void (APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);\n 9552: typedef void (APIENTRYP PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);\n 9553: typedef void (APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);\n 9554  typedef void (APIENTRYP PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);\n 9555  typedef void (APIENTRYP PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);\n ....\n 9575  #define GL_NV_pixel_data_range 1\n 9576  #ifdef GL_GLEXT_PROTOTYPES\n 9577: GLAPI void APIENTRY glPixelDataRangeNV (GLenum target, GLsizei length, GLvoid *pointer);\n 9578: GLAPI void APIENTRY glFlushPixelDataRangeNV (GLenum target);\n 9579  #endif /* GL_GLEXT_PROTOTYPES */\n 9580: typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, GLvoid *pointer);\n 9581: typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);\n 9582  #endif\n 9583  \n ....\n 9613  #define GL_ATI_separate_stencil 1\n 9614  #ifdef GL_GLEXT_PROTOTYPES\n 9615: GLAPI void APIENTRY glStencilOpSeparateATI (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);\n 9616: GLAPI void APIENTRY glStencilFuncSeparateATI (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);\n 9617  #endif /* GL_GLEXT_PROTOTYPES */\n 9618: typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);\n 9619: typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);\n 9620  #endif\n 9621  \n ....\n 9623  #define GL_ATI_vertex_attrib_array_object 1\n 9624  #ifdef GL_GLEXT_PROTOTYPES\n 9625: GLAPI void APIENTRY glVertexAttribArrayObjectATI (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);\n 9626: GLAPI void APIENTRY glGetVertexAttribArrayObjectfvATI (GLuint index, GLenum pname, GLfloat *params);\n 9627: GLAPI void APIENTRY glGetVertexAttribArrayObjectivATI (GLuint index, GLenum pname, GLint *params);\n 9628  #endif /* GL_GLEXT_PROTOTYPES */\n 9629: typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);\n 9630: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);\n 9631: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);\n 9632  #endif\n 9633  \n ....\n 9651  #define GL_EXT_blend_equation_separate 1\n 9652  #ifdef GL_GLEXT_PROTOTYPES\n 9653: GLAPI void APIENTRY glBlendEquationSeparateEXT (GLenum modeRGB, GLenum modeAlpha);\n 9654  #endif /* GL_GLEXT_PROTOTYPES */\n 9655: typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);\n 9656  #endif\n 9657  \n ....\n 9688  #ifdef GL_GLEXT_PROTOTYPES\n 9689  GLAPI GLboolean APIENTRY glIsRenderbufferEXT (GLuint renderbuffer);\n 9690: GLAPI void APIENTRY glBindRenderbufferEXT (GLenum target, GLuint renderbuffer);\n 9691  GLAPI void APIENTRY glDeleteRenderbuffersEXT (GLsizei n, const GLuint *renderbuffers);\n 9692  GLAPI void APIENTRY glGenRenderbuffersEXT (GLsizei n, GLuint *renderbuffers);\n 9693: GLAPI void APIENTRY glRenderbufferStorageEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);\n 9694: GLAPI void APIENTRY glGetRenderbufferParameterivEXT (GLenum target, GLenum pname, GLint *params);\n 9695  GLAPI GLboolean APIENTRY glIsFramebufferEXT (GLuint framebuffer);\n 9696: GLAPI void APIENTRY glBindFramebufferEXT (GLenum target, GLuint framebuffer);\n 9697  GLAPI void APIENTRY glDeleteFramebuffersEXT (GLsizei n, const GLuint *framebuffers);\n 9698  GLAPI void APIENTRY glGenFramebuffersEXT (GLsizei n, GLuint *framebuffers);\n 9699: GLAPI GLenum APIENTRY glCheckFramebufferStatusEXT (GLenum target);\n 9700: GLAPI void APIENTRY glFramebufferTexture1DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 9701: GLAPI void APIENTRY glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 9702: GLAPI void APIENTRY glFramebufferTexture3DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);\n 9703: GLAPI void APIENTRY glFramebufferRenderbufferEXT (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);\n 9704: GLAPI void APIENTRY glGetFramebufferAttachmentParameterivEXT (GLenum target, GLenum attachment, GLenum pname, GLint *params);\n 9705: GLAPI void APIENTRY glGenerateMipmapEXT (GLenum target);\n 9706  #endif /* GL_GLEXT_PROTOTYPES */\n 9707  typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);\n 9708: typedef void (APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);\n 9709  typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers);\n 9710  typedef void (APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers);\n 9711: typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);\n 9712: typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);\n 9713  typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);\n 9714: typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);\n 9715  typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers);\n 9716  typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers);\n 9717: typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);\n 9718: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 9719: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 9720: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);\n 9721: typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);\n 9722: typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);\n 9723: typedef void (APIENTRYP PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);\n 9724  #endif\n 9725  \n ....\n 9751  #define GL_EXT_framebuffer_blit 1\n 9752  #ifdef GL_GLEXT_PROTOTYPES\n 9753: GLAPI void APIENTRY glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 9754  #endif /* GL_GLEXT_PROTOTYPES */\n 9755: typedef void (APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 9756  #endif\n 9757  \n ....\n 9759  #define GL_EXT_framebuffer_multisample 1\n 9760  #ifdef GL_GLEXT_PROTOTYPES\n 9761: GLAPI void APIENTRY glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 9762  #endif /* GL_GLEXT_PROTOTYPES */\n 9763: typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 9764  #endif\n 9765  \n ....\n 9771  #define GL_EXT_timer_query 1\n 9772  #ifdef GL_GLEXT_PROTOTYPES\n 9773: GLAPI void APIENTRY glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64EXT *params);\n 9774: GLAPI void APIENTRY glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64EXT *params);\n 9775  #endif /* GL_GLEXT_PROTOTYPES */\n 9776: typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params);\n 9777: typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params);\n 9778  #endif\n 9779  \n ....\n 9781  #define GL_EXT_gpu_program_parameters 1\n 9782  #ifdef GL_GLEXT_PROTOTYPES\n 9783: GLAPI void APIENTRY glProgramEnvParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params);\n 9784: GLAPI void APIENTRY glProgramLocalParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params);\n 9785  #endif /* GL_GLEXT_PROTOTYPES */\n 9786: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);\n 9787: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);\n 9788  #endif\n 9789  \n ....\n 9791  #define GL_APPLE_flush_buffer_range 1\n 9792  #ifdef GL_GLEXT_PROTOTYPES\n 9793: GLAPI void APIENTRY glBufferParameteriAPPLE (GLenum target, GLenum pname, GLint param);\n 9794: GLAPI void APIENTRY glFlushMappedBufferRangeAPPLE (GLenum target, GLintptr offset, GLsizeiptr size);\n 9795  #endif /* GL_GLEXT_PROTOTYPES */\n 9796: typedef void (APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);\n 9797: typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);\n 9798  #endif\n 9799  \n ....\n 9801  #define GL_NV_gpu_program4 1\n 9802  #ifdef GL_GLEXT_PROTOTYPES\n 9803: GLAPI void APIENTRY glProgramLocalParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);\n 9804: GLAPI void APIENTRY glProgramLocalParameterI4ivNV (GLenum target, GLuint index, const GLint *params);\n 9805: GLAPI void APIENTRY glProgramLocalParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params);\n 9806: GLAPI void APIENTRY glProgramLocalParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);\n 9807: GLAPI void APIENTRY glProgramLocalParameterI4uivNV (GLenum target, GLuint index, const GLuint *params);\n 9808: GLAPI void APIENTRY glProgramLocalParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params);\n 9809: GLAPI void APIENTRY glProgramEnvParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);\n 9810: GLAPI void APIENTRY glProgramEnvParameterI4ivNV (GLenum target, GLuint index, const GLint *params);\n 9811: GLAPI void APIENTRY glProgramEnvParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params);\n 9812: GLAPI void APIENTRY glProgramEnvParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);\n 9813: GLAPI void APIENTRY glProgramEnvParameterI4uivNV (GLenum target, GLuint index, const GLuint *params);\n 9814: GLAPI void APIENTRY glProgramEnvParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params);\n 9815: GLAPI void APIENTRY glGetProgramLocalParameterIivNV (GLenum target, GLuint index, GLint *params);\n 9816: GLAPI void APIENTRY glGetProgramLocalParameterIuivNV (GLenum target, GLuint index, GLuint *params);\n 9817: GLAPI void APIENTRY glGetProgramEnvParameterIivNV (GLenum target, GLuint index, GLint *params);\n 9818: GLAPI void APIENTRY glGetProgramEnvParameterIuivNV (GLenum target, GLuint index, GLuint *params);\n 9819  #endif /* GL_GLEXT_PROTOTYPES */\n 9820: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);\n 9821: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);\n 9822: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);\n 9823: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);\n 9824: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);\n 9825: typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);\n 9826: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);\n 9827: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);\n 9828: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);\n 9829: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);\n 9830: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);\n 9831: typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);\n 9832: typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);\n 9833: typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);\n 9834: typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);\n 9835: typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);\n 9836  #endif\n 9837  \n ....\n 9839  #define GL_NV_geometry_program4 1\n 9840  #ifdef GL_GLEXT_PROTOTYPES\n 9841: GLAPI void APIENTRY glProgramVertexLimitNV (GLenum target, GLint limit);\n 9842: GLAPI void APIENTRY glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level);\n 9843: GLAPI void APIENTRY glFramebufferTextureLayerEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);\n 9844: GLAPI void APIENTRY glFramebufferTextureFaceEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);\n 9845  #endif /* GL_GLEXT_PROTOTYPES */\n 9846: typedef void (APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);\n 9847: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);\n 9848: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);\n 9849: typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);\n 9850  #endif\n 9851  \n ....\n 9853  #define GL_EXT_geometry_shader4 1\n 9854  #ifdef GL_GLEXT_PROTOTYPES\n 9855: GLAPI void APIENTRY glProgramParameteriEXT (GLuint program, GLenum pname, GLint value);\n 9856  #endif /* GL_GLEXT_PROTOTYPES */\n 9857: typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);\n 9858  #endif\n 9859  \n ....\n 9881  GLAPI void APIENTRY glVertexAttribI4ubvEXT (GLuint index, const GLubyte *v);\n 9882  GLAPI void APIENTRY glVertexAttribI4usvEXT (GLuint index, const GLushort *v);\n 9883: GLAPI void APIENTRY glVertexAttribIPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 9884: GLAPI void APIENTRY glGetVertexAttribIivEXT (GLuint index, GLenum pname, GLint *params);\n 9885: GLAPI void APIENTRY glGetVertexAttribIuivEXT (GLuint index, GLenum pname, GLuint *params);\n 9886  #endif /* GL_GLEXT_PROTOTYPES */\n 9887  typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);\n ....\n 9905  typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);\n 9906  typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);\n 9907: typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 9908: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);\n 9909: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);\n 9910  #endif\n 9911  \n ....\n 9941  #define GL_EXT_draw_instanced 1\n 9942  #ifdef GL_GLEXT_PROTOTYPES\n 9943: GLAPI void APIENTRY glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount);\n 9944: GLAPI void APIENTRY glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);\n 9945  #endif /* GL_GLEXT_PROTOTYPES */\n 9946: typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);\n 9947: typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);\n 9948  #endif\n 9949  \n ....\n 9959  #define GL_EXT_texture_buffer_object 1\n 9960  #ifdef GL_GLEXT_PROTOTYPES\n 9961: GLAPI void APIENTRY glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer);\n 9962  #endif /* GL_GLEXT_PROTOTYPES */\n 9963: typedef void (APIENTRYP PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);\n 9964  #endif\n 9965  \n ....\n 9995  #define GL_NV_framebuffer_multisample_coverage 1\n 9996  #ifdef GL_GLEXT_PROTOTYPES\n 9997: GLAPI void APIENTRY glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);\n 9998  #endif /* GL_GLEXT_PROTOTYPES */\n 9999: typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);\n 10000  #endif\n 10001  \n .....\n 10011  #define GL_NV_parameter_buffer_object 1\n 10012  #ifdef GL_GLEXT_PROTOTYPES\n 10013: GLAPI void APIENTRY glProgramBufferParametersfvNV (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);\n 10014: GLAPI void APIENTRY glProgramBufferParametersIivNV (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);\n 10015: GLAPI void APIENTRY glProgramBufferParametersIuivNV (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);\n 10016  #endif /* GL_GLEXT_PROTOTYPES */\n 10017: typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);\n 10018: typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);\n 10019: typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);\n 10020  #endif\n 10021  \n .....\n 10024  #ifdef GL_GLEXT_PROTOTYPES\n 10025  GLAPI void APIENTRY glColorMaskIndexedEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);\n 10026: GLAPI void APIENTRY glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean *data);\n 10027: GLAPI void APIENTRY glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint *data);\n 10028: GLAPI void APIENTRY glEnableIndexedEXT (GLenum target, GLuint index);\n 10029: GLAPI void APIENTRY glDisableIndexedEXT (GLenum target, GLuint index);\n 10030: GLAPI GLboolean APIENTRY glIsEnabledIndexedEXT (GLenum target, GLuint index);\n 10031  #endif /* GL_GLEXT_PROTOTYPES */\n 10032  typedef void (APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);\n 10033: typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);\n 10034: typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);\n 10035: typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);\n 10036: typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);\n 10037: typedef GLboolean (APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);\n 10038  #endif\n 10039  \n .....\n 10041  #define GL_NV_transform_feedback 1\n 10042  #ifdef GL_GLEXT_PROTOTYPES\n 10043: GLAPI void APIENTRY glBeginTransformFeedbackNV (GLenum primitiveMode);\n 10044  GLAPI void APIENTRY glEndTransformFeedbackNV (void);\n 10045: GLAPI void APIENTRY glTransformFeedbackAttribsNV (GLuint count, const GLint *attribs, GLenum bufferMode);\n 10046: GLAPI void APIENTRY glBindBufferRangeNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);\n 10047: GLAPI void APIENTRY glBindBufferOffsetNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset);\n 10048: GLAPI void APIENTRY glBindBufferBaseNV (GLenum target, GLuint index, GLuint buffer);\n 10049: GLAPI void APIENTRY glTransformFeedbackVaryingsNV (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);\n 10050  GLAPI void APIENTRY glActiveVaryingNV (GLuint program, const GLchar *name);\n 10051  GLAPI GLint APIENTRY glGetVaryingLocationNV (GLuint program, const GLchar *name);\n 10052: GLAPI void APIENTRY glGetActiveVaryingNV (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);\n 10053  GLAPI void APIENTRY glGetTransformFeedbackVaryingNV (GLuint program, GLuint index, GLint *location);\n 10054: GLAPI void APIENTRY glTransformFeedbackStreamAttribsNV (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);\n 10055  #endif /* GL_GLEXT_PROTOTYPES */\n 10056: typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);\n 10057  typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);\n 10058: typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);\n 10059: typedef void (APIENTRYP PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);\n 10060: typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);\n 10061: typedef void (APIENTRYP PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);\n 10062: typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);\n 10063  typedef void (APIENTRYP PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);\n 10064  typedef GLint (APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);\n 10065: typedef void (APIENTRYP PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);\n 10066  typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);\n 10067: typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);\n 10068  #endif\n 10069  \n .....\n 10083  #define GL_EXT_texture_integer 1\n 10084  #ifdef GL_GLEXT_PROTOTYPES\n 10085: GLAPI void APIENTRY glTexParameterIivEXT (GLenum target, GLenum pname, const GLint *params);\n 10086: GLAPI void APIENTRY glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint *params);\n 10087: GLAPI void APIENTRY glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint *params);\n 10088: GLAPI void APIENTRY glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint *params);\n 10089  GLAPI void APIENTRY glClearColorIiEXT (GLint red, GLint green, GLint blue, GLint alpha);\n 10090  GLAPI void APIENTRY glClearColorIuiEXT (GLuint red, GLuint green, GLuint blue, GLuint alpha);\n 10091  #endif /* GL_GLEXT_PROTOTYPES */\n 10092: typedef void (APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);\n 10093: typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);\n 10094: typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);\n 10095: typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);\n 10096  typedef void (APIENTRYP PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);\n 10097  typedef void (APIENTRYP PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);\n .....\n 10109  #define GL_NV_conditional_render 1\n 10110  #ifdef GL_GLEXT_PROTOTYPES\n 10111: GLAPI void APIENTRY glBeginConditionalRenderNV (GLuint id, GLenum mode);\n 10112  GLAPI void APIENTRY glEndConditionalRenderNV (void);\n 10113  #endif /* GL_GLEXT_PROTOTYPES */\n 10114: typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);\n 10115  typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC) (void);\n 10116  #endif\n .....\n 10119  #define GL_NV_present_video 1\n 10120  #ifdef GL_GLEXT_PROTOTYPES\n 10121: GLAPI void APIENTRY glPresentFrameKeyedNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);\n 10122: GLAPI void APIENTRY glPresentFrameDualFillNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);\n 10123: GLAPI void APIENTRY glGetVideoivNV (GLuint video_slot, GLenum pname, GLint *params);\n 10124: GLAPI void APIENTRY glGetVideouivNV (GLuint video_slot, GLenum pname, GLuint *params);\n 10125: GLAPI void APIENTRY glGetVideoi64vNV (GLuint video_slot, GLenum pname, GLint64EXT *params);\n 10126: GLAPI void APIENTRY glGetVideoui64vNV (GLuint video_slot, GLenum pname, GLuint64EXT *params);\n 10127  #endif /* GL_GLEXT_PROTOTYPES */\n 10128: typedef void (APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);\n 10129: typedef void (APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);\n 10130: typedef void (APIENTRYP PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params);\n 10131: typedef void (APIENTRYP PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params);\n 10132: typedef void (APIENTRYP PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params);\n 10133: typedef void (APIENTRYP PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params);\n 10134  #endif\n 10135  \n .....\n 10137  #define GL_EXT_transform_feedback 1\n 10138  #ifdef GL_GLEXT_PROTOTYPES\n 10139: GLAPI void APIENTRY glBeginTransformFeedbackEXT (GLenum primitiveMode);\n 10140  GLAPI void APIENTRY glEndTransformFeedbackEXT (void);\n 10141: GLAPI void APIENTRY glBindBufferRangeEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);\n 10142: GLAPI void APIENTRY glBindBufferOffsetEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset);\n 10143: GLAPI void APIENTRY glBindBufferBaseEXT (GLenum target, GLuint index, GLuint buffer);\n 10144: GLAPI void APIENTRY glTransformFeedbackVaryingsEXT (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);\n 10145: GLAPI void APIENTRY glGetTransformFeedbackVaryingEXT (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);\n 10146  #endif /* GL_GLEXT_PROTOTYPES */\n 10147: typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);\n 10148  typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);\n 10149: typedef void (APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);\n 10150: typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);\n 10151: typedef void (APIENTRYP PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);\n 10152: typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);\n 10153: typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);\n 10154  #endif\n 10155  \n .....\n 10159  GLAPI void APIENTRY glClientAttribDefaultEXT (GLbitfield mask);\n 10160  GLAPI void APIENTRY glPushClientAttribDefaultEXT (GLbitfield mask);\n 10161: GLAPI void APIENTRY glMatrixLoadfEXT (GLenum mode, const GLfloat *m);\n 10162: GLAPI void APIENTRY glMatrixLoaddEXT (GLenum mode, const GLdouble *m);\n 10163: GLAPI void APIENTRY glMatrixMultfEXT (GLenum mode, const GLfloat *m);\n 10164: GLAPI void APIENTRY glMatrixMultdEXT (GLenum mode, const GLdouble *m);\n 10165: GLAPI void APIENTRY glMatrixLoadIdentityEXT (GLenum mode);\n 10166: GLAPI void APIENTRY glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);\n 10167: GLAPI void APIENTRY glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);\n 10168: GLAPI void APIENTRY glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);\n 10169: GLAPI void APIENTRY glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);\n 10170: GLAPI void APIENTRY glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);\n 10171: GLAPI void APIENTRY glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);\n 10172: GLAPI void APIENTRY glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);\n 10173: GLAPI void APIENTRY glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);\n 10174: GLAPI void APIENTRY glMatrixPopEXT (GLenum mode);\n 10175: GLAPI void APIENTRY glMatrixPushEXT (GLenum mode);\n 10176: GLAPI void APIENTRY glMatrixLoadTransposefEXT (GLenum mode, const GLfloat *m);\n 10177: GLAPI void APIENTRY glMatrixLoadTransposedEXT (GLenum mode, const GLdouble *m);\n 10178: GLAPI void APIENTRY glMatrixMultTransposefEXT (GLenum mode, const GLfloat *m);\n 10179: GLAPI void APIENTRY glMatrixMultTransposedEXT (GLenum mode, const GLdouble *m);\n 10180: GLAPI void APIENTRY glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param);\n 10181: GLAPI void APIENTRY glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);\n 10182: GLAPI void APIENTRY glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param);\n 10183: GLAPI void APIENTRY glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);\n 10184: GLAPI void APIENTRY glTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10185: GLAPI void APIENTRY glTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10186: GLAPI void APIENTRY glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);\n 10187: GLAPI void APIENTRY glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);\n 10188: GLAPI void APIENTRY glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);\n 10189: GLAPI void APIENTRY glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);\n 10190: GLAPI void APIENTRY glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);\n 10191: GLAPI void APIENTRY glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 10192: GLAPI void APIENTRY glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);\n 10193: GLAPI void APIENTRY glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat *params);\n 10194: GLAPI void APIENTRY glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);\n 10195: GLAPI void APIENTRY glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);\n 10196: GLAPI void APIENTRY glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);\n 10197: GLAPI void APIENTRY glTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10198: GLAPI void APIENTRY glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);\n 10199: GLAPI void APIENTRY glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 10200: GLAPI void APIENTRY glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);\n 10201: GLAPI void APIENTRY glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);\n 10202: GLAPI void APIENTRY glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);\n 10203: GLAPI void APIENTRY glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);\n 10204: GLAPI void APIENTRY glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10205: GLAPI void APIENTRY glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10206: GLAPI void APIENTRY glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);\n 10207: GLAPI void APIENTRY glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);\n 10208: GLAPI void APIENTRY glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);\n 10209: GLAPI void APIENTRY glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);\n 10210: GLAPI void APIENTRY glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);\n 10211: GLAPI void APIENTRY glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 10212: GLAPI void APIENTRY glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);\n 10213: GLAPI void APIENTRY glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);\n 10214: GLAPI void APIENTRY glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);\n 10215: GLAPI void APIENTRY glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);\n 10216: GLAPI void APIENTRY glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);\n 10217: GLAPI void APIENTRY glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10218: GLAPI void APIENTRY glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);\n 10219: GLAPI void APIENTRY glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 10220: GLAPI void APIENTRY glBindMultiTextureEXT (GLenum texunit, GLenum target, GLuint texture);\n 10221: GLAPI void APIENTRY glEnableClientStateIndexedEXT (GLenum array, GLuint index);\n 10222: GLAPI void APIENTRY glDisableClientStateIndexedEXT (GLenum array, GLuint index);\n 10223: GLAPI void APIENTRY glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 10224: GLAPI void APIENTRY glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);\n 10225: GLAPI void APIENTRY glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);\n 10226: GLAPI void APIENTRY glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);\n 10227: GLAPI void APIENTRY glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);\n 10228: GLAPI void APIENTRY glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);\n 10229: GLAPI void APIENTRY glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);\n 10230: GLAPI void APIENTRY glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);\n 10231: GLAPI void APIENTRY glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);\n 10232: GLAPI void APIENTRY glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param);\n 10233: GLAPI void APIENTRY glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);\n 10234: GLAPI void APIENTRY glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);\n 10235: GLAPI void APIENTRY glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);\n 10236: GLAPI void APIENTRY glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);\n 10237: GLAPI void APIENTRY glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);\n 10238: GLAPI void APIENTRY glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint *params);\n 10239: GLAPI void APIENTRY glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat *data);\n 10240: GLAPI void APIENTRY glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble *data);\n 10241: GLAPI void APIENTRY glGetPointerIndexedvEXT (GLenum target, GLuint index, GLvoid* *data);\n 10242: GLAPI void APIENTRY glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10243: GLAPI void APIENTRY glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10244: GLAPI void APIENTRY glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10245: GLAPI void APIENTRY glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10246: GLAPI void APIENTRY glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10247: GLAPI void APIENTRY glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10248: GLAPI void APIENTRY glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, GLvoid *img);\n 10249: GLAPI void APIENTRY glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10250: GLAPI void APIENTRY glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10251: GLAPI void APIENTRY glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10252: GLAPI void APIENTRY glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10253: GLAPI void APIENTRY glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10254: GLAPI void APIENTRY glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10255: GLAPI void APIENTRY glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, GLvoid *img);\n 10256: GLAPI void APIENTRY glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);\n 10257: GLAPI void APIENTRY glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 10258: GLAPI void APIENTRY glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index, const GLdouble *params);\n 10259: GLAPI void APIENTRY glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 10260: GLAPI void APIENTRY glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index, const GLfloat *params);\n 10261: GLAPI void APIENTRY glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble *params);\n 10262: GLAPI void APIENTRY glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat *params);\n 10263: GLAPI void APIENTRY glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint *params);\n 10264: GLAPI void APIENTRY glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, GLvoid *string);\n 10265: GLAPI void APIENTRY glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);\n 10266: GLAPI void APIENTRY glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);\n 10267: GLAPI void APIENTRY glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint *params);\n 10268: GLAPI void APIENTRY glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);\n 10269: GLAPI void APIENTRY glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);\n 10270: GLAPI void APIENTRY glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint *params);\n 10271: GLAPI void APIENTRY glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);\n 10272: GLAPI void APIENTRY glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint *params);\n 10273: GLAPI void APIENTRY glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint *params);\n 10274: GLAPI void APIENTRY glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);\n 10275: GLAPI void APIENTRY glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint *params);\n 10276: GLAPI void APIENTRY glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);\n 10277: GLAPI void APIENTRY glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint *params);\n 10278: GLAPI void APIENTRY glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);\n 10279: GLAPI void APIENTRY glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);\n 10280: GLAPI void APIENTRY glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);\n 10281: GLAPI void APIENTRY glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint *params);\n 10282  GLAPI void APIENTRY glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0);\n 10283  GLAPI void APIENTRY glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1);\n .....\n 10313  GLAPI void APIENTRY glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);\n 10314  GLAPI void APIENTRY glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);\n 10315: GLAPI void APIENTRY glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);\n 10316  GLAPI void APIENTRY glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);\n 10317: GLAPI GLvoid* APIENTRY glMapNamedBufferEXT (GLuint buffer, GLenum access);\n 10318  GLAPI GLboolean APIENTRY glUnmapNamedBufferEXT (GLuint buffer);\n 10319  GLAPI GLvoid* APIENTRY glMapNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);\n 10320  GLAPI void APIENTRY glFlushMappedNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length);\n 10321  GLAPI void APIENTRY glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\n 10322: GLAPI void APIENTRY glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint *params);\n 10323: GLAPI void APIENTRY glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, GLvoid* *params);\n 10324  GLAPI void APIENTRY glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);\n 10325: GLAPI void APIENTRY glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);\n 10326: GLAPI void APIENTRY glMultiTexBufferEXT (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);\n 10327: GLAPI void APIENTRY glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);\n 10328: GLAPI void APIENTRY glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint *params);\n 10329: GLAPI GLenum APIENTRY glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target);\n 10330: GLAPI void APIENTRY glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 10331: GLAPI void APIENTRY glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 10332: GLAPI void APIENTRY glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);\n 10333: GLAPI void APIENTRY glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);\n 10334: GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);\n 10335: GLAPI void APIENTRY glGenerateTextureMipmapEXT (GLuint texture, GLenum target);\n 10336: GLAPI void APIENTRY glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target);\n 10337: GLAPI void APIENTRY glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode);\n 10338: GLAPI void APIENTRY glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum *bufs);\n 10339: GLAPI void APIENTRY glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode);\n 10340: GLAPI void APIENTRY glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params);\n 10341: GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 10342: GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);\n 10343: GLAPI void APIENTRY glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);\n 10344: GLAPI void APIENTRY glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);\n 10345: GLAPI void APIENTRY glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);\n 10346: GLAPI void APIENTRY glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer);\n 10347: GLAPI void APIENTRY glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer);\n 10348  GLAPI void APIENTRY glProgramUniform1dEXT (GLuint program, GLint location, GLdouble x);\n 10349  GLAPI void APIENTRY glProgramUniform2dEXT (GLuint program, GLint location, GLdouble x, GLdouble y);\n .....\n 10366  typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);\n 10367  typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);\n 10368: typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m);\n 10369: typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m);\n 10370: typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m);\n 10371: typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m);\n 10372: typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode);\n 10373: typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);\n 10374: typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);\n 10375: typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);\n 10376: typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);\n 10377: typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);\n 10378: typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);\n 10379: typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);\n 10380: typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);\n 10381: typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode);\n 10382: typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC) (GLenum mode);\n 10383: typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);\n 10384: typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);\n 10385: typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);\n 10386: typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);\n 10387: typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);\n 10388: typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);\n 10389: typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);\n 10390: typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);\n 10391: typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10392: typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10393: typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);\n 10394: typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);\n 10395: typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);\n 10396: typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);\n 10397: typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);\n 10398: typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 10399: typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);\n 10400: typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);\n 10401: typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);\n 10402: typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);\n 10403: typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);\n 10404: typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10405: typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);\n 10406: typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 10407: typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);\n 10408: typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);\n 10409: typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);\n 10410: typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);\n 10411: typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10412: typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10413: typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);\n 10414: typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);\n 10415: typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);\n 10416: typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);\n 10417: typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);\n 10418: typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 10419: typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);\n 10420: typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);\n 10421: typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);\n 10422: typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);\n 10423: typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);\n 10424: typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);\n 10425: typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);\n 10426: typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 10427: typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);\n 10428: typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);\n 10429: typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);\n 10430: typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 10431: typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);\n 10432: typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);\n 10433: typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);\n 10434: typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);\n 10435: typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);\n 10436: typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);\n 10437: typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);\n 10438: typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);\n 10439: typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);\n 10440: typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);\n 10441: typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);\n 10442: typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);\n 10443: typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);\n 10444: typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);\n 10445: typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);\n 10446: typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data);\n 10447: typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data);\n 10448: typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLvoid* *data);\n 10449: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10450: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10451: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10452: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10453: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10454: typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10455: typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, GLvoid *img);\n 10456: typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10457: typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10458: typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);\n 10459: typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10460: typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10461: typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);\n 10462: typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, GLvoid *img);\n 10463: typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);\n 10464: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\n 10465: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params);\n 10466: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n 10467: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params);\n 10468: typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params);\n 10469: typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params);\n 10470: typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params);\n 10471: typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, GLvoid *string);\n 10472: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);\n 10473: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);\n 10474: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params);\n 10475: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);\n 10476: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);\n 10477: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params);\n 10478: typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);\n 10479: typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params);\n 10480: typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params);\n 10481: typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);\n 10482: typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);\n 10483: typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);\n 10484: typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params);\n 10485: typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);\n 10486: typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);\n 10487: typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);\n 10488: typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);\n 10489  typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);\n 10490  typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);\n .....\n 10520  typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);\n 10521  typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);\n 10522: typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);\n 10523  typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);\n 10524: typedef GLvoid* (APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);\n 10525  typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);\n 10526  typedef GLvoid* (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);\n 10527  typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);\n 10528  typedef void (APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\n 10529: typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params);\n 10530: typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, GLvoid* *params);\n 10531  typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);\n 10532: typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);\n 10533: typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);\n 10534: typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);\n 10535: typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params);\n 10536: typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);\n 10537: typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 10538: typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n 10539: typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);\n 10540: typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);\n 10541: typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);\n 10542: typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);\n 10543: typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);\n 10544: typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);\n 10545: typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);\n 10546: typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);\n 10547: typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);\n 10548: typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 10549: typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);\n 10550: typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);\n 10551: typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);\n 10552: typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);\n 10553: typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);\n 10554: typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);\n 10555  typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x);\n 10556  typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);\n .....\n 10583  #define GL_NV_explicit_multisample 1\n 10584  #ifdef GL_GLEXT_PROTOTYPES\n 10585: GLAPI void APIENTRY glGetMultisamplefvNV (GLenum pname, GLuint index, GLfloat *val);\n 10586  GLAPI void APIENTRY glSampleMaskIndexedNV (GLuint index, GLbitfield mask);\n 10587: GLAPI void APIENTRY glTexRenderbufferNV (GLenum target, GLuint renderbuffer);\n 10588  #endif /* GL_GLEXT_PROTOTYPES */\n 10589: typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val);\n 10590  typedef void (APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);\n 10591: typedef void (APIENTRYP PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);\n 10592  #endif\n 10593  \n .....\n 10595  #define GL_NV_transform_feedback2 1\n 10596  #ifdef GL_GLEXT_PROTOTYPES\n 10597: GLAPI void APIENTRY glBindTransformFeedbackNV (GLenum target, GLuint id);\n 10598  GLAPI void APIENTRY glDeleteTransformFeedbacksNV (GLsizei n, const GLuint *ids);\n 10599  GLAPI void APIENTRY glGenTransformFeedbacksNV (GLsizei n, GLuint *ids);\n .....\n 10601  GLAPI void APIENTRY glPauseTransformFeedbackNV (void);\n 10602  GLAPI void APIENTRY glResumeTransformFeedbackNV (void);\n 10603: GLAPI void APIENTRY glDrawTransformFeedbackNV (GLenum mode, GLuint id);\n 10604  #endif /* GL_GLEXT_PROTOTYPES */\n 10605: typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);\n 10606  typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids);\n 10607  typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids);\n .....\n 10609  typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);\n 10610  typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);\n 10611: typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);\n 10612  #endif\n 10613  \n .....\n 10623  GLAPI void APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);\n 10624  GLAPI void APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);\n 10625: GLAPI void APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, GLvoid *data);\n 10626  GLAPI void APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors);\n 10627  GLAPI void APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors);\n .....\n 10629  GLAPI void APIENTRY glBeginPerfMonitorAMD (GLuint monitor);\n 10630  GLAPI void APIENTRY glEndPerfMonitorAMD (GLuint monitor);\n 10631: GLAPI void APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);\n 10632  #endif /* GL_GLEXT_PROTOTYPES */\n 10633  typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);\n .....\n 10635  typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);\n 10636  typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);\n 10637: typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, GLvoid *data);\n 10638  typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);\n 10639  typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);\n .....\n 10641  typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);\n 10642  typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);\n 10643: typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);\n 10644  #endif\n 10645  \n .....\n 10652  #ifdef GL_GLEXT_PROTOTYPES\n 10653  GLAPI void APIENTRY glTessellationFactorAMD (GLfloat factor);\n 10654: GLAPI void APIENTRY glTessellationModeAMD (GLenum mode);\n 10655  #endif /* GL_GLEXT_PROTOTYPES */\n 10656  typedef void (APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);\n 10657: typedef void (APIENTRYP PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);\n 10658  #endif\n 10659  \n .....\n 10661  #define GL_EXT_provoking_vertex 1\n 10662  #ifdef GL_GLEXT_PROTOTYPES\n 10663: GLAPI void APIENTRY glProvokingVertexEXT (GLenum mode);\n 10664  #endif /* GL_GLEXT_PROTOTYPES */\n 10665: typedef void (APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);\n 10666  #endif\n 10667  \n .....\n 10673  #define GL_AMD_draw_buffers_blend 1\n 10674  #ifdef GL_GLEXT_PROTOTYPES\n 10675: GLAPI void APIENTRY glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum dst);\n 10676: GLAPI void APIENTRY glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 10677: GLAPI void APIENTRY glBlendEquationIndexedAMD (GLuint buf, GLenum mode);\n 10678: GLAPI void APIENTRY glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 10679  #endif /* GL_GLEXT_PROTOTYPES */\n 10680: typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);\n 10681: typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n 10682: typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);\n 10683: typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);\n 10684  #endif\n 10685  \n .....\n 10687  #define GL_APPLE_texture_range 1\n 10688  #ifdef GL_GLEXT_PROTOTYPES\n 10689: GLAPI void APIENTRY glTextureRangeAPPLE (GLenum target, GLsizei length, const GLvoid *pointer);\n 10690: GLAPI void APIENTRY glGetTexParameterPointervAPPLE (GLenum target, GLenum pname, GLvoid* *params);\n 10691  #endif /* GL_GLEXT_PROTOTYPES */\n 10692: typedef void (APIENTRYP PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const GLvoid *pointer);\n 10693: typedef void (APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, GLvoid* *params);\n 10694  #endif\n 10695  \n .....\n 10701  #define GL_APPLE_vertex_program_evaluators 1\n 10702  #ifdef GL_GLEXT_PROTOTYPES\n 10703: GLAPI void APIENTRY glEnableVertexAttribAPPLE (GLuint index, GLenum pname);\n 10704: GLAPI void APIENTRY glDisableVertexAttribAPPLE (GLuint index, GLenum pname);\n 10705: GLAPI GLboolean APIENTRY glIsVertexAttribEnabledAPPLE (GLuint index, GLenum pname);\n 10706  GLAPI void APIENTRY glMapVertexAttrib1dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);\n 10707  GLAPI void APIENTRY glMapVertexAttrib1fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);\n .....\n 10709  GLAPI void APIENTRY glMapVertexAttrib2fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);\n 10710  #endif /* GL_GLEXT_PROTOTYPES */\n 10711: typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);\n 10712: typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);\n 10713: typedef GLboolean (APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);\n 10714  typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);\n 10715  typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);\n .....\n 10725  #define GL_APPLE_object_purgeable 1\n 10726  #ifdef GL_GLEXT_PROTOTYPES\n 10727: GLAPI GLenum APIENTRY glObjectPurgeableAPPLE (GLenum objectType, GLuint name, GLenum option);\n 10728: GLAPI GLenum APIENTRY glObjectUnpurgeableAPPLE (GLenum objectType, GLuint name, GLenum option);\n 10729: GLAPI void APIENTRY glGetObjectParameterivAPPLE (GLenum objectType, GLuint name, GLenum pname, GLint *params);\n 10730  #endif /* GL_GLEXT_PROTOTYPES */\n 10731: typedef GLenum (APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);\n 10732: typedef GLenum (APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);\n 10733: typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params);\n 10734  #endif\n 10735  \n .....\n 10746  #ifdef GL_GLEXT_PROTOTYPES\n 10747  GLAPI void APIENTRY glBeginVideoCaptureNV (GLuint video_capture_slot);\n 10748: GLAPI void APIENTRY glBindVideoCaptureStreamBufferNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);\n 10749: GLAPI void APIENTRY glBindVideoCaptureStreamTextureNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);\n 10750  GLAPI void APIENTRY glEndVideoCaptureNV (GLuint video_capture_slot);\n 10751: GLAPI void APIENTRY glGetVideoCaptureivNV (GLuint video_capture_slot, GLenum pname, GLint *params);\n 10752: GLAPI void APIENTRY glGetVideoCaptureStreamivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);\n 10753: GLAPI void APIENTRY glGetVideoCaptureStreamfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);\n 10754: GLAPI void APIENTRY glGetVideoCaptureStreamdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);\n 10755: GLAPI GLenum APIENTRY glVideoCaptureNV (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);\n 10756: GLAPI void APIENTRY glVideoCaptureStreamParameterivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);\n 10757: GLAPI void APIENTRY glVideoCaptureStreamParameterfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);\n 10758: GLAPI void APIENTRY glVideoCaptureStreamParameterdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);\n 10759  #endif /* GL_GLEXT_PROTOTYPES */\n 10760  typedef void (APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);\n 10761: typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);\n 10762: typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);\n 10763  typedef void (APIENTRYP PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);\n 10764: typedef void (APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params);\n 10765: typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);\n 10766: typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);\n 10767: typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);\n 10768: typedef GLenum (APIENTRYP PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);\n 10769: typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);\n 10770: typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);\n 10771: typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);\n 10772  #endif\n 10773  \n .....\n 10775  #define GL_NV_copy_image 1\n 10776  #ifdef GL_GLEXT_PROTOTYPES\n 10777: GLAPI void APIENTRY glCopyImageSubDataNV (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);\n 10778  #endif /* GL_GLEXT_PROTOTYPES */\n 10779: typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);\n 10780  #endif\n 10781  \n .....\n 10783  #define GL_EXT_separate_shader_objects 1\n 10784  #ifdef GL_GLEXT_PROTOTYPES\n 10785: GLAPI void APIENTRY glUseShaderProgramEXT (GLenum type, GLuint program);\n 10786  GLAPI void APIENTRY glActiveProgramEXT (GLuint program);\n 10787: GLAPI GLuint APIENTRY glCreateShaderProgramEXT (GLenum type, const GLchar *string);\n 10788  #endif /* GL_GLEXT_PROTOTYPES */\n 10789: typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);\n 10790  typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);\n 10791: typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string);\n 10792  #endif\n 10793  \n .....\n 10799  #define GL_NV_shader_buffer_load 1\n 10800  #ifdef GL_GLEXT_PROTOTYPES\n 10801: GLAPI void APIENTRY glMakeBufferResidentNV (GLenum target, GLenum access);\n 10802: GLAPI void APIENTRY glMakeBufferNonResidentNV (GLenum target);\n 10803: GLAPI GLboolean APIENTRY glIsBufferResidentNV (GLenum target);\n 10804: GLAPI void APIENTRY glMakeNamedBufferResidentNV (GLuint buffer, GLenum access);\n 10805  GLAPI void APIENTRY glMakeNamedBufferNonResidentNV (GLuint buffer);\n 10806  GLAPI GLboolean APIENTRY glIsNamedBufferResidentNV (GLuint buffer);\n 10807: GLAPI void APIENTRY glGetBufferParameterui64vNV (GLenum target, GLenum pname, GLuint64EXT *params);\n 10808: GLAPI void APIENTRY glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum pname, GLuint64EXT *params);\n 10809: GLAPI void APIENTRY glGetIntegerui64vNV (GLenum value, GLuint64EXT *result);\n 10810  GLAPI void APIENTRY glUniformui64NV (GLint location, GLuint64EXT value);\n 10811  GLAPI void APIENTRY glUniformui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);\n .....\n 10814  GLAPI void APIENTRY glProgramUniformui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);\n 10815  #endif /* GL_GLEXT_PROTOTYPES */\n 10816: typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);\n 10817: typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);\n 10818: typedef GLboolean (APIENTRYP PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);\n 10819: typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);\n 10820  typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);\n 10821  typedef GLboolean (APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);\n 10822: typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params);\n 10823: typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params);\n 10824: typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result);\n 10825  typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);\n 10826  typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);\n .....\n 10833  #define GL_NV_vertex_buffer_unified_memory 1\n 10834  #ifdef GL_GLEXT_PROTOTYPES\n 10835: GLAPI void APIENTRY glBufferAddressRangeNV (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);\n 10836: GLAPI void APIENTRY glVertexFormatNV (GLint size, GLenum type, GLsizei stride);\n 10837: GLAPI void APIENTRY glNormalFormatNV (GLenum type, GLsizei stride);\n 10838: GLAPI void APIENTRY glColorFormatNV (GLint size, GLenum type, GLsizei stride);\n 10839: GLAPI void APIENTRY glIndexFormatNV (GLenum type, GLsizei stride);\n 10840: GLAPI void APIENTRY glTexCoordFormatNV (GLint size, GLenum type, GLsizei stride);\n 10841  GLAPI void APIENTRY glEdgeFlagFormatNV (GLsizei stride);\n 10842: GLAPI void APIENTRY glSecondaryColorFormatNV (GLint size, GLenum type, GLsizei stride);\n 10843: GLAPI void APIENTRY glFogCoordFormatNV (GLenum type, GLsizei stride);\n 10844: GLAPI void APIENTRY glVertexAttribFormatNV (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);\n 10845: GLAPI void APIENTRY glVertexAttribIFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);\n 10846: GLAPI void APIENTRY glGetIntegerui64i_vNV (GLenum value, GLuint index, GLuint64EXT *result);\n 10847  #endif /* GL_GLEXT_PROTOTYPES */\n 10848: typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);\n 10849: typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);\n 10850: typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);\n 10851: typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);\n 10852: typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);\n 10853: typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);\n 10854  typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);\n 10855: typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);\n 10856: typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);\n 10857: typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);\n 10858: typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);\n 10859: typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);\n 10860  #endif\n 10861  \n .....\n 10883  #define GL_EXT_shader_image_load_store 1\n 10884  #ifdef GL_GLEXT_PROTOTYPES\n 10885: GLAPI void APIENTRY glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);\n 10886  GLAPI void APIENTRY glMemoryBarrierEXT (GLbitfield barriers);\n 10887  #endif /* GL_GLEXT_PROTOTYPES */\n 10888: typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);\n 10889  typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);\n 10890  #endif\n .....\n 10901  GLAPI void APIENTRY glVertexAttribL3dvEXT (GLuint index, const GLdouble *v);\n 10902  GLAPI void APIENTRY glVertexAttribL4dvEXT (GLuint index, const GLdouble *v);\n 10903: GLAPI void APIENTRY glVertexAttribLPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 10904: GLAPI void APIENTRY glGetVertexAttribLdvEXT (GLuint index, GLenum pname, GLdouble *params);\n 10905: GLAPI void APIENTRY glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);\n 10906  #endif /* GL_GLEXT_PROTOTYPES */\n 10907  typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x);\n .....\n 10913  typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble *v);\n 10914  typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble *v);\n 10915: typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);\n 10916: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble *params);\n 10917: typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);\n 10918  #endif\n 10919  \n .....\n 10921  #define GL_NV_gpu_program5 1\n 10922  #ifdef GL_GLEXT_PROTOTYPES\n 10923: GLAPI void APIENTRY glProgramSubroutineParametersuivNV (GLenum target, GLsizei count, const GLuint *params);\n 10924: GLAPI void APIENTRY glGetProgramSubroutineParameteruivNV (GLenum target, GLuint index, GLuint *param);\n 10925  #endif /* GL_GLEXT_PROTOTYPES */\n 10926: typedef void (APIENTRYP PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum target, GLsizei count, const GLuint *params);\n 10927: typedef void (APIENTRYP PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum target, GLuint index, GLuint *param);\n 10928  #endif\n 10929  \n .....\n 11027  GLAPI void APIENTRY glVertexAttribL3ui64vNV (GLuint index, const GLuint64EXT *v);\n 11028  GLAPI void APIENTRY glVertexAttribL4ui64vNV (GLuint index, const GLuint64EXT *v);\n 11029: GLAPI void APIENTRY glGetVertexAttribLi64vNV (GLuint index, GLenum pname, GLint64EXT *params);\n 11030: GLAPI void APIENTRY glGetVertexAttribLui64vNV (GLuint index, GLenum pname, GLuint64EXT *params);\n 11031: GLAPI void APIENTRY glVertexAttribLFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);\n 11032  #endif /* GL_GLEXT_PROTOTYPES */\n 11033  typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);\n .....\n 11047  typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v);\n 11048  typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v);\n 11049: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params);\n 11050: typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params);\n 11051: typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);\n 11052  #endif\n 11053  \n .....\n 11059  #define GL_AMD_name_gen_delete 1\n 11060  #ifdef GL_GLEXT_PROTOTYPES\n 11061: GLAPI void APIENTRY glGenNamesAMD (GLenum identifier, GLuint num, GLuint *names);\n 11062: GLAPI void APIENTRY glDeleteNamesAMD (GLenum identifier, GLuint num, const GLuint *names);\n 11063: GLAPI GLboolean APIENTRY glIsNameAMD (GLenum identifier, GLuint name);\n 11064  #endif /* GL_GLEXT_PROTOTYPES */\n 11065: typedef void (APIENTRYP PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint *names);\n 11066: typedef void (APIENTRYP PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint *names);\n 11067: typedef GLboolean (APIENTRYP PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name);\n 11068  #endif\n 11069  \n .....\n 11071  #define GL_AMD_debug_output 1\n 11072  #ifdef GL_GLEXT_PROTOTYPES\n 11073: GLAPI void APIENTRY glDebugMessageEnableAMD (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);\n 11074: GLAPI void APIENTRY glDebugMessageInsertAMD (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);\n 11075  GLAPI void APIENTRY glDebugMessageCallbackAMD (GLDEBUGPROCAMD callback, GLvoid *userParam);\n 11076: GLAPI GLuint APIENTRY glGetDebugMessageLogAMD (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);\n 11077  #endif /* GL_GLEXT_PROTOTYPES */\n 11078: typedef void (APIENTRYP PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);\n 11079: typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);\n 11080  typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, GLvoid *userParam);\n 11081: typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);\n 11082  #endif\n 11083  \n .....\n 11087  GLAPI void APIENTRY glVDPAUInitNV (const GLvoid *vdpDevice, const GLvoid *getProcAddress);\n 11088  GLAPI void APIENTRY glVDPAUFiniNV (void);\n 11089: GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterVideoSurfaceNV (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);\n 11090: GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterOutputSurfaceNV (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);\n 11091  GLAPI void APIENTRY glVDPAUIsSurfaceNV (GLvdpauSurfaceNV surface);\n 11092  GLAPI void APIENTRY glVDPAUUnregisterSurfaceNV (GLvdpauSurfaceNV surface);\n 11093: GLAPI void APIENTRY glVDPAUGetSurfaceivNV (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);\n 11094: GLAPI void APIENTRY glVDPAUSurfaceAccessNV (GLvdpauSurfaceNV surface, GLenum access);\n 11095  GLAPI void APIENTRY glVDPAUMapSurfacesNV (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);\n 11096  GLAPI void APIENTRY glVDPAUUnmapSurfacesNV (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);\n .....\n 11098  typedef void (APIENTRYP PFNGLVDPAUINITNVPROC) (const GLvoid *vdpDevice, const GLvoid *getProcAddress);\n 11099  typedef void (APIENTRYP PFNGLVDPAUFININVPROC) (void);\n 11100: typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);\n 11101: typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);\n 11102  typedef void (APIENTRYP PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface);\n 11103  typedef void (APIENTRYP PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface);\n 11104: typedef void (APIENTRYP PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);\n 11105: typedef void (APIENTRYP PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access);\n 11106  typedef void (APIENTRYP PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);\n 11107  typedef void (APIENTRYP PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_opengles2.h:\n  108  *                                         nanoseconds\n  109  *    khronos_stime_nanoseconds_t signed time interval in nanoseconds\n  110: *    khronos_boolean_enum_t      enumerated boolean type. This should\n  111  *      only be used as a base type when a client API's boolean type is\n  112: *      an enum. Client APIs which use an integer or other type for\n  113  *      booleans cannot use this as the base type for their boolean.\n  114  *\n  115  * Tokens defined in khrplatform.h:\n  116  *\n  117: *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.\n  118  *\n  119  *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.\n  ...\n  301  \n  302  /*\n  303: * Dummy value used to pad enum types to 32 bits.\n  304  */\n  305: #ifndef KHRONOS_MAX_ENUM\n  306: #define KHRONOS_MAX_ENUM 0x7FFFFFFF\n  307  #endif\n  308  \n  309  /*\n  310: * Enumerated boolean type\n  311  *\n  312  * Values other than zero should be considered to be true.  Therefore\n  313  * comparisons should not be made against KHRONOS_TRUE.\n  314  */\n  315: typedef enum {\n  316      KHRONOS_FALSE = 0,\n  317      KHRONOS_TRUE = 1,\n  318:     KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM\n  319: } khronos_boolean_enum_t;\n  320  \n  321  #endif /* __khrplatform_h_ */\n  ...\n  375  typedef void             GLvoid;\n  376  typedef char             GLchar;\n  377: typedef unsigned int     GLenum;\n  378  typedef unsigned char    GLboolean;\n  379  typedef unsigned int     GLbitfield;\n  ...\n  510  /* ErrorCode */\n  511  #define GL_NO_ERROR                       0\n  512: #define GL_INVALID_ENUM                   0x0500\n  513  #define GL_INVALID_VALUE                  0x0501\n  514  #define GL_INVALID_OPERATION              0x0502\n  ...\n  825   *-----------------------------------------------------------------------*/\n  826  \n  827: GL_APICALL void         GL_APIENTRY glActiveTexture (GLenum texture);\n  828  GL_APICALL void         GL_APIENTRY glAttachShader (GLuint program, GLuint shader);\n  829  GL_APICALL void         GL_APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar* name);\n  830: GL_APICALL void         GL_APIENTRY glBindBuffer (GLenum target, GLuint buffer);\n  831: GL_APICALL void         GL_APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);\n  832: GL_APICALL void         GL_APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);\n  833: GL_APICALL void         GL_APIENTRY glBindTexture (GLenum target, GLuint texture);\n  834  GL_APICALL void         GL_APIENTRY glBlendColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\n  835: GL_APICALL void         GL_APIENTRY glBlendEquation ( GLenum mode );\n  836: GL_APICALL void         GL_APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);\n  837: GL_APICALL void         GL_APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);\n  838: GL_APICALL void         GL_APIENTRY glBlendFuncSeparate (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\n  839: GL_APICALL void         GL_APIENTRY glBufferData (GLenum target, GLsizeiptr size, const GLvoid* data, GLenum usage);\n  840: GL_APICALL void         GL_APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid* data);\n  841: GL_APICALL GLenum       GL_APIENTRY glCheckFramebufferStatus (GLenum target);\n  842  GL_APICALL void         GL_APIENTRY glClear (GLbitfield mask);\n  843  GL_APICALL void         GL_APIENTRY glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\n  ...\n  846  GL_APICALL void         GL_APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);\n  847  GL_APICALL void         GL_APIENTRY glCompileShader (GLuint shader);\n  848: GL_APICALL void         GL_APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid* data);\n  849: GL_APICALL void         GL_APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid* data);\n  850: GL_APICALL void         GL_APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);\n  851: GL_APICALL void         GL_APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n  852  GL_APICALL GLuint       GL_APIENTRY glCreateProgram (void);\n  853: GL_APICALL GLuint       GL_APIENTRY glCreateShader (GLenum type);\n  854: GL_APICALL void         GL_APIENTRY glCullFace (GLenum mode);\n  855  GL_APICALL void         GL_APIENTRY glDeleteBuffers (GLsizei n, const GLuint* buffers);\n  856  GL_APICALL void         GL_APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint* framebuffers);\n  ...\n  859  GL_APICALL void         GL_APIENTRY glDeleteShader (GLuint shader);\n  860  GL_APICALL void         GL_APIENTRY glDeleteTextures (GLsizei n, const GLuint* textures);\n  861: GL_APICALL void         GL_APIENTRY glDepthFunc (GLenum func);\n  862  GL_APICALL void         GL_APIENTRY glDepthMask (GLboolean flag);\n  863  GL_APICALL void         GL_APIENTRY glDepthRangef (GLclampf zNear, GLclampf zFar);\n  864  GL_APICALL void         GL_APIENTRY glDetachShader (GLuint program, GLuint shader);\n  865: GL_APICALL void         GL_APIENTRY glDisable (GLenum cap);\n  866  GL_APICALL void         GL_APIENTRY glDisableVertexAttribArray (GLuint index);\n  867: GL_APICALL void         GL_APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);\n  868: GL_APICALL void         GL_APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid* indices);\n  869: GL_APICALL void         GL_APIENTRY glEnable (GLenum cap);\n  870  GL_APICALL void         GL_APIENTRY glEnableVertexAttribArray (GLuint index);\n  871  GL_APICALL void         GL_APIENTRY glFinish (void);\n  872  GL_APICALL void         GL_APIENTRY glFlush (void);\n  873: GL_APICALL void         GL_APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);\n  874: GL_APICALL void         GL_APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\n  875: GL_APICALL void         GL_APIENTRY glFrontFace (GLenum mode);\n  876  GL_APICALL void         GL_APIENTRY glGenBuffers (GLsizei n, GLuint* buffers);\n  877: GL_APICALL void         GL_APIENTRY glGenerateMipmap (GLenum target);\n  878  GL_APICALL void         GL_APIENTRY glGenFramebuffers (GLsizei n, GLuint* framebuffers);\n  879  GL_APICALL void         GL_APIENTRY glGenRenderbuffers (GLsizei n, GLuint* renderbuffers);\n  880  GL_APICALL void         GL_APIENTRY glGenTextures (GLsizei n, GLuint* textures);\n  881: GL_APICALL void         GL_APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);\n  882: GL_APICALL void         GL_APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);\n  883  GL_APICALL void         GL_APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders);\n  884  GL_APICALL int          GL_APIENTRY glGetAttribLocation (GLuint program, const GLchar* name);\n  885: GL_APICALL void         GL_APIENTRY glGetBooleanv (GLenum pname, GLboolean* params);\n  886: GL_APICALL void         GL_APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint* params);\n  887: GL_APICALL GLenum       GL_APIENTRY glGetError (void);\n  888: GL_APICALL void         GL_APIENTRY glGetFloatv (GLenum pname, GLfloat* params);\n  889: GL_APICALL void         GL_APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint* params);\n  890: GL_APICALL void         GL_APIENTRY glGetIntegerv (GLenum pname, GLint* params);\n  891: GL_APICALL void         GL_APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint* params);\n  892  GL_APICALL void         GL_APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufsize, GLsizei* length, GLchar* infolog);\n  893: GL_APICALL void         GL_APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint* params);\n  894: GL_APICALL void         GL_APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint* params);\n  895  GL_APICALL void         GL_APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* infolog);\n  896: GL_APICALL void         GL_APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);\n  897  GL_APICALL void         GL_APIENTRY glGetShaderSource (GLuint shader, GLsizei bufsize, GLsizei* length, GLchar* source);\n  898: GL_APICALL const GLubyte* GL_APIENTRY glGetString (GLenum name);\n  899: GL_APICALL void         GL_APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat* params);\n  900: GL_APICALL void         GL_APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint* params);\n  901  GL_APICALL void         GL_APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat* params);\n  902  GL_APICALL void         GL_APIENTRY glGetUniformiv (GLuint program, GLint location, GLint* params);\n  903  GL_APICALL int          GL_APIENTRY glGetUniformLocation (GLuint program, const GLchar* name);\n  904: GL_APICALL void         GL_APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat* params);\n  905: GL_APICALL void         GL_APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint* params);\n  906: GL_APICALL void         GL_APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, GLvoid** pointer);\n  907: GL_APICALL void         GL_APIENTRY glHint (GLenum target, GLenum mode);\n  908  GL_APICALL GLboolean    GL_APIENTRY glIsBuffer (GLuint buffer);\n  909: GL_APICALL GLboolean    GL_APIENTRY glIsEnabled (GLenum cap);\n  910  GL_APICALL GLboolean    GL_APIENTRY glIsFramebuffer (GLuint framebuffer);\n  911  GL_APICALL GLboolean    GL_APIENTRY glIsProgram (GLuint program);\n  ...\n  915  GL_APICALL void         GL_APIENTRY glLineWidth (GLfloat width);\n  916  GL_APICALL void         GL_APIENTRY glLinkProgram (GLuint program);\n  917: GL_APICALL void         GL_APIENTRY glPixelStorei (GLenum pname, GLint param);\n  918  GL_APICALL void         GL_APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);\n  919: GL_APICALL void         GL_APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);\n  920  GL_APICALL void         GL_APIENTRY glReleaseShaderCompiler (void);\n  921: GL_APICALL void         GL_APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);\n  922  GL_APICALL void         GL_APIENTRY glSampleCoverage (GLclampf value, GLboolean invert);\n  923  GL_APICALL void         GL_APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);\n  924: GL_APICALL void         GL_APIENTRY glShaderBinary (GLsizei n, const GLuint* shaders, GLenum binaryformat, const GLvoid* binary, GLsizei length);\n  925  GL_APICALL void         GL_APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);\n  926: GL_APICALL void         GL_APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);\n  927: GL_APICALL void         GL_APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);\n  928  GL_APICALL void         GL_APIENTRY glStencilMask (GLuint mask);\n  929: GL_APICALL void         GL_APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);\n  930: GL_APICALL void         GL_APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);\n  931: GL_APICALL void         GL_APIENTRY glStencilOpSeparate (GLenum face, GLenum fail, GLenum zfail, GLenum zpass);\n  932: GL_APICALL void         GL_APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);\n  933: GL_APICALL void         GL_APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);\n  934: GL_APICALL void         GL_APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat* params);\n  935: GL_APICALL void         GL_APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);\n  936: GL_APICALL void         GL_APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint* params);\n  937: GL_APICALL void         GL_APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);\n  938  GL_APICALL void         GL_APIENTRY glUniform1f (GLint location, GLfloat x);\n  939  GL_APICALL void         GL_APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat* v);\n  ...\n  965  GL_APICALL void         GL_APIENTRY glVertexAttrib4f (GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n  966  GL_APICALL void         GL_APIENTRY glVertexAttrib4fv (GLuint indx, const GLfloat* values);\n  967: GL_APICALL void         GL_APIENTRY glVertexAttribPointer (GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* ptr);\n  968  GL_APICALL void         GL_APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);\n  969  \n  ...\n 1160  \n 1161  #ifndef GL_KHR_debug\n 1162: typedef void (GL_APIENTRYP GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);\n 1163  #define GL_DEBUG_OUTPUT_SYNCHRONOUS                             0x8242\n 1164  #define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH                     0x8243\n ....\n 1881  #define GL_OES_EGL_image 1\n 1882  #ifdef GL_GLEXT_PROTOTYPES\n 1883: GL_APICALL void GL_APIENTRY glEGLImageTargetTexture2DOES (GLenum target, GLeglImageOES image);\n 1884: GL_APICALL void GL_APIENTRY glEGLImageTargetRenderbufferStorageOES (GLenum target, GLeglImageOES image);\n 1885  #endif\n 1886: typedef void (GL_APIENTRYP PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) (GLenum target, GLeglImageOES image);\n 1887: typedef void (GL_APIENTRYP PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) (GLenum target, GLeglImageOES image);\n 1888  #endif\n 1889  \n ....\n 1913  #define GL_OES_get_program_binary 1\n 1914  #ifdef GL_GLEXT_PROTOTYPES\n 1915: GL_APICALL void GL_APIENTRY glGetProgramBinaryOES (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);\n 1916: GL_APICALL void GL_APIENTRY glProgramBinaryOES (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length);\n 1917  #endif\n 1918: typedef void (GL_APIENTRYP PFNGLGETPROGRAMBINARYOESPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);\n 1919: typedef void (GL_APIENTRYP PFNGLPROGRAMBINARYOESPROC) (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length);\n 1920  #endif\n 1921  \n ....\n 1924  #define GL_OES_mapbuffer 1\n 1925  #ifdef GL_GLEXT_PROTOTYPES\n 1926: GL_APICALL void* GL_APIENTRY glMapBufferOES (GLenum target, GLenum access);\n 1927: GL_APICALL GLboolean GL_APIENTRY glUnmapBufferOES (GLenum target);\n 1928: GL_APICALL void GL_APIENTRY glGetBufferPointervOES (GLenum target, GLenum pname, GLvoid** params);\n 1929  #endif\n 1930: typedef void* (GL_APIENTRYP PFNGLMAPBUFFEROESPROC) (GLenum target, GLenum access);\n 1931: typedef GLboolean (GL_APIENTRYP PFNGLUNMAPBUFFEROESPROC) (GLenum target);\n 1932: typedef void (GL_APIENTRYP PFNGLGETBUFFERPOINTERVOESPROC) (GLenum target, GLenum pname, GLvoid** params);\n 1933  #endif\n 1934  \n ....\n 1971  #define GL_OES_texture_3D 1\n 1972  #ifdef GL_GLEXT_PROTOTYPES\n 1973: GL_APICALL void GL_APIENTRY glTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels);\n 1974: GL_APICALL void GL_APIENTRY glTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels);\n 1975: GL_APICALL void GL_APIENTRY glCopyTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 1976: GL_APICALL void GL_APIENTRY glCompressedTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);\n 1977: GL_APICALL void GL_APIENTRY glCompressedTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);\n 1978: GL_APICALL void GL_APIENTRY glFramebufferTexture3DOES (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);\n 1979  #endif\n 1980: typedef void (GL_APIENTRYP PFNGLTEXIMAGE3DOESPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid* pixels);\n 1981: typedef void (GL_APIENTRYP PFNGLTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid* pixels);\n 1982: typedef void (GL_APIENTRYP PFNGLCOPYTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\n 1983: typedef void (GL_APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DOESPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid* data);\n 1984: typedef void (GL_APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid* data);\n 1985: typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DOES) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);\n 1986  #endif\n 1987  \n ....\n 2043  #define GL_KHR_debug 1\n 2044  #ifdef GL_GLEXT_PROTOTYPES\n 2045: GL_APICALL void GL_APIENTRY glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);\n 2046: GL_APICALL void GL_APIENTRY glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);\n 2047  GL_APICALL void GL_APIENTRY glDebugMessageCallback (GLDEBUGPROC callback, const void *userParam);\n 2048: GL_APICALL GLuint GL_APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);\n 2049: GL_APICALL void GL_APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message);\n 2050  GL_APICALL void GL_APIENTRY glPopDebugGroup (void);\n 2051: GL_APICALL void GL_APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);\n 2052: GL_APICALL void GL_APIENTRY glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);\n 2053  GL_APICALL void GL_APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label);\n 2054  GL_APICALL void GL_APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);\n 2055: GL_APICALL void GL_APIENTRY glGetPointerv (GLenum pname, void **params);\n 2056  #endif \n 2057: typedef void (GL_APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);\n 2058: typedef void (GL_APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);\n 2059  typedef void (GL_APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);\n 2060: typedef GLuint (GL_APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);\n 2061: typedef void (GL_APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);\n 2062  typedef void (GL_APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void);\n 2063: typedef void (GL_APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);\n 2064: typedef void (GL_APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);\n 2065  typedef void (GL_APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);\n 2066  typedef void (GL_APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);\n 2067: typedef void (GL_APIENTRYP PFNGLGETPOINTERVPROC) (GLenum pname, void **params);\n 2068  #endif\n 2069  \n ....\n 2095  GL_APICALL void GL_APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);\n 2096  GL_APICALL void GL_APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);\n 2097: GL_APICALL void GL_APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, GLvoid *data);\n 2098  GL_APICALL void GL_APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors);\n 2099  GL_APICALL void GL_APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors);\n ....\n 2101  GL_APICALL void GL_APIENTRY glBeginPerfMonitorAMD (GLuint monitor);\n 2102  GL_APICALL void GL_APIENTRY glEndPerfMonitorAMD (GLuint monitor);\n 2103: GL_APICALL void GL_APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);\n 2104  #endif\n 2105  typedef void (GL_APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);\n ....\n 2107  typedef void (GL_APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);\n 2108  typedef void (GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);\n 2109: typedef void (GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, GLvoid *data);\n 2110  typedef void (GL_APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);\n 2111  typedef void (GL_APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);\n ....\n 2113  typedef void (GL_APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);\n 2114  typedef void (GL_APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);\n 2115: typedef void (GL_APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);\n 2116  #endif\n 2117  \n ....\n 2129  #define GL_ANGLE_framebuffer_blit 1\n 2130  #ifdef GL_GLEXT_PROTOTYPES\n 2131: GL_APICALL void GL_APIENTRY glBlitFramebufferANGLE (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 2132  #endif\n 2133: typedef void (GL_APIENTRYP PFNGLBLITFRAMEBUFFERANGLEPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 2134  #endif\n 2135  \n ....\n 2138  #define GL_ANGLE_framebuffer_multisample 1\n 2139  #ifdef GL_GLEXT_PROTOTYPES\n 2140: GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleANGLE (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 2141  #endif\n 2142: typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 2143  #endif\n 2144  \n 2145  #ifndef GL_ANGLE_instanced_arrays \n 2146  #ifdef GL_GLEXT_PROTOTYPES\n 2147: GL_APICALL void GL_APIENTRY glDrawArraysInstancedANGLE (GLenum mode, GLint first, GLsizei count, GLsizei primcount);\n 2148: GL_APICALL void GL_APIENTRY glDrawElementsInstancedANGLE (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);\n 2149  GL_APICALL void GL_APIENTRY glVertexAttribDivisorANGLE (GLuint index, GLuint divisor);\n 2150  #endif\n 2151: typedef void (GL_APIENTRYP PFLGLDRAWARRAYSINSTANCEDANGLEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);\n 2152: typedef void (GL_APIENTRYP PFLGLDRAWELEMENTSINSTANCEDANGLEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);\n 2153  typedef void (GL_APIENTRYP PFLGLVERTEXATTRIBDIVISORANGLEPROC) (GLuint index, GLuint divisor);\n 2154  #endif\n ....\n 2199  #define GL_APPLE_framebuffer_multisample 1\n 2200  #ifdef GL_GLEXT_PROTOTYPES\n 2201: GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleAPPLE (GLenum, GLsizei, GLenum, GLsizei, GLsizei);\n 2202  GL_APICALL void GL_APIENTRY glResolveMultisampleFramebufferAPPLE (void);\n 2203  #endif /* GL_GLEXT_PROTOTYPES */\n 2204: typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 2205  typedef void (GL_APIENTRYP PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC) (void);\n 2206  #endif\n ....\n 2215  #define GL_APPLE_sync 1\n 2216  #ifdef GL_GLEXT_PROTOTYPES\n 2217: GL_APICALL GLsync GL_APIENTRY glFenceSyncAPPLE (GLenum condition, GLbitfield flags);\n 2218  GL_APICALL GLboolean GL_APIENTRY glIsSyncAPPLE (GLsync sync);\n 2219  GL_APICALL void GL_APIENTRY glDeleteSyncAPPLE (GLsync sync);\n 2220: GL_APICALL GLenum GL_APIENTRY glClientWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout);\n 2221  GL_APICALL void GL_APIENTRY glWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout);\n 2222: GL_APICALL void GL_APIENTRY glGetInteger64vAPPLE (GLenum pname, GLint64 *params);\n 2223: GL_APICALL void GL_APIENTRY glGetSyncivAPPLE (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);\n 2224  #endif\n 2225: typedef GLsync (GL_APIENTRYP PFNGLFENCESYNCAPPLEPROC) (GLenum condition, GLbitfield flags);\n 2226  typedef GLboolean (GL_APIENTRYP PFNGLISSYNCAPPLEPROC) (GLsync sync);\n 2227  typedef void (GL_APIENTRYP PFNGLDELETESYNCAPPLEPROC) (GLsync sync);\n 2228: typedef GLenum (GL_APIENTRYP PFNGLCLIENTWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);\n 2229  typedef void (GL_APIENTRYP PFNGLWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);\n 2230: typedef void (GL_APIENTRYP PFNGLGETINTEGER64VAPPLEPROC) (GLenum pname, GLint64 *params);\n 2231: typedef void (GL_APIENTRYP PFNGLGETSYNCIVAPPLEPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);\n 2232  #endif\n 2233  \n ....\n 2279  #define GL_EXT_debug_label 1\n 2280  #ifdef GL_GLEXT_PROTOTYPES\n 2281: GL_APICALL void GL_APIENTRY glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar *label);\n 2282: GL_APICALL void GL_APIENTRY glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);\n 2283  #endif\n 2284: typedef void (GL_APIENTRYP PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar *label);\n 2285: typedef void (GL_APIENTRYP PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);\n 2286  #endif\n 2287  \n ....\n 2303  #define GL_EXT_discard_framebuffer 1\n 2304  #ifdef GL_GLEXT_PROTOTYPES\n 2305: GL_APICALL void GL_APIENTRY glDiscardFramebufferEXT (GLenum target, GLsizei numAttachments, const GLenum *attachments);\n 2306  #endif\n 2307: typedef void (GL_APIENTRYP PFNGLDISCARDFRAMEBUFFEREXTPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);\n 2308  #endif\n 2309  \n ....\n 2312  #define GL_EXT_map_buffer_range 1\n 2313  #ifdef GL_GLEXT_PROTOTYPES\n 2314: GL_APICALL void* GL_APIENTRY glMapBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);\n 2315: GL_APICALL void GL_APIENTRY glFlushMappedBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length);\n 2316  #endif\n 2317: typedef void* (GL_APIENTRYP PFNGLMAPBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);\n 2318: typedef void (GL_APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length);\n 2319  #endif\n 2320  \n ....\n 2323  #define GL_EXT_multisampled_render_to_texture 1\n 2324  #ifdef GL_GLEXT_PROTOTYPES\n 2325: GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleEXT (GLenum, GLsizei, GLenum, GLsizei, GLsizei);\n 2326: GL_APICALL void GL_APIENTRY glFramebufferTexture2DMultisampleEXT (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);\n 2327  #endif\n 2328: typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 2329: typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);\n 2330  #endif\n 2331  \n ....\n 2334  #define GL_EXT_multiview_draw_buffers 1\n 2335  #ifdef GL_GLEXT_PROTOTYPES\n 2336: GL_APICALL void GL_APIENTRY glReadBufferIndexedEXT (GLenum src, GLint index);\n 2337: GL_APICALL void GL_APIENTRY glDrawBuffersIndexedEXT (GLint n, const GLenum *location, const GLint *indices);\n 2338: GL_APICALL void GL_APIENTRY glGetIntegeri_vEXT (GLenum target, GLuint index, GLint *data);\n 2339  #endif\n 2340: typedef void (GL_APIENTRYP PFNGLREADBUFFERINDEXEDEXTPROC) (GLenum src, GLint index);\n 2341: typedef void (GL_APIENTRYP PFNGLDRAWBUFFERSINDEXEDEXTPROC) (GLint n, const GLenum *location, const GLint *indices);\n 2342: typedef void (GL_APIENTRYP PFNGLGETINTEGERI_VEXTPROC) (GLenum target, GLuint index, GLint *data);\n 2343  #endif\n 2344  \n ....\n 2346  #define GL_EXT_multi_draw_arrays 1\n 2347  #ifdef GL_GLEXT_PROTOTYPES\n 2348: GL_APICALL void GL_APIENTRY glMultiDrawArraysEXT (GLenum, GLint *, GLsizei *, GLsizei);\n 2349: GL_APICALL void GL_APIENTRY glMultiDrawElementsEXT (GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei);\n 2350  #endif /* GL_GLEXT_PROTOTYPES */\n 2351: typedef void (GL_APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);\n 2352: typedef void (GL_APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);\n 2353  #endif\n 2354  \n ....\n 2360  GL_APICALL void GL_APIENTRY glDeleteQueriesEXT (GLsizei n, const GLuint *ids);\n 2361  GL_APICALL GLboolean GL_APIENTRY glIsQueryEXT (GLuint id);\n 2362: GL_APICALL void GL_APIENTRY glBeginQueryEXT (GLenum target, GLuint id);\n 2363: GL_APICALL void GL_APIENTRY glEndQueryEXT (GLenum target);\n 2364: GL_APICALL void GL_APIENTRY glGetQueryivEXT (GLenum target, GLenum pname, GLint *params);\n 2365: GL_APICALL void GL_APIENTRY glGetQueryObjectuivEXT (GLuint id, GLenum pname, GLuint *params);\n 2366  #endif\n 2367  typedef void (GL_APIENTRYP PFNGLGENQUERIESEXTPROC) (GLsizei n, GLuint *ids);\n 2368  typedef void (GL_APIENTRYP PFNGLDELETEQUERIESEXTPROC) (GLsizei n, const GLuint *ids);\n 2369  typedef GLboolean (GL_APIENTRYP PFNGLISQUERYEXTPROC) (GLuint id);\n 2370: typedef void (GL_APIENTRYP PFNGLBEGINQUERYEXTPROC) (GLenum target, GLuint id);\n 2371: typedef void (GL_APIENTRYP PFNGLENDQUERYEXTPROC) (GLenum target);\n 2372: typedef void (GL_APIENTRYP PFNGLGETQUERYIVEXTPROC) (GLenum target, GLenum pname, GLint *params);\n 2373: typedef void (GL_APIENTRYP PFNGLGETQUERYOBJECTUIVEXTPROC) (GLuint id, GLenum pname, GLuint *params);\n 2374  #endif\n 2375  \n ....\n 2383  #define GL_EXT_robustness 1\n 2384  #ifdef GL_GLEXT_PROTOTYPES\n 2385: GL_APICALL GLenum GL_APIENTRY glGetGraphicsResetStatusEXT (void);\n 2386: GL_APICALL void GL_APIENTRY glReadnPixelsEXT (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);\n 2387  GL_APICALL void GL_APIENTRY glGetnUniformfvEXT (GLuint program, GLint location, GLsizei bufSize, float *params);\n 2388  GL_APICALL void GL_APIENTRY glGetnUniformivEXT (GLuint program, GLint location, GLsizei bufSize, GLint *params);\n 2389  #endif\n 2390: typedef GLenum (GL_APIENTRYP PFNGLGETGRAPHICSRESETSTATUSEXTPROC) (void);\n 2391: typedef void (GL_APIENTRYP PFNGLREADNPIXELSEXTPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);\n 2392  typedef void (GL_APIENTRYP PFNGLGETNUNIFORMFVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, float *params);\n 2393  typedef void (GL_APIENTRYP PFNGLGETNUNIFORMIVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);\n ....\n 2400  GL_APICALL void GL_APIENTRY glUseProgramStagesEXT (GLuint pipeline, GLbitfield stages, GLuint program);\n 2401  GL_APICALL void GL_APIENTRY glActiveShaderProgramEXT (GLuint pipeline, GLuint program);\n 2402: GL_APICALL GLuint GL_APIENTRY glCreateShaderProgramvEXT (GLenum type, GLsizei count, const GLchar **strings);\n 2403  GL_APICALL void GL_APIENTRY glBindProgramPipelineEXT (GLuint pipeline);\n 2404  GL_APICALL void GL_APIENTRY glDeleteProgramPipelinesEXT (GLsizei n, const GLuint *pipelines);\n 2405  GL_APICALL void GL_APIENTRY glGenProgramPipelinesEXT (GLsizei n, GLuint *pipelines);\n 2406  GL_APICALL GLboolean GL_APIENTRY glIsProgramPipelineEXT (GLuint pipeline);\n 2407: GL_APICALL void GL_APIENTRY glProgramParameteriEXT (GLuint program, GLenum pname, GLint value);\n 2408: GL_APICALL void GL_APIENTRY glGetProgramPipelineivEXT (GLuint pipeline, GLenum pname, GLint *params);\n 2409  GL_APICALL void GL_APIENTRY glProgramUniform1iEXT (GLuint program, GLint location, GLint x);\n 2410  GL_APICALL void GL_APIENTRY glProgramUniform2iEXT (GLuint program, GLint location, GLint x, GLint y);\n ....\n 2431  typedef void (GL_APIENTRYP PFNGLUSEPROGRAMSTAGESEXTPROC) (GLuint pipeline, GLbitfield stages, GLuint program);\n 2432  typedef void (GL_APIENTRYP PFNGLACTIVESHADERPROGRAMEXTPROC) (GLuint pipeline, GLuint program);\n 2433: typedef GLuint (GL_APIENTRYP PFNGLCREATESHADERPROGRAMVEXTPROC) (GLenum type, GLsizei count, const GLchar **strings);\n 2434  typedef void (GL_APIENTRYP PFNGLBINDPROGRAMPIPELINEEXTPROC) (GLuint pipeline);\n 2435  typedef void (GL_APIENTRYP PFNGLDELETEPROGRAMPIPELINESEXTPROC) (GLsizei n, const GLuint *pipelines);\n 2436  typedef void (GL_APIENTRYP PFNGLGENPROGRAMPIPELINESEXTPROC) (GLsizei n, GLuint *pipelines);\n 2437  typedef GLboolean (GL_APIENTRYP PFNGLISPROGRAMPIPELINEEXTPROC) (GLuint pipeline);\n 2438: typedef void (GL_APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);\n 2439: typedef void (GL_APIENTRYP PFNGLGETPROGRAMPIPELINEIVEXTPROC) (GLuint pipeline, GLenum pname, GLint *params);\n 2440  typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint x);\n 2441  typedef void (GL_APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint x, GLint y);\n ....\n 2505  #define GL_EXT_texture_storage 1\n 2506  #ifdef GL_GLEXT_PROTOTYPES\n 2507: GL_APICALL void GL_APIENTRY glTexStorage1DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2508: GL_APICALL void GL_APIENTRY glTexStorage2DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n 2509: GL_APICALL void GL_APIENTRY glTexStorage3DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);\n 2510: GL_APICALL void GL_APIENTRY glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2511: GL_APICALL void GL_APIENTRY glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n 2512: GL_APICALL void GL_APIENTRY glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);\n 2513  #endif\n 2514: typedef void (GL_APIENTRYP PFNGLTEXSTORAGE1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2515: typedef void (GL_APIENTRYP PFNGLTEXSTORAGE2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n 2516: typedef void (GL_APIENTRYP PFNGLTEXSTORAGE3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);\n 2517: typedef void (GL_APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2518: typedef void (GL_APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n 2519: typedef void (GL_APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);\n 2520  #endif\n 2521  \n ....\n 2576  #define GL_IMG_multisampled_render_to_texture 1\n 2577  #ifdef GL_GLEXT_PROTOTYPES\n 2578: GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisampleIMG (GLenum, GLsizei, GLenum, GLsizei, GLsizei);\n 2579: GL_APICALL void GL_APIENTRY glFramebufferTexture2DMultisampleIMG (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);\n 2580  #endif\n 2581: typedef void (GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\n 2582: typedef void (GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);\n 2583  #endif\n 2584  \n ....\n 2592  #ifdef GL_GLEXT_PROTOTYPES\n 2593  GL_APICALL void GL_APIENTRY glCoverageMaskNV (GLboolean mask);\n 2594: GL_APICALL void GL_APIENTRY glCoverageOperationNV (GLenum operation);\n 2595  #endif\n 2596  typedef void (GL_APIENTRYP PFNGLCOVERAGEMASKNVPROC) (GLboolean mask);\n 2597: typedef void (GL_APIENTRYP PFNGLCOVERAGEOPERATIONNVPROC) (GLenum operation);\n 2598  #endif\n 2599  \n ....\n 2607  #define GL_NV_draw_buffers 1\n 2608  #ifdef GL_GLEXT_PROTOTYPES\n 2609: GL_APICALL void GL_APIENTRY glDrawBuffersNV (GLsizei n, const GLenum *bufs);\n 2610  #endif\n 2611: typedef void (GL_APIENTRYP PFNGLDRAWBUFFERSNVPROC) (GLsizei n, const GLenum *bufs);\n 2612  #endif\n 2613  \n ....\n 2625  GL_APICALL GLboolean GL_APIENTRY glIsFenceNV (GLuint);\n 2626  GL_APICALL GLboolean GL_APIENTRY glTestFenceNV (GLuint);\n 2627: GL_APICALL void GL_APIENTRY glGetFenceivNV (GLuint, GLenum, GLint *);\n 2628  GL_APICALL void GL_APIENTRY glFinishFenceNV (GLuint);\n 2629: GL_APICALL void GL_APIENTRY glSetFenceNV (GLuint, GLenum);\n 2630  #endif\n 2631  typedef void (GL_APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);\n ....\n 2633  typedef GLboolean (GL_APIENTRYP PFNGLISFENCENVPROC) (GLuint fence);\n 2634  typedef GLboolean (GL_APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence);\n 2635: typedef void (GL_APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);\n 2636  typedef void (GL_APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence);\n 2637: typedef void (GL_APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);\n 2638  #endif\n 2639  \n ....\n 2642  #define GL_NV_read_buffer 1\n 2643  #ifdef GL_GLEXT_PROTOTYPES\n 2644: GL_APICALL void GL_APIENTRY glReadBufferNV (GLenum mode);\n 2645  #endif\n 2646: typedef void (GL_APIENTRYP PFNGLREADBUFFERNVPROC) (GLenum mode);\n 2647  #endif\n 2648  \n ....\n 2685  #define GL_QCOM_alpha_test 1\n 2686  #ifdef GL_GLEXT_PROTOTYPES\n 2687: GL_APICALL void GL_APIENTRY glAlphaFuncQCOM (GLenum func, GLclampf ref);\n 2688  #endif\n 2689: typedef void (GL_APIENTRYP PFNGLALPHAFUNCQCOMPROC) (GLenum func, GLclampf ref);\n 2690  #endif\n 2691  \n ....\n 2718  GL_APICALL void GL_APIENTRY glExtGetRenderbuffersQCOM (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers);\n 2719  GL_APICALL void GL_APIENTRY glExtGetFramebuffersQCOM (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers);\n 2720: GL_APICALL void GL_APIENTRY glExtGetTexLevelParameterivQCOM (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params);\n 2721: GL_APICALL void GL_APIENTRY glExtTexObjectStateOverrideiQCOM (GLenum target, GLenum pname, GLint param);\n 2722: GL_APICALL void GL_APIENTRY glExtGetTexSubImageQCOM (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels);\n 2723: GL_APICALL void GL_APIENTRY glExtGetBufferPointervQCOM (GLenum target, GLvoid **params);\n 2724  #endif\n 2725  typedef void (GL_APIENTRYP PFNGLEXTGETTEXTURESQCOMPROC) (GLuint *textures, GLint maxTextures, GLint *numTextures);\n ....\n 2727  typedef void (GL_APIENTRYP PFNGLEXTGETRENDERBUFFERSQCOMPROC) (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers);\n 2728  typedef void (GL_APIENTRYP PFNGLEXTGETFRAMEBUFFERSQCOMPROC) (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers);\n 2729: typedef void (GL_APIENTRYP PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC) (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params);\n 2730: typedef void (GL_APIENTRYP PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC) (GLenum target, GLenum pname, GLint param);\n 2731: typedef void (GL_APIENTRYP PFNGLEXTGETTEXSUBIMAGEQCOMPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels);\n 2732: typedef void (GL_APIENTRYP PFNGLEXTGETBUFFERPOINTERVQCOMPROC) (GLenum target, GLvoid **params);\n 2733  #endif\n 2734  \n ....\n 2740  GL_APICALL void GL_APIENTRY glExtGetProgramsQCOM (GLuint *programs, GLint maxPrograms, GLint *numPrograms);\n 2741  GL_APICALL GLboolean GL_APIENTRY glExtIsProgramBinaryQCOM (GLuint program);\n 2742: GL_APICALL void GL_APIENTRY glExtGetProgramBinarySourceQCOM (GLuint program, GLenum shadertype, GLchar *source, GLint *length);\n 2743  #endif\n 2744  typedef void (GL_APIENTRYP PFNGLEXTGETSHADERSQCOMPROC) (GLuint *shaders, GLint maxShaders, GLint *numShaders);\n 2745  typedef void (GL_APIENTRYP PFNGLEXTGETPROGRAMSQCOMPROC) (GLuint *programs, GLint maxPrograms, GLint *numPrograms);\n 2746  typedef GLboolean (GL_APIENTRYP PFNGLEXTISPROGRAMBINARYQCOMPROC) (GLuint program);\n 2747: typedef void (GL_APIENTRYP PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC) (GLuint program, GLenum shadertype, GLchar *source, GLint *length);\n 2748  #endif\n 2749  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_pixels.h:\n   23   *  \\file SDL_pixels.h\n   24   *\n   25:  *  Header for the enumerated pixel format definitions.\n   26   */\n   27  \n   ..\n   48  \n   49  /** Pixel type. */\n   50: enum\n   51  {\n   52      SDL_PIXELTYPE_UNKNOWN,\n   ..\n   65  \n   66  /** Bitmap pixel order, high bit -> low bit. */\n   67: enum\n   68  {\n   69      SDL_BITMAPORDER_NONE,\n   ..\n   73  \n   74  /** Packed component order, high bit -> low bit. */\n   75: enum\n   76  {\n   77      SDL_PACKEDORDER_NONE,\n   ..\n   87  \n   88  /** Array component order, low byte -> high byte. */\n   89: enum\n   90  {\n   91      SDL_ARRAYORDER_NONE,\n   ..\n   99  \n  100  /** Packed component layout. */\n  101: enum\n  102  {\n  103      SDL_PACKEDLAYOUT_NONE,\n  ...\n  147  \n  148  /* Note: If you modify this list, update SDL_GetPixelFormatName() */\n  149: enum\n  150  {\n  151      SDL_PIXELFORMAT_UNKNOWN,\n  ...\n  301  \n  302  /**\n  303:  *  \\brief Convert one of the enumerated pixel formats to a bpp and RGBA masks.\n  304   *\n  305   *  \\return SDL_TRUE, or SDL_FALSE if the conversion wasn't possible.\n  306   *\n  307:  *  \\sa SDL_MasksToPixelFormatEnum()\n  308   */\n  309: extern DECLSPEC SDL_bool SDLCALL SDL_PixelFormatEnumToMasks(Uint32 format,\n  310                                                              int *bpp,\n  311                                                              Uint32 * Rmask,\n  ...\n  315  \n  316  /**\n  317:  *  \\brief Convert a bpp and RGBA masks to an enumerated pixel format.\n  318   *\n  319   *  \\return The pixel format, or ::SDL_PIXELFORMAT_UNKNOWN if the conversion\n  320   *          wasn't possible.\n  321   *\n  322:  *  \\sa SDL_PixelFormatEnumToMasks()\n  323   */\n  324: extern DECLSPEC Uint32 SDLCALL SDL_MasksToPixelFormatEnum(int bpp,\n  325                                                            Uint32 Rmask,\n  326                                                            Uint32 Gmask,\n  ...\n  329  \n  330  /**\n  331:  *  \\brief Create an SDL_PixelFormat structure from a pixel format enum.\n  332   */\n  333  extern DECLSPEC SDL_PixelFormat * SDLCALL SDL_AllocFormat(Uint32 pixel_format);\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_power.h:\n   40   *  \\brief The basic state for the system's power supply.\n   41   */\n   42: typedef enum\n   43  {\n   44      SDL_POWERSTATE_UNKNOWN,      /**< cannot determine power status */\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_render.h:\n   62   *  \\brief Flags used when creating a rendering context\n   63   */\n   64: typedef enum\n   65  {\n   66      SDL_RENDERER_SOFTWARE = 0x00000001,         /**< The renderer is a software fallback */\n   ..\n   89   *  \\brief The access pattern allowed for a texture.\n   90   */\n   91: typedef enum\n   92  {\n   93      SDL_TEXTUREACCESS_STATIC,    /**< Changes rarely, not lockable */\n   ..\n   99   *  \\brief The texture channel modulation used in SDL_RenderCopy().\n  100   */\n  101: typedef enum\n  102  {\n  103      SDL_TEXTUREMODULATE_NONE = 0x00000000,     /**< No modulation */\n  ...\n  109   *  \\brief Flip constants for SDL_RenderCopyEx\n  110   */\n  111: typedef enum\n  112  {\n  113      SDL_FLIP_NONE = 0x00000000,     /**< Do not flip */\n  ...\n  226   *  \\param renderer The renderer.\n  227   *  \\param format The format of the texture.\n  228:  *  \\param access One of the enumerated values in ::SDL_TextureAccess.\n  229   *  \\param w      The width of the texture in pixels.\n  230   *  \\param h      The height of the texture in pixels.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_scancode.h:\n   38   *  SDL_Event structure.\n   39   *\n   40:  *  The values in this enumeration are based on the USB usage page standard:\n   41   *  http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf\n   42   */\n   43: typedef enum\n   44  {\n   45      SDL_SCANCODE_UNKNOWN = 0,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_shape.h:\n   76  extern DECLSPEC SDL_bool SDLCALL SDL_IsShapedWindow(const SDL_Window *window);\n   77  \n   78: /** \\brief An enum denoting the specific type of contents present in an SDL_WindowShapeParams union. */\n   79: typedef enum {\n   80      /** \\brief The default mode, a binarized alpha cutoff of 1. */\n   81      ShapeModeDefault,\n   ..\n   97  } SDL_WindowShapeParams;\n   98  \n   99: /** \\brief A struct that tags the SDL_WindowShapeParams union with an enum describing the type of its contents. */\n  100  typedef struct SDL_WindowShapeMode {\n  101      /** \\brief The mode of these window-shape parameters. */\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_stdinc.h:\n  124  /* @{ */\n  125  \n  126: typedef enum\n  127  {\n  128      SDL_FALSE = 0,\n  ...\n  182  /** \\endcond */\n  183  \n  184: /* Check to make sure enums are the size of ints, for structure packing.\n  185     For both Watcom C/C++ and Borland C/C++ the compiler option that makes\n  186:    enums having the size of an int must be enabled.\n  187     This is \"-b\" for Borland C/C++ and \"-ei\" for Watcom C/C++ (v11).\n  188  */\n  ...\n  191  #ifndef DOXYGEN_SHOULD_IGNORE_THIS\n  192  #if !defined(__ANDROID__)\n  193:    /* TODO: include/SDL_stdinc.h:174: error: size of array 'SDL_dummy_enum' is negative */\n  194: typedef enum\n  195  {\n  196:     DUMMY_ENUM_VALUE\n  197: } SDL_DUMMY_ENUM;\n  198  \n  199: SDL_COMPILE_TIME_ASSERT(enum, sizeof(SDL_DUMMY_ENUM) == sizeof(int));\n  200  #endif\n  201  #endif /* DOXYGEN_SHOULD_IGNORE_THIS */\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_system.h:\n   57  \n   58  /* Returns the DXGI Adapter and Output indices for the specified display index. \n   59:    These can be passed to EnumAdapters and EnumOutputs respectively to get the objects\n   60     required to create a DX10 or DX11 device and swap chain.\n   61   */\n   ..\n  123   *  \\brief WinRT / Windows Phone path types\n  124   */\n  125: typedef enum\n  126  {\n  127      /** \\brief The installed app's root directory.\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_syswm.h:\n  107   *  These are the various supported windowing subsystems\n  108   */\n  109: typedef enum\n  110  {\n  111      SDL_SYSWM_UNKNOWN,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_thread.h:\n   57   *  \\note On many systems you require special privileges to set high priority.\n   58   */\n   59: typedef enum {\n   60      SDL_THREAD_PRIORITY_LOW,\n   61      SDL_THREAD_PRIORITY_NORMAL,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/include/SDL_video.h:\n   94   *  \\sa SDL_GetWindowFlags()\n   95   */\n   96: typedef enum\n   97  {\n   98      SDL_WINDOW_FULLSCREEN = 0x00000001,         /**< fullscreen window */\n   ..\n  133   *  \\brief Event subtype for window events\n  134   */\n  135: typedef enum\n  136  {\n  137      SDL_WINDOWEVENT_NONE,           /**< Never used */\n  ...\n  164   *  \\brief OpenGL configuration attributes\n  165   */\n  166: typedef enum\n  167  {\n  168      SDL_GL_RED_SIZE,\n  ...\n  192  } SDL_GLattr;\n  193  \n  194: typedef enum\n  195  {\n  196      SDL_GL_CONTEXT_PROFILE_CORE           = 0x0001,\n  ...\n  199  } SDL_GLprofile;\n  200  \n  201: typedef enum\n  202  {\n  203      SDL_GL_CONTEXT_DEBUG_FLAG              = 0x0001,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/GameObject.h:\n   19  // Define for identifiing classes.\n   20  #define CLASS_IDENTIFICATION( inCode, inClass )                                \\\n   21:     enum                                                                       \\\n   22      {                                                                          \\\n   23          kClassId = inCode                                                      \\\n   ..\n   28  {\n   29    public:\n   30:     enum\n   31      {\n   32          kClassId = 'GOBJ'\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/Player.h:\n   15      CLASS_IDENTIFICATION( PLAYER_CLASS_IDENTIFICATION, Player )\n   16  \n   17:     enum PlayerReplicationState\n   18      {\n   19          PRS_PID = 1 << 0, // Player Id\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/IO/MemoryBitStream.h:\n   67      void Write( T inData, uint32_t inBitCount = sizeof( T ) * 8 )\n   68      {\n   69:         static_assert( std::is_arithmetic<T>::value || std::is_enum<T>::value,\n   70                         \"Generic Write only supports primitive data types\" );\n   71          WriteBits( &inData, inBitCount );\n   ..\n  145      void Read( T& inData, uint32_t inBitCount = sizeof( T ) * 8 )\n  146      {\n  147:         static_assert( std::is_arithmetic<T>::value || std::is_enum<T>::value,\n  148                         \"Generic Read only supports primitive data types\" );\n  149          ReadBits( &inData, inBitCount );\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/AckRange.h:\n   10      AckRange() : mStart( 0 ), mCount( 0 ) {}\n   11  \n   12:     AckRange( PacketSequenceNumber inStart ) : mStart( inStart ), mCount( 1 ) {}\n   13  \n   14      // if this is the next in sequence, just extend the range\n   15:     inline bool ExtendIfShould( PacketSequenceNumber inSequenceNumber );\n   16  \n   17:     PacketSequenceNumber GetStart() const { return mStart; }\n   18      uint32_t GetCount() const { return mCount; }\n   19  \n   ..\n   22  \n   23    private:\n   24:     PacketSequenceNumber mStart;\n   25      uint32_t mCount;\n   26  };\n   27  \n   28: inline bool AckRange::ExtendIfShould( PacketSequenceNumber inSequenceNumber )\n   29  {\n   30:     if ( inSequenceNumber == mStart + mCount )\n   31      {\n   32          ++mCount;\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/DeliveryNotificationManager.h:\n   31    private:\n   32      InFlightPacket*\n   33:     WriteSequenceNumber( OutputMemoryBitStream& inOutputStream );\n   34      void WriteAckData( OutputMemoryBitStream& inOutputStream );\n   35  \n   36      // returns wether to drop the packet- if sequence number is too low!\n   37:     bool ProcessSequenceNumber( InputMemoryBitStream& inInputStream );\n   38      void ProcessAcks( InputMemoryBitStream& inInputStream );\n   39  \n   40:     void AddPendingAck( PacketSequenceNumber inSequenceNumber );\n   41      void HandlePacketDeliveryFailure( const InFlightPacket& inFlightPacket );\n   42      void HandlePacketDeliverySuccess( const InFlightPacket& inFlightPacket );\n   43  \n   44:     PacketSequenceNumber mNextOutgoingSequenceNumber;\n   45:     PacketSequenceNumber mNextExpectedSequenceNumber;\n   46  \n   47      std::deque<InFlightPacket> mInFlightPackets;\n   ..\n   59  DeliveryNotificationManager::WriteState( OutputMemoryBitStream& inOutputStream )\n   60  {\n   61:     InFlightPacket* toRet = WriteSequenceNumber( inOutputStream );\n   62      if ( mShouldSendAcks )\n   63      {\n   ..\n   71      InputMemoryBitStream& inInputStream )\n   72  {\n   73:     bool toRet = ProcessSequenceNumber( inInputStream );\n   74      if ( mShouldProcessAcks )\n   75      {\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/InFlightPacket.h:\n    9  class DeliveryNotificationManager;\n   10  \n   11: typedef std::uint16_t PacketSequenceNumber;\n   12  \n   13  class InFlightPacket\n   14  {\n   15    public:\n   16:     InFlightPacket( PacketSequenceNumber inSequenceNumber );\n   17  \n   18:     PacketSequenceNumber GetSequenceNumber() const { return mSequenceNumber; }\n   19      float GetTimeDispatched() const { return mTimeDispatched; }\n   20  \n   ..\n   37  \n   38    private:\n   39:     PacketSequenceNumber mSequenceNumber;\n   40      float mTimeDispatched;\n   41  \n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/ReplicationCommand.h:\n    4  #include \"IO/MemoryBitStream.h\"\n    5  \n    6: enum ReplicationAction\n    7  {\n    8      RA_CREATE=1,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/SocketUtil.h:\n   10  #include \"networking/UDPSocket.h\"\n   11  \n   12: enum SocketAddressFamily\n   13  {\n   14      INET = AF_INET,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/DeliveryNotificationManager.cpp:\n    7  DeliveryNotificationManager::DeliveryNotificationManager( bool inSendAcks,\n    8                                                            bool inProcessAcks )\n    9:     : mNextOutgoingSequenceNumber( 0 ), mNextExpectedSequenceNumber( 0 ),\n   10        mShouldSendAcks( inSendAcks ), mShouldProcessAcks( inProcessAcks ),\n   11        mDeliveredPacketCount( 0 ), mDroppedPacketCount( 0 ),\n   ..\n   21  }\n   22  \n   23: InFlightPacket* DeliveryNotificationManager::WriteSequenceNumber(\n   24      OutputMemoryBitStream& inOutputStream )\n   25  {\n   26:     PacketSequenceNumber sequenceNumber = mNextOutgoingSequenceNumber++;\n   27:     inOutputStream.Write( sequenceNumber );\n   28  \n   29      mDispatchedPacketCount++;\n   ..\n   36      // Sequence number will be unique for 65,536 packets so it should be good as\n   37      // a key\n   38:     mInFlightPackets.emplace_back( sequenceNumber );\n   39      return &mInFlightPackets.back();\n   40  }\n   ..\n   42  // The first field in a packet. Process the sequence number if it's one we care\n   43  // about\n   44: bool DeliveryNotificationManager::ProcessSequenceNumber(\n   45      InputMemoryBitStream& inInputStream )\n   46  {\n   47:     PacketSequenceNumber sequenceNumber;\n   48:     inInputStream.Read( sequenceNumber );\n   49:     LOGMORE(\"Read %d packet\", sequenceNumber);\n   50  \n   51      // Uh...old packet, we have moved on to greater things\n   52:     if ( sequenceNumber < mNextExpectedSequenceNumber )\n   53      {\n   54          return false;\n   ..\n   57      // The packet is either matching our sequence number or greater than it,\n   58      // either way we move on, we only go forward\n   59:     mNextExpectedSequenceNumber = sequenceNumber + 1;\n   60      if ( mShouldSendAcks )\n   61      {\n   62:         AddPendingAck( sequenceNumber );\n   63      }\n   64  \n   ..\n   99      ackRange.Read( inInputStream );\n  100  \n  101:     PacketSequenceNumber nextAckdSequenceNumber = ackRange.GetStart();\n  102:     uint32_t maxAckdSequenceNumber =\n  103:         nextAckdSequenceNumber + ackRange.GetCount();\n  104  \n  105:     while ( nextAckdSequenceNumber < maxAckdSequenceNumber &&\n  106              !mInFlightPackets.empty() )\n  107      {\n  108          const auto& nextInflightPacket = mInFlightPackets.front();\n  109  \n  110:         PacketSequenceNumber nextSequenceNumber =\n  111:             nextInflightPacket.GetSequenceNumber();\n  112  \n  113:         if ( nextSequenceNumber < nextAckdSequenceNumber )\n  114          {\n  115              // Copy Droped packet, didn't get an ack for it. Note, don't\n  ...\n  119              HandlePacketDeliveryFailure( inFlightPacket );\n  120          }\n  121:         else if ( nextSequenceNumber == nextAckdSequenceNumber )\n  122          {\n  123              HandlePacketDeliverySuccess( nextInflightPacket );\n  124              mInFlightPackets.pop_front();\n  125:             ++nextAckdSequenceNumber;\n  126          }\n  127:         else if ( nextSequenceNumber > nextAckdSequenceNumber )\n  128          {\n  129              // Well this is embarassing, we already dropped that one...\n  130:             nextAckdSequenceNumber++;\n  131          }\n  132      }\n  ...\n  154  \n  155  void DeliveryNotificationManager::AddPendingAck(\n  156:     PacketSequenceNumber inSequenceNumber )\n  157  {\n  158      if ( mPendingAcks.size() == 0 ||\n  159:          !mPendingAcks.back().ExtendIfShould( inSequenceNumber ) )\n  160      {\n  161:         mPendingAcks.emplace_back( inSequenceNumber );\n  162      }\n  163  }\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/InFlightPacket.cpp:\n    2  #include \"timing/Timing.h\"\n    3  \n    4: InFlightPacket::InFlightPacket( PacketSequenceNumber inSequenceNumber )\n    5:     : mSequenceNumber( inSequenceNumber ),\n    6        mTimeDispatched( Timing::sInstance.GetTimef() )\n    7  {\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground.xcodeproj/project.pbxproj:\n 1052  \t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n 1053  \t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n 1054: \t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n 1055  \t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n 1056  \t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n ....\n 1095  \t\t\t\tCLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;\n 1096  \t\t\t\tCLANG_WARN_EMPTY_BODY = YES;\n 1097: \t\t\t\tCLANG_WARN_ENUM_CONVERSION = YES;\n 1098  \t\t\t\tCLANG_WARN_INT_CONVERSION = YES;\n 1099  \t\t\t\tCLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground.xcodeproj/project.xcworkspace/xcuserdata/eparreira.xcuserdatad/UserInterfaceState.xcuserstate:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground.xcodeproj/project.xcworkspace/xcuserdata/erikparreira.xcuserdatad/UserInterfaceState.xcuserstate:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground.xcodeproj/xcuserdata/erikparreira.xcuserdatad/xcdebugger/Breakpoints_v2.xcbkptlist:\n   14              startingColumnNumber = \"9223372036854775807\"\n   15              endingColumnNumber = \"9223372036854775807\"\n   16:             startingLineNumber = \"21\"\n   17:             endingLineNumber = \"21\">\n   18           </BreakpointContent>\n   19        </BreakpointProxy>\n   ..\n   28              startingColumnNumber = \"9223372036854775807\"\n   29              endingColumnNumber = \"9223372036854775807\"\n   30:             startingLineNumber = \"30\"\n   31:             endingLineNumber = \"30\"\n   32              landmarkName = \"SocketAddress( const sockaddr&amp; inSockAddr )\"\n   33              landmarkType = \"5\">\n   ..\n   44              startingColumnNumber = \"9223372036854775807\"\n   45              endingColumnNumber = \"9223372036854775807\"\n   46:             startingLineNumber = \"28\"\n   47:             endingLineNumber = \"28\"\n   48              landmarkName = \"class NetworkManager\"\n   49              landmarkType = \"3\">\n   ..\n   60              startingColumnNumber = \"9223372036854775807\"\n   61              endingColumnNumber = \"9223372036854775807\"\n   62:             startingLineNumber = \"45\"\n   63:             endingLineNumber = \"45\"\n   64              landmarkName = \"operator==( const SocketAddress&amp; inOther )\"\n   65              landmarkType = \"5\">\n   ..\n   76              startingColumnNumber = \"9223372036854775807\"\n   77              endingColumnNumber = \"9223372036854775807\"\n   78:             startingLineNumber = \"26\"\n   79:             endingLineNumber = \"26\"\n   80              landmarkName = \"World::RemoveGameObject( GameObjectPtr inGameObject )\"\n   81              landmarkType = \"5\">\n   ..\n   92              startingColumnNumber = \"9223372036854775807\"\n   93              endingColumnNumber = \"9223372036854775807\"\n   94:             startingLineNumber = \"42\"\n   95:             endingLineNumber = \"42\"\n   96              landmarkName = \"World::RemoveGameObject( GameObjectPtr inGameObject )\"\n   97              landmarkType = \"5\">\n   ..\n  108              startingColumnNumber = \"9223372036854775807\"\n  109              endingColumnNumber = \"9223372036854775807\"\n  110:             startingLineNumber = \"41\"\n  111:             endingLineNumber = \"41\"\n  112              landmarkName = \"class NetworkManager\"\n  113              landmarkType = \"3\">\n  ...\n  124              startingColumnNumber = \"9223372036854775807\"\n  125              endingColumnNumber = \"9223372036854775807\"\n  126:             startingLineNumber = \"22\"\n  127:             endingLineNumber = \"22\"\n  128              landmarkName = \"class Server\"\n  129              landmarkType = \"3\">\n  ...\n  140              startingColumnNumber = \"9223372036854775807\"\n  141              endingColumnNumber = \"9223372036854775807\"\n  142:             startingLineNumber = \"68\"\n  143:             endingLineNumber = \"68\"\n  144              landmarkName = \"NetworkManager::ProcessQueuedPackets()\"\n  145              landmarkType = \"5\">\n  ...\n  156              startingColumnNumber = \"9223372036854775807\"\n  157              endingColumnNumber = \"9223372036854775807\"\n  158:             startingLineNumber = \"15\"\n  159:             endingLineNumber = \"15\"\n  160              landmarkName = \"SocketAddress::ToString()\"\n  161              landmarkType = \"5\">\n  ...\n  172              startingColumnNumber = \"9223372036854775807\"\n  173              endingColumnNumber = \"9223372036854775807\"\n  174:             startingLineNumber = \"22\"\n  175:             endingLineNumber = \"22\"\n  176              landmarkName = \"SocketAddress( uint32_t inAddress, uint16_t inPort )\"\n  177              landmarkType = \"5\">\n  ...\n  188              startingColumnNumber = \"9223372036854775807\"\n  189              endingColumnNumber = \"9223372036854775807\"\n  190:             startingLineNumber = \"27\"\n  191:             endingLineNumber = \"27\"\n  192              landmarkName = \"class RenderManager\"\n  193              landmarkType = \"3\">\n  ...\n  204              startingColumnNumber = \"9223372036854775807\"\n  205              endingColumnNumber = \"9223372036854775807\"\n  206:             startingLineNumber = \"64\"\n  207:             endingLineNumber = \"64\"\n  208              landmarkName = \"RenderManager::RenderComponents()\"\n  209              landmarkType = \"5\">\n  ...\n  220              startingColumnNumber = \"9223372036854775807\"\n  221              endingColumnNumber = \"9223372036854775807\"\n  222:             startingLineNumber = \"17\"\n  223:             endingLineNumber = \"17\"\n  224              landmarkName = \"class InFlightPacket\"\n  225              landmarkType = \"3\">\n  ...\n  236              startingColumnNumber = \"9223372036854775807\"\n  237              endingColumnNumber = \"9223372036854775807\"\n  238:             startingLineNumber = \"25\"\n  239:             endingLineNumber = \"25\"\n  240              landmarkName = \"class DeliveryNotificationManager\"\n  241              landmarkType = \"3\">\n  ...\n  252              startingColumnNumber = \"9223372036854775807\"\n  253              endingColumnNumber = \"9223372036854775807\"\n  254:             startingLineNumber = \"58\"\n  255:             endingLineNumber = \"58\">\n  256           </BreakpointContent>\n  257        </BreakpointProxy>\n  ...\n  266              startingColumnNumber = \"9223372036854775807\"\n  267              endingColumnNumber = \"9223372036854775807\"\n  268:             startingLineNumber = \"11\"\n  269:             endingLineNumber = \"11\"\n  270              landmarkName = \"ReplicationManagerClient::Read( InputMemoryBitStream&amp; inInputStream )\"\n  271              landmarkType = \"5\">\n  ...\n  282              startingColumnNumber = \"9223372036854775807\"\n  283              endingColumnNumber = \"9223372036854775807\"\n  284:             startingLineNumber = \"10\"\n  285:             endingLineNumber = \"10\"\n  286              landmarkName = \"ReplicationManagerClient::Read( InputMemoryBitStream&amp; inInputStream )\"\n  287              landmarkType = \"5\">\n  ...\n  298              startingColumnNumber = \"9223372036854775807\"\n  299              endingColumnNumber = \"9223372036854775807\"\n  300:             startingLineNumber = \"112\"\n  301:             endingLineNumber = \"112\"\n  302              landmarkName = \"NetworkManagerClient::HandleStatePacket( InputMemoryBitStream&amp; inInputStream )\"\n  303              landmarkType = \"5\">\n  ...\n  314              startingColumnNumber = \"9223372036854775807\"\n  315              endingColumnNumber = \"9223372036854775807\"\n  316:             startingLineNumber = \"67\"\n  317:             endingLineNumber = \"67\"\n  318              landmarkName = \"Server::DoFrame()\"\n  319              landmarkType = \"5\">\n  ...\n  330              startingColumnNumber = \"9223372036854775807\"\n  331              endingColumnNumber = \"9223372036854775807\"\n  332:             startingLineNumber = \"70\"\n  333:             endingLineNumber = \"70\"\n  334              landmarkName = \"Server::DoFrame()\"\n  335              landmarkType = \"5\">\n  ...\n  346              startingColumnNumber = \"9223372036854775807\"\n  347              endingColumnNumber = \"9223372036854775807\"\n  348:             startingLineNumber = \"57\"\n  349:             endingLineNumber = \"57\"\n  350              landmarkName = \"NetworkManagerServer::ProcessPacket( ClientProxyPtr inClientProxy, InputMemoryBitStream&amp; inInputStream )\"\n  351              landmarkType = \"5\">\n  ...\n  362              startingColumnNumber = \"9223372036854775807\"\n  363              endingColumnNumber = \"9223372036854775807\"\n  364:             startingLineNumber = \"111\"\n  365:             endingLineNumber = \"111\"\n  366              landmarkName = \"NetworkManagerServer::HandleInputPacket( ClientProxyPtr inClientProxy, InputMemoryBitStream&amp; inInputStream )\"\n  367              landmarkType = \"5\">\n  ...\n  378              startingColumnNumber = \"9223372036854775807\"\n  379              endingColumnNumber = \"9223372036854775807\"\n  380:             startingLineNumber = \"71\"\n  381:             endingLineNumber = \"71\"\n  382              landmarkName = \"Client::DoFrame()\"\n  383              landmarkType = \"5\">\n  ...\n  394              startingColumnNumber = \"9223372036854775807\"\n  395              endingColumnNumber = \"9223372036854775807\"\n  396:             startingLineNumber = \"46\"\n  397:             endingLineNumber = \"46\"\n  398              landmarkName = \"NetworkManagerServer::ProcessPacket( InputMemoryBitStream&amp; inStream, const SocketAddress&amp; inFromAddress )\"\n  399              landmarkType = \"5\">\n  ...\n  410              startingColumnNumber = \"9223372036854775807\"\n  411              endingColumnNumber = \"9223372036854775807\"\n  412:             startingLineNumber = \"126\"\n  413:             endingLineNumber = \"126\"\n  414              landmarkName = \"NetworkManagerServer::HandlePacketFromNewClient( InputMemoryBitStream&amp; inInputStream, const SocketAddress&amp; inFromAddress )\"\n  415              landmarkType = \"5\">\n  ...\n  426              startingColumnNumber = \"9223372036854775807\"\n  427              endingColumnNumber = \"9223372036854775807\"\n  428:             startingLineNumber = \"77\"\n  429:             endingLineNumber = \"77\"\n  430              landmarkName = \"StringUtils::LogFile( const char* inFormat, ... )\"\n  431              landmarkType = \"5\">\n  ...\n  442              startingColumnNumber = \"9223372036854775807\"\n  443              endingColumnNumber = \"9223372036854775807\"\n  444:             startingLineNumber = \"74\"\n  445:             endingLineNumber = \"74\"\n  446              landmarkName = \"StringUtils::LogFile( const char* inFormat, ... )\"\n  447              landmarkType = \"5\">\n  ...\n  458              startingColumnNumber = \"9223372036854775807\"\n  459              endingColumnNumber = \"9223372036854775807\"\n  460:             startingLineNumber = \"15\"\n  461:             endingLineNumber = \"15\"\n  462              landmarkName = \"ReplicationManagerClient::Read( InputMemoryBitStream&amp; inInputStream )\"\n  463              landmarkType = \"5\">\n  ...\n  474              startingColumnNumber = \"9223372036854775807\"\n  475              endingColumnNumber = \"9223372036854775807\"\n  476:             startingLineNumber = \"17\"\n  477:             endingLineNumber = \"17\"\n  478              landmarkName = \"ReplicationManagerClient::Read( InputMemoryBitStream&amp; inInputStream )\"\n  479              landmarkType = \"5\">\n  ...\n  490              startingColumnNumber = \"9223372036854775807\"\n  491              endingColumnNumber = \"9223372036854775807\"\n  492:             startingLineNumber = \"97\"\n  493:             endingLineNumber = \"97\"\n  494              landmarkName = \"NetworkManagerClient::HandleWelcomePacket( InputMemoryBitStream&amp; inInputStream )\"\n  495              landmarkType = \"5\">\n  ...\n  506              startingColumnNumber = \"9223372036854775807\"\n  507              endingColumnNumber = \"9223372036854775807\"\n  508:             startingLineNumber = \"117\"\n  509:             endingLineNumber = \"117\"\n  510              landmarkName = \"NetworkManagerClient::HandleStatePacket( InputMemoryBitStream&amp; inInputStream )\"\n  511              landmarkType = \"5\">\n  ...\n  522              startingColumnNumber = \"9223372036854775807\"\n  523              endingColumnNumber = \"9223372036854775807\"\n  524:             startingLineNumber = \"272\"\n  525:             endingLineNumber = \"272\"\n  526              landmarkName = \"NetworkManagerServer::CheckForDisconnects()\"\n  527              landmarkType = \"5\">\n  ...\n  538              startingColumnNumber = \"9223372036854775807\"\n  539              endingColumnNumber = \"9223372036854775807\"\n  540:             startingLineNumber = \"95\"\n  541:             endingLineNumber = \"95\"\n  542              landmarkName = \"proccessMovePacket( ClientProxyPtr inClientProxy, Move move, InputMemoryBitStream&amp; inInputStream )\"\n  543              landmarkType = \"7\">\n  ...\n  554              startingColumnNumber = \"9223372036854775807\"\n  555              endingColumnNumber = \"9223372036854775807\"\n  556:             startingLineNumber = \"141\"\n  557:             endingLineNumber = \"141\"\n  558              landmarkName = \"NetworkManagerClient::SendInputPacket()\"\n  559              landmarkType = \"5\">\n  ...\n  570              startingColumnNumber = \"9223372036854775807\"\n  571              endingColumnNumber = \"9223372036854775807\"\n  572:             startingLineNumber = \"137\"\n  573:             endingLineNumber = \"137\"\n  574              landmarkName = \"NetworkManagerClient::SendInputPacket()\"\n  575              landmarkType = \"5\">\n  ...\n  586              startingColumnNumber = \"9223372036854775807\"\n  587              endingColumnNumber = \"9223372036854775807\"\n  588:             startingLineNumber = \"94\"\n  589:             endingLineNumber = \"94\"\n  590              landmarkName = \"InputManager::Update()\"\n  591              landmarkType = \"5\">\n  ...\n  602              startingColumnNumber = \"9223372036854775807\"\n  603              endingColumnNumber = \"9223372036854775807\"\n  604:             startingLineNumber = \"44\"\n  605:             endingLineNumber = \"44\"\n  606              landmarkName = \"MoveList::RemoveProcessedMoves( float inLastMoveProcessedTimestamp )\"\n  607              landmarkType = \"5\">\n  ...\n  618              startingColumnNumber = \"9223372036854775807\"\n  619              endingColumnNumber = \"9223372036854775807\"\n  620:             startingLineNumber = \"67\"\n  621:             endingLineNumber = \"67\"\n  622              landmarkName = \"NetworkManagerClient::SendOutgoingPackets()\"\n  623              landmarkType = \"5\">\n  ...\n  634              startingColumnNumber = \"9223372036854775807\"\n  635              endingColumnNumber = \"9223372036854775807\"\n  636:             startingLineNumber = \"104\"\n  637:             endingLineNumber = \"104\"\n  638              landmarkName = \"NetworkManagerServer::HandleInputPacket( ClientProxyPtr inClientProxy, InputMemoryBitStream&amp; inInputStream )\"\n  639              landmarkType = \"5\">\n  ...\n  650              startingColumnNumber = \"9223372036854775807\"\n  651              endingColumnNumber = \"9223372036854775807\"\n  652:             startingLineNumber = \"36\"\n  653:             endingLineNumber = \"36\"\n  654              landmarkName = \"class GameObject\"\n  655              landmarkType = \"3\">\n  ...\n  666              startingColumnNumber = \"9223372036854775807\"\n  667              endingColumnNumber = \"9223372036854775807\"\n  668:             startingLineNumber = \"49\"\n  669:             endingLineNumber = \"49\">\n  670           </BreakpointContent>\n  671        </BreakpointProxy>\n  ...\n  680              startingColumnNumber = \"9223372036854775807\"\n  681              endingColumnNumber = \"9223372036854775807\"\n  682:             startingLineNumber = \"91\"\n  683:             endingLineNumber = \"91\"\n  684              landmarkName = \"Server::SpawnPlayer( int inPlayerId )\"\n  685              landmarkType = \"5\">\n  ...\n  696              startingColumnNumber = \"9223372036854775807\"\n  697              endingColumnNumber = \"9223372036854775807\"\n  698:             startingLineNumber = \"92\"\n  699:             endingLineNumber = \"92\"\n  700              landmarkName = \"Server::SpawnPlayer( int inPlayerId )\"\n  701              landmarkType = \"5\">\n  ...\n  712              startingColumnNumber = \"9223372036854775807\"\n  713              endingColumnNumber = \"9223372036854775807\"\n  714:             startingLineNumber = \"135\"\n  715:             endingLineNumber = \"135\"\n  716              landmarkName = \"ReplicationManagerServer::WriteCreateAction( OutputMemoryBitStream&amp; inOutputStream, int inNetworkId, uint32_t inDirtyState )\"\n  717              landmarkType = \"5\">\n  ...\n  728              startingColumnNumber = \"9223372036854775807\"\n  729              endingColumnNumber = \"9223372036854775807\"\n  730:             startingLineNumber = \"107\"\n  731:             endingLineNumber = \"107\"\n  732              landmarkName = \"ReplicationManagerServer::Write( OutputMemoryBitStream&amp; inOutputStream, ReplicationManagerTransmissionData* ioTransmissinData )\"\n  733              landmarkType = \"5\">\n  ...\n  744              startingColumnNumber = \"9223372036854775807\"\n  745              endingColumnNumber = \"9223372036854775807\"\n  746:             startingLineNumber = \"103\"\n  747:             endingLineNumber = \"103\"\n  748              landmarkName = \"ReplicationManagerServer::Write( OutputMemoryBitStream&amp; inOutputStream, ReplicationManagerTransmissionData* ioTransmissinData )\"\n  749              landmarkType = \"5\">\n  ...\n  760              startingColumnNumber = \"9223372036854775807\"\n  761              endingColumnNumber = \"9223372036854775807\"\n  762:             startingLineNumber = \"93\"\n  763:             endingLineNumber = \"93\"\n  764              landmarkName = \"Client::HandleEvent( SDL_Event* inEvent )\"\n  765              landmarkType = \"5\">\n  ...\n  776              startingColumnNumber = \"9223372036854775807\"\n  777              endingColumnNumber = \"9223372036854775807\"\n  778:             startingLineNumber = \"85\"\n  779:             endingLineNumber = \"85\"\n  780              landmarkName = \"Client::DoFrame()\"\n  781              landmarkType = \"5\">\n  ...\n  792              startingColumnNumber = \"9223372036854775807\"\n  793              endingColumnNumber = \"9223372036854775807\"\n  794:             startingLineNumber = \"84\"\n  795:             endingLineNumber = \"84\"\n  796              landmarkName = \"Client::DoFrame()\"\n  797              landmarkType = \"5\">\n  ...\n  808              startingColumnNumber = \"9223372036854775807\"\n  809              endingColumnNumber = \"9223372036854775807\"\n  810:             startingLineNumber = \"79\"\n  811:             endingLineNumber = \"79\"\n  812              landmarkName = \"Client::DoFrame()\"\n  813              landmarkType = \"5\">\n  ...\n  824              startingColumnNumber = \"9223372036854775807\"\n  825              endingColumnNumber = \"9223372036854775807\"\n  826:             startingLineNumber = \"10\"\n  827:             endingLineNumber = \"10\"\n  828              landmarkName = \"PlayerClient::PlayerClient()\"\n  829              landmarkType = \"5\">\n  ...\n  840              startingColumnNumber = \"9223372036854775807\"\n  841              endingColumnNumber = \"9223372036854775807\"\n  842:             startingLineNumber = \"33\"\n  843:             endingLineNumber = \"33\"\n  844              landmarkName = \"GameObjectRegistry::RegisterCreationFunction( uint32_t inCCName, GameObjectCreationFunc inCreationFuntion )\"\n  845              landmarkType = \"5\">\n  ...\n  856              startingColumnNumber = \"9223372036854775807\"\n  857              endingColumnNumber = \"9223372036854775807\"\n  858:             startingLineNumber = \"55\"\n  859:             endingLineNumber = \"55\"\n  860              landmarkName = \"Client::Client()\"\n  861              landmarkType = \"5\">\n  ...\n  872                    startingColumnNumber = \"9223372036854775807\"\n  873                    endingColumnNumber = \"9223372036854775807\"\n  874:                   startingLineNumber = \"56\"\n  875:                   endingLineNumber = \"56\"\n  876                    offsetFromSymbolStart = \"21\">\n  877                 </Location>\n  ...\n  887                    startingColumnNumber = \"9223372036854775807\"\n  888                    endingColumnNumber = \"9223372036854775807\"\n  889:                   startingLineNumber = \"56\"\n  890:                   endingLineNumber = \"56\"\n  891                    offsetFromSymbolStart = \"596\">\n  892                 </Location>\n  ...\n  902                    startingColumnNumber = \"9223372036854775807\"\n  903                    endingColumnNumber = \"9223372036854775807\"\n  904:                   startingLineNumber = \"56\"\n  905:                   endingLineNumber = \"56\"\n  906                    offsetFromSymbolStart = \"634\">\n  907                 </Location>\n  ...\n  919              startingColumnNumber = \"9223372036854775807\"\n  920              endingColumnNumber = \"9223372036854775807\"\n  921:             startingLineNumber = \"53\"\n  922:             endingLineNumber = \"53\"\n  923              landmarkName = \"ReplicationManagerClient::ReadAndDoCreateAction( InputMemoryBitStream&amp; inInputStream, int inNetworkId )\"\n  924              landmarkType = \"5\">\n  ...\n  935              startingColumnNumber = \"9223372036854775807\"\n  936              endingColumnNumber = \"9223372036854775807\"\n  937:             startingLineNumber = \"52\"\n  938:             endingLineNumber = \"52\"\n  939              landmarkName = \"ReplicationManagerServer::HandleCreateAckd( int inNetworkId )\"\n  940              landmarkType = \"5\">\n  ...\n  951              startingColumnNumber = \"9223372036854775807\"\n  952              endingColumnNumber = \"9223372036854775807\"\n  953:             startingLineNumber = \"54\"\n  954:             endingLineNumber = \"54\"\n  955              landmarkName = \"ReplicationManagerServer::HandleCreateAckd( int inNetworkId )\"\n  956              landmarkType = \"5\">\n  ...\n  967              startingColumnNumber = \"9223372036854775807\"\n  968              endingColumnNumber = \"9223372036854775807\"\n  969:             startingLineNumber = \"20\"\n  970:             endingLineNumber = \"20\"\n  971              landmarkName = \"ReplicationManagerServer::ReplicateCreate( int inNetworkId, uint32_t inInitialDirtyState )\"\n  972              landmarkType = \"5\">\n  ...\n  983              startingColumnNumber = \"9223372036854775807\"\n  984              endingColumnNumber = \"9223372036854775807\"\n  985:             startingLineNumber = \"35\"\n  986:             endingLineNumber = \"35\"\n  987              landmarkName = \"ReplicationManagerServer::RemoveFromReplication( int inNetworkId )\"\n  988              landmarkType = \"5\">\n  ...\n  999              startingColumnNumber = \"9223372036854775807\"\n 1000              endingColumnNumber = \"9223372036854775807\"\n 1001:             startingLineNumber = \"26\"\n 1002:             endingLineNumber = \"26\"\n 1003              landmarkName = \"ReplicationManagerServer::~ReplicationManagerServer()\"\n 1004              landmarkType = \"5\">\n ....\n 1015              startingColumnNumber = \"9223372036854775807\"\n 1016              endingColumnNumber = \"9223372036854775807\"\n 1017:             startingLineNumber = \"24\"\n 1018:             endingLineNumber = \"24\"\n 1019              landmarkName = \"ReplicationManagerServer::ReplicationManagerServer()\"\n 1020              landmarkType = \"5\">\n ....\n 1031              startingColumnNumber = \"9223372036854775807\"\n 1032              endingColumnNumber = \"9223372036854775807\"\n 1033:             startingLineNumber = \"22\"\n 1034:             endingLineNumber = \"22\"\n 1035              landmarkName = \"PlayerClient::Update()\"\n 1036              landmarkType = \"5\">\n ....\n 1047              startingColumnNumber = \"9223372036854775807\"\n 1048              endingColumnNumber = \"9223372036854775807\"\n 1049:             startingLineNumber = \"26\"\n 1050:             endingLineNumber = \"26\"\n 1051              landmarkName = \"PlayerServer::Update()\"\n 1052              landmarkType = \"5\">\n ....\n 1063              startingColumnNumber = \"9223372036854775807\"\n 1064              endingColumnNumber = \"9223372036854775807\"\n 1065:             startingLineNumber = \"33\"\n 1066:             endingLineNumber = \"33\"\n 1067              landmarkName = \"PlayerClient::Read( InputMemoryBitStream&amp; inInputStream )\"\n 1068              landmarkType = \"5\">\n ....\n 1079              startingColumnNumber = \"9223372036854775807\"\n 1080              endingColumnNumber = \"9223372036854775807\"\n 1081:             startingLineNumber = \"34\"\n 1082:             endingLineNumber = \"34\"\n 1083              landmarkName = \"PlayerClient::Read( InputMemoryBitStream&amp; inInputStream )\"\n 1084              landmarkType = \"5\">\n ....\n 1095              startingColumnNumber = \"9223372036854775807\"\n 1096              endingColumnNumber = \"9223372036854775807\"\n 1097:             startingLineNumber = \"143\"\n 1098:             endingLineNumber = \"143\"\n 1099              landmarkName = \"NetworkManagerClient::SendInputPacket()\"\n 1100              landmarkType = \"5\">\n ....\n 1111              startingColumnNumber = \"9223372036854775807\"\n 1112              endingColumnNumber = \"9223372036854775807\"\n 1113:             startingLineNumber = \"18\"\n 1114:             endingLineNumber = \"18\"\n 1115              landmarkName = \"MoveList::AddMoveIfNew( const Move&amp; inMove )\"\n 1116              landmarkType = \"5\">\n ....\n 1127              startingColumnNumber = \"9223372036854775807\"\n 1128              endingColumnNumber = \"9223372036854775807\"\n 1129:             startingLineNumber = \"7\"\n 1130:             endingLineNumber = \"7\"\n 1131              landmarkName = \"MoveList::AddMove( const InputState&amp; inInputState, float inTimeStamp )\"\n 1132              landmarkType = \"5\">\n ....\n 1143              startingColumnNumber = \"9223372036854775807\"\n 1144              endingColumnNumber = \"9223372036854775807\"\n 1145:             startingLineNumber = \"110\"\n 1146:             endingLineNumber = \"110\"\n 1147              landmarkName = \"NetworkManagerServer::HandleInputPacket( ClientProxyPtr inClientProxy, InputMemoryBitStream&amp; inInputStream )\"\n 1148              landmarkType = \"5\">\n ....\n 1159              startingColumnNumber = \"9223372036854775807\"\n 1160              endingColumnNumber = \"9223372036854775807\"\n 1161:             startingLineNumber = \"174\"\n 1162:             endingLineNumber = \"174\"\n 1163              landmarkName = \"NetworkManagerServer::SendOutgoingPackets()\"\n 1164              landmarkType = \"5\">\n ....\n 1175              startingColumnNumber = \"9223372036854775807\"\n 1176              endingColumnNumber = \"9223372036854775807\"\n 1177:             startingLineNumber = \"26\"\n 1178:             endingLineNumber = \"26\"\n 1179              landmarkName = \"MoveList::AddMoveIfNew( const Move&amp; inMove )\"\n 1180              landmarkType = \"5\">\n ....\n 1191              startingColumnNumber = \"9223372036854775807\"\n 1192              endingColumnNumber = \"9223372036854775807\"\n 1193:             startingLineNumber = \"27\"\n 1194:             endingLineNumber = \"27\"\n 1195              landmarkName = \"MoveList::AddMoveIfNew( const Move&amp; inMove )\"\n 1196              landmarkType = \"5\">\n ....\n 1207              startingColumnNumber = \"9223372036854775807\"\n 1208              endingColumnNumber = \"9223372036854775807\"\n 1209:             startingLineNumber = \"28\"\n 1210:             endingLineNumber = \"28\"\n 1211              landmarkName = \"MoveList::AddMoveIfNew( const Move&amp; inMove )\"\n 1212              landmarkType = \"5\">\n ....\n 1223              startingColumnNumber = \"9223372036854775807\"\n 1224              endingColumnNumber = \"9223372036854775807\"\n 1225:             startingLineNumber = \"109\"\n 1226:             endingLineNumber = \"109\"\n 1227              landmarkName = \"NetworkManagerServer::HandleInputPacket( ClientProxyPtr inClientProxy, InputMemoryBitStream&amp; inInputStream )\"\n 1228              landmarkType = \"5\">\n ....\n 1239              startingColumnNumber = \"9223372036854775807\"\n 1240              endingColumnNumber = \"9223372036854775807\"\n 1241:             startingLineNumber = \"92\"\n 1242:             endingLineNumber = \"92\"\n 1243              landmarkName = \"proccessMovePacket( ClientProxyPtr inClientProxy, Move move, InputMemoryBitStream&amp; inInputStream )\"\n 1244              landmarkType = \"7\">\n ....\n 1255              startingColumnNumber = \"9223372036854775807\"\n 1256              endingColumnNumber = \"9223372036854775807\"\n 1257:             startingLineNumber = \"130\"\n 1258:             endingLineNumber = \"130\"\n 1259              landmarkName = \"NetworkManagerClient::UpdateSendingInputPacket()\"\n 1260              landmarkType = \"5\">\n ....\n 1271              startingColumnNumber = \"9223372036854775807\"\n 1272              endingColumnNumber = \"9223372036854775807\"\n 1273:             startingLineNumber = \"189\"\n 1274:             endingLineNumber = \"189\"\n 1275              landmarkName = \"NetworkManagerClient::ReadLastMoveProcessedOnServerTimestamp( InputMemoryBitStream&amp; inInputStream )\"\n 1276              landmarkType = \"5\">\n ....\n 1287              startingColumnNumber = \"9223372036854775807\"\n 1288              endingColumnNumber = \"9223372036854775807\"\n 1289:             startingLineNumber = \"29\"\n 1290:             endingLineNumber = \"29\"\n 1291              landmarkName = \"MoveList::AddMoveIfNew( const Move&amp; inMove )\"\n 1292              landmarkType = \"5\">\n ....\n 1303              startingColumnNumber = \"9223372036854775807\"\n 1304              endingColumnNumber = \"9223372036854775807\"\n 1305:             startingLineNumber = \"41\"\n 1306:             endingLineNumber = \"41\"\n 1307              landmarkName = \"MoveList::RemoveProcessedMoves( float inLastMoveProcessedTimestamp )\"\n 1308              landmarkType = \"5\">\n ....\n 1319              startingColumnNumber = \"9223372036854775807\"\n 1320              endingColumnNumber = \"9223372036854775807\"\n 1321:             startingLineNumber = \"236\"\n 1322:             endingLineNumber = \"236\"\n 1323              landmarkName = \"NetworkManagerServer::WriteLastMoveTimestampIfDirty( OutputMemoryBitStream&amp; inOutputStream, ClientProxyPtr inClientProxy )\"\n 1324              landmarkType = \"5\">\n ....\n 1335              startingColumnNumber = \"9223372036854775807\"\n 1336              endingColumnNumber = \"9223372036854775807\"\n 1337:             startingLineNumber = \"235\"\n 1338:             endingLineNumber = \"235\"\n 1339              landmarkName = \"NetworkManagerServer::WriteLastMoveTimestampIfDirty( OutputMemoryBitStream&amp; inOutputStream, ClientProxyPtr inClientProxy )\"\n 1340              landmarkType = \"5\">\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/gameobjects/Ghost.h:\n   15      Ghost();\n   16  \n   17:     // An enum in most implementations but always an uint32 when reading\n   18      // and writing from a stream\n   19      uint32_t mState;\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/input/InputManager.h:\n    8  class Move;\n    9  \n   10: enum EInputAction\n   11  {\n   12      EIA_Pressed,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/networking/NetworkManagerClient.h:\n   12  class NetworkManagerClient : public NetworkManager\n   13  {\n   14:     enum NetworkClientState\n   15      {\n   16          NCS_Uninitialized,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include/gameobjects/PlayerServer.h:\n    5  #include \"networking/NetworkManagerServer.h\"\n    6  \n    7: enum PlayerControlType\n    8  {\n    9      PCT_HUMAN,\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/ReplicationManagerServer.cpp:\n   57          ReplicationAction action = replicationCommmand.GetAction();\n   58  \n   59:         // TODO: Take the log of the max ReplicaitonAction Enum to get\n   60:         // how many bits to write for the enum\n   61          inOutputStream.Write( action, 2 );\n   62  \n\n3928 matches across 97 files\n",
			"settings":
			{
				"buffer_size": 505028,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "Run Test",
	"build_system_choices":
	[
		[
			[
				[
					"List",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"List",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"Clean"
			]
		],
		[
			[
				[
					"Run TTest",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Run TTest",
				""
			]
		],
		[
			[
				[
					"Run Test",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				]
			],
			[
				"Run Test",
				""
			]
		],
		[
			[
				[
					"Run Test",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Run Test",
				""
			]
		],
		[
			[
				[
					"Run Tests",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				]
			],
			[
				"Run Tests",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "h",
		"selected_items":
		[
			[
				"h",
				"HTMLPrettify"
			],
			[
				"set html",
				"Set Syntax: HTML"
			],
			[
				"html pre",
				"HTMLPrettify"
			],
			[
				"htl pre",
				"HTMLPrettify"
			],
			[
				"them",
				"Colorsublime: Browse Themes"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"package lis",
				"Package Control: List Packages"
			],
			[
				"copypa",
				"File: Copy Path"
			],
			[
				"copy",
				"File: Copy Name"
			],
			[
				"set c+",
				"Set Syntax: C++"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"gosu",
				"GoSublime: Run build command"
			],
			[
				"nrew",
				"File: New File Relative to Current View"
			],
			[
				"set c++",
				"Set Syntax: C++"
			],
			[
				"renam",
				"File: Rename"
			],
			[
				"uper",
				"Convert Case: Upper Case"
			],
			[
				"todo",
				"TodoReview: Project Files"
			],
			[
				"gosub",
				"GoSublime: Activate 9o"
			],
			[
				"go",
				"GoSublime: Open Error Log"
			],
			[
				"tdo",
				"TodoReview: Open Files"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"ren",
				"Preferences: Settings - Default"
			],
			[
				"rena",
				"File: Rename"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"move",
				"File: Move"
			],
			[
				"waka",
				"WakaTime: Open Dashboard"
			],
			[
				"trail",
				"Trailing Spaces: Toggle Trailing Spaces Highlighting"
			],
			[
				"ke",
				"Keymaps: Cheat Sheet"
			],
			[
				"html",
				"HTMLBeautify"
			],
			[
				"dele",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"sync",
				"Package Syncing: Pull Settings"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"disb",
				"Package Control: Disable Package"
			],
			[
				"htmlr",
				"Set Syntax: HTML (Erlang)"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"go ",
				"GoSublime: Open Error Log"
			],
			[
				"gosett",
				"GoSublime: User Settings"
			],
			[
				"insal",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 444.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/erikparreira/Dropbox/Programming/networkplayground",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/lib",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/lib/SDL/lib",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/gameobjects",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/networking",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src"
	],
	"file_history":
	[
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/Networking.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/SocketAddress.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/NetworkManager.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/Makefile",
		"/Applications/Sublime Text.app/Contents/MacOS/Packages/C++.sublime-package",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/SocketAddressFactory.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground.sublime-project",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/Clang-Complete/cc.sublime-settings",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/SocketAddress.h",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/GoSublime/CHANGELOG.md",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/client_handlers.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib/game_objs.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/game.js",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib/basic_physics.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/client_messages.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/game.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/network/clients.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/game_loop.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/game_objs.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/simple_actor.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/backend/main.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/communication_layer.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/network/messages.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/network/websockethandler.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib/utils.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/game.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/index.html",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/game_loop.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/connection.js",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/settings.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/game_objs.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/core_lib.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib/core_lib.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/messages.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/logger/logger.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/server_handlers.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/websockethandler/websockethandler.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/build.sh",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/ws_events_dispatcher.js",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/User/GoSublime.sublime-settings",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/client_handlers.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core/physics_component.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core/game_objs.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/websockethandler.go/websockethandler.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core/core_lib.go",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/GoSublime/GoSublime.sublime-settings",
		"/Users/erikparreira/Dropbox/go_env/install_go.sh",
		"/Users/erikparreira/Downloads/Spending.csv",
		"/Users/erikparreira/Dropbox/goStuff/vagrant-golang/Vagrantfile",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/message_structure.md",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/messaging_notes.md",
		"/Users/erikparreira/Dropbox/Programming/Silly shit/prank_scrips.sh",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/game.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/utils.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/simple_actor.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/ws_events_dispatcher.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/unit_manager.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/master_server/master_server.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/interactive_view.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/.gitignore",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/index.html",
		"/Users/erikparreira/Dropbox/Generic_Card_Deck_Design.md",
		"/Users/erikparreira/Dropbox/Tech_Things_To_Do.md",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/temp/test.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/logger.go",
		"/Users/erikparreira/Downloads/TopApps-Starter/TopApps/DataManager.swift",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/design_doc.md",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/settings.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/sample.go",
		"/Users/erikparreira/Desktop/test.go",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/User/GoSublime/osx-x64/log.txt",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/master_server/server_list.json",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/game",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/master_server/master_server",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/unit_manager.js",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/ws_events_dispatcher.js",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/simple_actor.js",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/styles.css",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/globals.js",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/backend/game_objs.go",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/settings.js",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/backend/main.go",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/index.html",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/game_state.js",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/game.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/backend/game_objs.go",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/unit.js",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/utility.js",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/README",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/GoSublime/USAGE.md",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/connection.js",
		"/Users/erikparreira/Dropbox/goStuff/websocket/main.go",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/web/index.html",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/backend/main.go",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/backend/game_objs.go",
		"/Users/erikparreira/Dropbox/goStuff/go_experiment/web/js/game_old.js",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/web/js/globals.js",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/web/js/connection.js",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/web/js/simple_actor.js",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/web/js/game_state.js",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/web/chat.html",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/web/js/unit.js",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/main.go",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/.gitignore",
		"/Users/erikparreira/Dropbox/goStuff/websocket/home.html",
		"/Users/erikparreira/Dropbox/goStuff/chat_tutorial/web/test.html",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/BracketHighlighter/bh_core.sublime-settings",
		"/Users/erikparreira/Dropbox/Programming/sublime_sync/Package Control.sublime-settings",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/channelTut.go",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/goChatServer.go",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/simple_server.go",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/server_request.js",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/static/view.html",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/static/edit.html",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/test.txt",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/static/test.txt",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/hub.go",
		"/Users/erikparreira/Dropbox/goStuff/Sandbox/websocket_server.go"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"=",
			" =",
			"enum",
			"networking",
			"input",
			"graphics",
			"networkplaygroundclient",
			"networkplaygroundserver",
			"timing",
			"networking",
			"math",
			"IO",
			"gameobjects",
			"networkplayground",
			"sStartTime",
			"span",
			"page",
			"Descrip",
			"div",
			"br",
			"Your ",
			"Your",
			"your",
			"Your",
			"[text* your-name]",
			"[",
			"720deg",
			"app_div",
			"application",
			"x",
			"item-1\"",
			"Update",
			"mFrameStartTimef",
			"GetMoveList",
			"PLAYER_SPEED",
			"networkmanager at",
			"inc",
			"bufferSize",
			"),\n",
			"printStream",
			"tests",
			"ProcessQueuedPackets",
			"3200",
			"CLIENT_OBJ_FILES",
			"SERVER_OBJ_FILES",
			"CLIENT_OBJ_FILES",
			"WSAECONNRESET",
			"ReadIncomingPacketsIntoQueue",
			"NetworkManager",
			"yAxis",
			"X",
			"messages",
			"move",
			"ReadAllInputMessages",
			"Queueing",
			"ReadAllInputMessages",
			"NewQueue",
			"clientIdMap",
			"ReadAllInputMessages",
			"messages",
			"logger",
			"fmt.print",
			"print",
			"Info",
			"Printf",
			"NewPlayer",
			"Location",
			"updatePositionFromPacket",
			"updateRemoteObjects",
			"veloctiy",
			"Velocity",
			"rectData",
			"Events",
			"conn",
			"msg",
			"conn",
			"AddPhysicsComp",
			"GameObject",
			"object",
			"player",
			"Player",
			"AddPlayerObjectToWorld",
			"gameObjects",
			"addChannel",
			"rawClientData",
			"client",
			"location",
			"Location",
			"gameObjects",
			"ReadMoveMessage",
			"gameObjedct",
			"core_lib",
			"BaseGameObjData",
			"core_lib",
			"struct",
			"Update",
			"Move",
			"BaseRectData",
			"Printf",
			"Before",
			"Trace",
			"gameObj",
			"physicsComponents",
			"gameObjects",
			"Panicf",
			"PhysicsComponent",
			"core_lib",
			"network",
			"physicsComponents",
			"comp",
			"AddPhysicsComp",
			"height",
			"width",
			"physicsComponents",
			"physicsCompMap",
			"physicsComponents",
			"TickPhysics",
			"network",
			"NewPhysicsSpace",
			"PhysicsComponent",
			"Dimensions",
			"PhysicsSpace",
			"int",
			"float64",
			"AddPhysicsComp",
			"physicsComponents",
			"Dimensions",
			"PhysicsSpace"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 24,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "networkplayground.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 359,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										357,
										358
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										1
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 15,
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JSON (JavaScriptNext).tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2371,
						"regions":
						{
						},
						"selection":
						[
							[
								680,
								680
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 12,
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 344.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "networkplayground/include/networking/NetworkManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2934,
						"regions":
						{
						},
						"selection":
						[
							[
								755,
								755
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										758,
										759
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										740,
										741
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 28,
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 30.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "networkplayground/src/networking/NetworkManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5335,
						"regions":
						{
						},
						"selection":
						[
							[
								5335,
								5335
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 189,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3213.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2210,
						"regions":
						{
						},
						"selection":
						[
							[
								1094,
								1094
							]
						],
						"settings":
						{
							"auto_indent": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"open":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"function_name_status_row": 29,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 160.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "test_commands.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 141,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 2,
							"history_list_is_closing": true,
							"open_with_edit": true,
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "networkplaygroundserver/src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 615,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										695,
										696
									]
								},
								"open":
								{
									"1":
									[
										368,
										369
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"function_name_status_row": 25,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "networkplayground/src/timing/Timing.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1517,
						"regions":
						{
						},
						"selection":
						[
							[
								271,
								271
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										272,
										273
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										168,
										169
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 16,
							"open_with_edit": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "networkplayground/include/timing/timing.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 528,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										521,
										527
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										0,
										7
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 0,
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "networkplayground/src/networking/SocketAddress.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 538,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										478,
										479
									]
								},
								"open":
								{
									"1":
									[
										76,
										77
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"function_name_status_row": 13,
							"syntax": "Packages/C++11/C++11.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "networkplayground/include/IO/MemoryBitStream.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5613,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"function_name_status_row": 128,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1880.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "scratch.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26952,
						"regions":
						{
						},
						"selection":
						[
							[
								12555,
								12839
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										12839,
										12840
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										12554,
										12555
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 424,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6729.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "networkplayground/src/gameobjects/Player.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1309,
						"regions":
						{
						},
						"selection":
						[
							[
								930,
								930
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 28,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "networkplaygroundclient/src/input/InputManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2676,
						"regions":
						{
						},
						"selection":
						[
							[
								380,
								380
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										380,
										381
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										379,
										380
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 12,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "networkplayground/src/gameobjects/MoveList.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1248,
						"regions":
						{
						},
						"selection":
						[
							[
								816,
								816
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										843,
										844
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										796,
										797
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 30,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 15,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"auto_name": "N",
							"bracket_highlighter.busy": false,
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"function_name_status_row": 0,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 16,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16094,
						"regions":
						{
						},
						"selection":
						[
							[
								2829,
								2829
							]
						],
						"settings":
						{
							"auto_name": "/Users/erikparreira/Dropbox/Programming/networkpla",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"function_name_status_row": 66,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 400.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": ".gitignore",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 347,
						"regions":
						{
						},
						"selection":
						[
							[
								208,
								208
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 22,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "networkplayground/include/networking/NetworkManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2934,
						"regions":
						{
						},
						"selection":
						[
							[
								2409,
								2409
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2610,
										2611
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										391,
										392
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 76,
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 914.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "networkplaygroundclient/include/networking/NetworkManagerClient.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2378,
						"regions":
						{
						},
						"selection":
						[
							[
								753,
								753
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										832,
										833
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										726,
										727
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 28,
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 922.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "networkplaygroundclient/src/networking/NetworkManagerClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4988,
						"regions":
						{
						},
						"selection":
						[
							[
								3888,
								3888
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4253,
										4254
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										3440,
										3441
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 155,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1990.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "networkplaygroundclient/src/gameobjects/Client.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2903,
						"regions":
						{
						},
						"selection":
						[
							[
								713,
								713
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										718,
										719
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										690,
										691
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 25,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "networkplaygroundclient/include/input/InputManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 967,
						"regions":
						{
						},
						"selection":
						[
							[
								485,
								485
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										935,
										936
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										243,
										244
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 25,
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "networkplayground/src/networking/StringUtils.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2412,
						"regions":
						{
						},
						"selection":
						[
							[
								1334,
								1334
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1613,
										1614
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1327,
										1328
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 67,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 130.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "networkplayground/include/networking/StringUtils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 739,
						"regions":
						{
						},
						"selection":
						[
							[
								396,
								506
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										512,
										513
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										484,
										485
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 18,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "networkplayground/include/networking/SocketAddress.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2466,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				}
			]
		},
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2371,
						"regions":
						{
						},
						"selection":
						[
							[
								379,
								379
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 12,
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 427.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3899,
						"regions":
						{
						},
						"selection":
						[
							[
								1066,
								1066
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1546,
										1547
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										320,
										321
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 26,
							"history_list_is_closing": true,
							"syntax": "Packages/MarkdownEditing/Markdown.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 6.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "networkplayground/include/gameobjects/Engine.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 543,
						"regions":
						{
						},
						"selection":
						[
							[
								519,
								519
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										521,
										527
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										142,
										149
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 34,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "networkplaygroundserver/src/networking/NetworkManagerServer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9936,
						"regions":
						{
						},
						"selection":
						[
							[
								1369,
								1369
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1411,
										1412
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1343,
										1344
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 45,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 137.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 28,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4983,
						"regions":
						{
						},
						"selection":
						[
							[
								4983,
								4983
							]
						],
						"settings":
						{
							"auto_name": "/Users/erikparreira/Dropbox/Programming/networkpla",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"function_name_status_row": 96,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1233.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "networkplayground/src/networking/NetworkManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5335,
						"regions":
						{
						},
						"selection":
						[
							[
								2047,
								2047
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 189,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 898.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "networkplaygroundclient/src/networking/NetworkManagerClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4988,
						"regions":
						{
						},
						"selection":
						[
							[
								1409,
								1409
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4253,
										4254
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										3440,
										3441
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 155,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 99.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "networkplayground/include/networking/DeliveryNotificationManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2527,
						"regions":
						{
						},
						"selection":
						[
							[
								1201,
								1201
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1908,
										1909
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										251,
										252
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 36,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 133.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "networkplayground/src/networking/DeliveryNotificationManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5390,
						"regions":
						{
						},
						"selection":
						[
							[
								1343,
								1343
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1343,
										1344
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										940,
										941
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"function_name_status_row": 39,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "networkplayground/src/networking/StringUtils.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2412,
						"regions":
						{
						},
						"selection":
						[
							[
								152,
								152
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 11,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "networkplaygroundclient/src/input/InputManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2676,
						"regions":
						{
						},
						"selection":
						[
							[
								2000,
								2000
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2291,
										2292
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1999,
										2000
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"function_name_status_row": 75,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 690.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "networkplayground/src/timing/Timing.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1517,
						"regions":
						{
						},
						"selection":
						[
							[
								643,
								654
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										993,
										994
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										629,
										630
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 38,
							"open_with_edit": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 168.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 31,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 149794,
						"regions":
						{
						},
						"selection":
						[
							[
								1891,
								1891
							]
						],
						"settings":
						{
							"auto_name": "2017-04-08 12:05:01.355974-0700 RoboCatActionClien",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"function_name_status_row": 26,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "/Users/erikparreira/Dropbox/LawGuySite/toggle.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1871,
						"regions":
						{
						},
						"selection":
						[
							[
								570,
								570
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										817,
										818
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										569,
										570
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"function_name_status_row": 23,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 482.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 33,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 557,
						"regions":
						{
						},
						"selection":
						[
							[
								557,
								557
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										553,
										556
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/tag.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										524,
										527
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"function_name_status_row": 13,
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 34,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4222,
						"regions":
						{
						},
						"selection":
						[
							[
								2252,
								2252
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2300,
										2305
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/dot.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										321,
										323
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"function_name_status_row": 82,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 830.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 35,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"function_name_status_row": 0,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "networkplayground/include/timing/timing.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 528,
						"regions":
						{
						},
						"selection":
						[
							[
								198,
								198
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										517,
										518
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										68,
										69
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 15,
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 36,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 111077,
						"regions":
						{
						},
						"selection":
						[
							[
								34146,
								34146
							]
						],
						"settings":
						{
							"auto_name": "/Users/erikparreira/Dropbox/Programming/networkpla",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"function_name_status_row": 1264,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21052.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 37,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 505028,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										283,
										299
									],
									[
										417,
										433
									],
									[
										648,
										664
									],
									[
										967,
										983
									],
									[
										1101,
										1117
									],
									[
										1376,
										1382
									],
									[
										1516,
										1522
									],
									[
										1693,
										1699
									],
									[
										1765,
										1771
									],
									[
										1926,
										1932
									],
									[
										2130,
										2136
									],
									[
										2272,
										2278
									],
									[
										2310,
										2316
									],
									[
										2429,
										2435
									],
									[
										2628,
										2634
									],
									[
										2929,
										2935
									],
									[
										3284,
										3290
									],
									[
										3538,
										3544
									],
									[
										3561,
										3567
									],
									[
										4124,
										4130
									],
									[
										4513,
										4519
									],
									[
										5790,
										5796
									],
									[
										6475,
										6481
									],
									[
										6580,
										6586
									],
									[
										6696,
										6702
									],
									[
										7354,
										7360
									],
									[
										7935,
										7941
									],
									[
										8040,
										8046
									],
									[
										8156,
										8162
									],
									[
										8819,
										8825
									],
									[
										9400,
										9406
									],
									[
										9505,
										9511
									],
									[
										9621,
										9627
									],
									[
										10284,
										10290
									],
									[
										11734,
										11740
									],
									[
										12419,
										12425
									],
									[
										12524,
										12530
									],
									[
										12640,
										12646
									],
									[
										13303,
										13309
									],
									[
										13843,
										13849
									],
									[
										14076,
										14082
									],
									[
										14255,
										14261
									],
									[
										14476,
										14482
									],
									[
										14745,
										14751
									],
									[
										15029,
										15035
									],
									[
										15222,
										15228
									],
									[
										15492,
										15498
									],
									[
										15662,
										15668
									],
									[
										15784,
										15790
									],
									[
										15934,
										15940
									],
									[
										16184,
										16190
									],
									[
										16574,
										16580
									],
									[
										16820,
										16826
									],
									[
										17259,
										17265
									],
									[
										17589,
										17595
									],
									[
										17906,
										17912
									],
									[
										18292,
										18298
									],
									[
										19420,
										19426
									],
									[
										19917,
										19923
									],
									[
										21045,
										21051
									],
									[
										21542,
										21548
									],
									[
										22670,
										22676
									],
									[
										23904,
										23910
									],
									[
										24529,
										24535
									],
									[
										24849,
										24855
									],
									[
										25131,
										25137
									],
									[
										25331,
										25337
									],
									[
										25718,
										25724
									],
									[
										26097,
										26103
									],
									[
										26199,
										26205
									],
									[
										26407,
										26413
									],
									[
										26648,
										26654
									],
									[
										26834,
										26840
									],
									[
										27016,
										27022
									],
									[
										27195,
										27201
									],
									[
										27416,
										27422
									],
									[
										27685,
										27691
									],
									[
										27969,
										27975
									],
									[
										28162,
										28168
									],
									[
										28432,
										28438
									],
									[
										28602,
										28608
									],
									[
										28724,
										28730
									],
									[
										28874,
										28880
									],
									[
										29219,
										29225
									],
									[
										29543,
										29549
									],
									[
										29867,
										29873
									],
									[
										30173,
										30179
									],
									[
										30502,
										30508
									],
									[
										30726,
										30732
									],
									[
										31140,
										31146
									],
									[
										31408,
										31414
									],
									[
										31738,
										31744
									],
									[
										32140,
										32146
									],
									[
										32362,
										32368
									],
									[
										32603,
										32609
									],
									[
										32729,
										32735
									],
									[
										32982,
										32988
									],
									[
										33260,
										33266
									],
									[
										33620,
										33626
									],
									[
										33983,
										33989
									],
									[
										34350,
										34356
									],
									[
										34374,
										34380
									],
									[
										34550,
										34556
									],
									[
										35094,
										35100
									],
									[
										35215,
										35221
									],
									[
										35422,
										35428
									],
									[
										35781,
										35787
									],
									[
										36097,
										36103
									],
									[
										36317,
										36323
									],
									[
										36414,
										36420
									],
									[
										36686,
										36692
									],
									[
										36838,
										36844
									],
									[
										37080,
										37086
									],
									[
										37301,
										37307
									],
									[
										37431,
										37437
									],
									[
										37755,
										37761
									],
									[
										37876,
										37882
									],
									[
										38086,
										38092
									],
									[
										38431,
										38437
									],
									[
										38713,
										38719
									],
									[
										38942,
										38948
									],
									[
										39354,
										39360
									],
									[
										39567,
										39573
									],
									[
										39789,
										39795
									],
									[
										39952,
										39958
									],
									[
										40258,
										40264
									],
									[
										40574,
										40580
									],
									[
										40633,
										40639
									],
									[
										40999,
										41005
									],
									[
										41539,
										41545
									],
									[
										42068,
										42074
									],
									[
										42212,
										42218
									],
									[
										42268,
										42274
									],
									[
										42321,
										42327
									],
									[
										42544,
										42550
									],
									[
										42919,
										42925
									],
									[
										43135,
										43141
									],
									[
										43335,
										43341
									],
									[
										43640,
										43646
									],
									[
										43863,
										43869
									],
									[
										43997,
										44003
									],
									[
										44106,
										44112
									],
									[
										44181,
										44187
									],
									[
										44228,
										44234
									],
									[
										44484,
										44490
									],
									[
										44719,
										44725
									],
									[
										44849,
										44855
									],
									[
										44924,
										44930
									],
									[
										44971,
										44977
									],
									[
										45271,
										45277
									],
									[
										45530,
										45536
									],
									[
										45781,
										45787
									],
									[
										46138,
										46144
									],
									[
										46433,
										46439
									],
									[
										46690,
										46696
									],
									[
										46976,
										46982
									],
									[
										47187,
										47193
									],
									[
										47484,
										47490
									],
									[
										47724,
										47730
									],
									[
										48119,
										48125
									],
									[
										48375,
										48381
									],
									[
										48594,
										48600
									],
									[
										48822,
										48828
									],
									[
										49168,
										49174
									],
									[
										49420,
										49426
									],
									[
										49461,
										49467
									],
									[
										49660,
										49666
									],
									[
										49737,
										49743
									],
									[
										49871,
										49877
									],
									[
										49947,
										49953
									],
									[
										50291,
										50297
									],
									[
										50306,
										50312
									],
									[
										50675,
										50681
									],
									[
										50973,
										50979
									],
									[
										51277,
										51283
									],
									[
										51515,
										51521
									],
									[
										51722,
										51728
									],
									[
										51953,
										51959
									],
									[
										52147,
										52153
									],
									[
										52500,
										52506
									],
									[
										52664,
										52670
									],
									[
										52799,
										52805
									],
									[
										52949,
										52955
									],
									[
										53126,
										53132
									],
									[
										53378,
										53384
									],
									[
										53636,
										53642
									],
									[
										53798,
										53804
									],
									[
										54029,
										54035
									],
									[
										54128,
										54134
									],
									[
										54329,
										54335
									],
									[
										54511,
										54517
									],
									[
										55023,
										55029
									],
									[
										55252,
										55258
									],
									[
										55481,
										55487
									],
									[
										55720,
										55726
									],
									[
										55988,
										55994
									],
									[
										56243,
										56249
									],
									[
										56480,
										56486
									],
									[
										56652,
										56658
									],
									[
										57012,
										57018
									],
									[
										57359,
										57365
									],
									[
										57413,
										57419
									],
									[
										57634,
										57640
									],
									[
										57700,
										57706
									],
									[
										57904,
										57910
									],
									[
										58079,
										58085
									],
									[
										58262,
										58268
									],
									[
										58390,
										58396
									],
									[
										58519,
										58525
									],
									[
										58650,
										58656
									],
									[
										58778,
										58784
									],
									[
										59025,
										59031
									],
									[
										59165,
										59171
									],
									[
										59392,
										59398
									],
									[
										59480,
										59486
									],
									[
										59607,
										59613
									],
									[
										59747,
										59753
									],
									[
										59917,
										59923
									],
									[
										60243,
										60249
									],
									[
										60279,
										60285
									],
									[
										60449,
										60455
									],
									[
										60702,
										60708
									],
									[
										60998,
										61004
									],
									[
										61305,
										61311
									],
									[
										61792,
										61798
									],
									[
										62268,
										62274
									],
									[
										62647,
										62653
									],
									[
										62684,
										62690
									],
									[
										62866,
										62872
									],
									[
										63233,
										63239
									],
									[
										63299,
										63305
									],
									[
										63646,
										63652
									],
									[
										63772,
										63778
									],
									[
										64133,
										64139
									],
									[
										64203,
										64209
									],
									[
										64378,
										64384
									],
									[
										64742,
										64748
									],
									[
										64775,
										64781
									],
									[
										65018,
										65024
									],
									[
										65325,
										65331
									],
									[
										65530,
										65536
									],
									[
										65820,
										65824
									],
									[
										65923,
										65927
									],
									[
										66739,
										66743
									],
									[
										67076,
										67080
									],
									[
										67385,
										67389
									],
									[
										67722,
										67726
									],
									[
										68031,
										68035
									],
									[
										68368,
										68372
									],
									[
										68768,
										68772
									],
									[
										69071,
										69075
									],
									[
										69146,
										69150
									],
									[
										69832,
										69836
									],
									[
										70336,
										70340
									],
									[
										71181,
										71185
									],
									[
										71685,
										71689
									],
									[
										72311,
										72315
									],
									[
										72662,
										72666
									],
									[
										73080,
										73084
									],
									[
										73139,
										73143
									],
									[
										73303,
										73307
									],
									[
										73428,
										73432
									],
									[
										73486,
										73490
									],
									[
										73806,
										73810
									],
									[
										73991,
										73995
									],
									[
										74213,
										74217
									],
									[
										74381,
										74385
									],
									[
										74497,
										74501
									],
									[
										74702,
										74706
									],
									[
										74883,
										74887
									],
									[
										75101,
										75105
									],
									[
										75303,
										75307
									],
									[
										75357,
										75361
									],
									[
										75562,
										75566
									],
									[
										75979,
										75983
									],
									[
										76288,
										76292
									],
									[
										76426,
										76430
									],
									[
										76606,
										76610
									],
									[
										76742,
										76746
									],
									[
										76922,
										76926
									],
									[
										77060,
										77064
									],
									[
										77336,
										77340
									],
									[
										77667,
										77671
									],
									[
										77694,
										77698
									],
									[
										78083,
										78087
									],
									[
										78110,
										78114
									],
									[
										78503,
										78507
									],
									[
										78530,
										78534
									],
									[
										78947,
										78951
									],
									[
										79758,
										79762
									],
									[
										81331,
										81335
									],
									[
										82191,
										82195
									],
									[
										83884,
										83888
									],
									[
										84744,
										84748
									],
									[
										86322,
										86326
									],
									[
										87182,
										87186
									],
									[
										88760,
										88764
									],
									[
										89202,
										89206
									],
									[
										89545,
										89549
									],
									[
										89915,
										89919
									],
									[
										90124,
										90128
									],
									[
										90388,
										90392
									],
									[
										90604,
										90608
									],
									[
										90751,
										90755
									],
									[
										91086,
										91090
									],
									[
										91441,
										91445
									],
									[
										91878,
										91882
									],
									[
										92185,
										92189
									],
									[
										92273,
										92277
									],
									[
										92487,
										92491
									],
									[
										92589,
										92593
									],
									[
										92778,
										92782
									],
									[
										93105,
										93109
									],
									[
										93388,
										93392
									],
									[
										93752,
										93756
									],
									[
										93821,
										93825
									],
									[
										93893,
										93897
									],
									[
										94257,
										94261
									],
									[
										94567,
										94571
									],
									[
										94837,
										94841
									],
									[
										95048,
										95052
									],
									[
										95410,
										95414
									],
									[
										95537,
										95541
									],
									[
										95669,
										95673
									],
									[
										95928,
										95932
									],
									[
										96275,
										96279
									],
									[
										96704,
										96708
									],
									[
										96986,
										96990
									],
									[
										97366,
										97370
									],
									[
										97589,
										97593
									],
									[
										97961,
										97965
									],
									[
										98301,
										98305
									],
									[
										98556,
										98560
									],
									[
										98785,
										98789
									],
									[
										99021,
										99025
									],
									[
										99161,
										99165
									],
									[
										99301,
										99305
									],
									[
										99441,
										99445
									],
									[
										99581,
										99585
									],
									[
										99708,
										99712
									],
									[
										99963,
										99967
									],
									[
										100201,
										100205
									],
									[
										100530,
										100534
									],
									[
										100866,
										100870
									],
									[
										100884,
										100888
									],
									[
										100898,
										100902
									],
									[
										100974,
										100978
									],
									[
										101018,
										101022
									],
									[
										101023,
										101027
									],
									[
										101116,
										101120
									],
									[
										101148,
										101152
									],
									[
										101153,
										101157
									],
									[
										101261,
										101265
									],
									[
										101372,
										101376
									],
									[
										101411,
										101415
									],
									[
										101416,
										101420
									],
									[
										101492,
										101496
									],
									[
										101650,
										101654
									],
									[
										101687,
										101691
									],
									[
										101706,
										101710
									],
									[
										101825,
										101829
									],
									[
										101835,
										101839
									],
									[
										101971,
										101975
									],
									[
										101981,
										101985
									],
									[
										102093,
										102097
									],
									[
										102152,
										102156
									],
									[
										102162,
										102166
									],
									[
										102274,
										102278
									],
									[
										102465,
										102469
									],
									[
										102802,
										102806
									],
									[
										102979,
										102983
									],
									[
										103349,
										103353
									],
									[
										103591,
										103595
									],
									[
										103986,
										103990
									],
									[
										104201,
										104205
									],
									[
										104499,
										104503
									],
									[
										104732,
										104736
									],
									[
										104855,
										104859
									],
									[
										104865,
										104869
									],
									[
										104957,
										104961
									],
									[
										105134,
										105138
									],
									[
										105398,
										105402
									],
									[
										105412,
										105416
									],
									[
										105553,
										105557
									],
									[
										105681,
										105685
									],
									[
										105746,
										105750
									],
									[
										105914,
										105918
									],
									[
										106117,
										106121
									],
									[
										106488,
										106492
									],
									[
										106749,
										106753
									],
									[
										106925,
										106929
									],
									[
										107203,
										107207
									],
									[
										107453,
										107457
									],
									[
										107687,
										107691
									],
									[
										107832,
										107836
									],
									[
										108174,
										108178
									],
									[
										108386,
										108390
									],
									[
										108515,
										108519
									],
									[
										108682,
										108686
									],
									[
										108829,
										108833
									],
									[
										108939,
										108943
									],
									[
										109176,
										109180
									],
									[
										109290,
										109294
									],
									[
										109571,
										109575
									],
									[
										109628,
										109632
									],
									[
										109859,
										109863
									],
									[
										110084,
										110088
									],
									[
										110169,
										110173
									],
									[
										110251,
										110255
									],
									[
										110427,
										110431
									],
									[
										110580,
										110584
									],
									[
										110779,
										110783
									],
									[
										111037,
										111041
									],
									[
										111212,
										111216
									],
									[
										111403,
										111407
									],
									[
										111649,
										111653
									],
									[
										111788,
										111792
									],
									[
										111898,
										111902
									],
									[
										112118,
										112122
									],
									[
										112367,
										112371
									],
									[
										112381,
										112385
									],
									[
										112403,
										112407
									],
									[
										112590,
										112594
									],
									[
										112606,
										112610
									],
									[
										112888,
										112892
									],
									[
										112950,
										112954
									],
									[
										113004,
										113008
									],
									[
										113082,
										113086
									],
									[
										113192,
										113196
									],
									[
										113207,
										113211
									],
									[
										113287,
										113291
									],
									[
										113406,
										113410
									],
									[
										113421,
										113425
									],
									[
										113505,
										113509
									],
									[
										113839,
										113843
									],
									[
										113913,
										113917
									],
									[
										113967,
										113971
									],
									[
										114057,
										114061
									],
									[
										114167,
										114171
									],
									[
										114182,
										114186
									],
									[
										114274,
										114278
									],
									[
										114393,
										114397
									],
									[
										114408,
										114412
									],
									[
										114504,
										114508
									],
									[
										114773,
										114777
									],
									[
										114788,
										114792
									],
									[
										114826,
										114830
									],
									[
										114841,
										114845
									],
									[
										114928,
										114932
									],
									[
										114943,
										114947
									],
									[
										115033,
										115037
									],
									[
										115048,
										115052
									],
									[
										115129,
										115133
									],
									[
										115144,
										115148
									],
									[
										115245,
										115249
									],
									[
										115260,
										115264
									],
									[
										115275,
										115279
									],
									[
										115359,
										115363
									],
									[
										115374,
										115378
									],
									[
										115461,
										115465
									],
									[
										115476,
										115480
									],
									[
										115550,
										115554
									],
									[
										115595,
										115599
									],
									[
										115610,
										115614
									],
									[
										115692,
										115696
									],
									[
										115806,
										115810
									],
									[
										115821,
										115825
									],
									[
										115859,
										115863
									],
									[
										115874,
										115878
									],
									[
										115959,
										115963
									],
									[
										115974,
										115978
									],
									[
										116028,
										116032
									],
									[
										116043,
										116047
									],
									[
										116130,
										116134
									],
									[
										116145,
										116149
									],
									[
										116229,
										116233
									],
									[
										116244,
										116248
									],
									[
										116334,
										116338
									],
									[
										116349,
										116353
									],
									[
										116431,
										116435
									],
									[
										116446,
										116450
									],
									[
										116536,
										116540
									],
									[
										116551,
										116555
									],
									[
										116662,
										116666
									],
									[
										116677,
										116681
									],
									[
										116801,
										116805
									],
									[
										116816,
										116820
									],
									[
										116831,
										116835
									],
									[
										116916,
										116920
									],
									[
										116931,
										116935
									],
									[
										117019,
										117023
									],
									[
										117034,
										117038
									],
									[
										117113,
										117117
									],
									[
										117128,
										117132
									],
									[
										117143,
										117147
									],
									[
										117248,
										117252
									],
									[
										117263,
										117267
									],
									[
										117317,
										117321
									],
									[
										117332,
										117336
									],
									[
										117430,
										117434
									],
									[
										117462,
										117466
									],
									[
										117477,
										117481
									],
									[
										117561,
										117565
									],
									[
										117576,
										117580
									],
									[
										117662,
										117666
									],
									[
										117677,
										117681
									],
									[
										117747,
										117751
									],
									[
										117779,
										117783
									],
									[
										117794,
										117798
									],
									[
										117875,
										117879
									],
									[
										117890,
										117894
									],
									[
										117973,
										117977
									],
									[
										117988,
										117992
									],
									[
										118058,
										118062
									],
									[
										118088,
										118092
									],
									[
										118165,
										118169
									],
									[
										118180,
										118184
									],
									[
										118265,
										118269
									],
									[
										118323,
										118327
									],
									[
										118432,
										118436
									],
									[
										118447,
										118451
									],
									[
										118485,
										118489
									],
									[
										118500,
										118504
									],
									[
										118599,
										118603
									],
									[
										118614,
										118618
									],
									[
										118716,
										118720
									],
									[
										118731,
										118735
									],
									[
										118824,
										118828
									],
									[
										118839,
										118843
									],
									[
										118952,
										118956
									],
									[
										118967,
										118971
									],
									[
										118982,
										118986
									],
									[
										119078,
										119082
									],
									[
										119093,
										119097
									],
									[
										119192,
										119196
									],
									[
										119207,
										119211
									],
									[
										119293,
										119297
									],
									[
										119338,
										119342
									],
									[
										119353,
										119357
									],
									[
										119447,
										119451
									],
									[
										119573,
										119577
									],
									[
										119588,
										119592
									],
									[
										119626,
										119630
									],
									[
										119641,
										119645
									],
									[
										119738,
										119742
									],
									[
										119753,
										119757
									],
									[
										119807,
										119811
									],
									[
										119822,
										119826
									],
									[
										119921,
										119925
									],
									[
										119936,
										119940
									],
									[
										120032,
										120036
									],
									[
										120047,
										120051
									],
									[
										120149,
										120153
									],
									[
										120164,
										120168
									],
									[
										120258,
										120262
									],
									[
										120273,
										120277
									],
									[
										120375,
										120379
									],
									[
										120390,
										120394
									],
									[
										120513,
										120517
									],
									[
										120528,
										120532
									],
									[
										120664,
										120668
									],
									[
										120679,
										120683
									],
									[
										120694,
										120698
									],
									[
										120791,
										120795
									],
									[
										120806,
										120810
									],
									[
										120906,
										120910
									],
									[
										120921,
										120925
									],
									[
										121012,
										121016
									],
									[
										121027,
										121031
									],
									[
										121042,
										121046
									],
									[
										121159,
										121163
									],
									[
										121174,
										121178
									],
									[
										121228,
										121232
									],
									[
										121243,
										121247
									],
									[
										121353,
										121357
									],
									[
										121385,
										121389
									],
									[
										121400,
										121404
									],
									[
										121496,
										121500
									],
									[
										121511,
										121515
									],
									[
										121609,
										121613
									],
									[
										121624,
										121628
									],
									[
										121706,
										121710
									],
									[
										121738,
										121742
									],
									[
										121753,
										121757
									],
									[
										121846,
										121850
									],
									[
										121861,
										121865
									],
									[
										121956,
										121960
									],
									[
										121971,
										121975
									],
									[
										122053,
										122057
									],
									[
										122083,
										122087
									],
									[
										122172,
										122176
									],
									[
										122187,
										122191
									],
									[
										122284,
										122288
									],
									[
										122354,
										122358
									],
									[
										122508,
										122512
									],
									[
										122656,
										122660
									],
									[
										122684,
										122688
									],
									[
										122858,
										122862
									],
									[
										122886,
										122890
									],
									[
										123045,
										123049
									],
									[
										123073,
										123077
									],
									[
										123219,
										123223
									],
									[
										123338,
										123342
									],
									[
										123447,
										123451
									],
									[
										123536,
										123540
									],
									[
										123645,
										123649
									],
									[
										123703,
										123707
									],
									[
										123810,
										123814
									],
									[
										123948,
										123952
									],
									[
										124120,
										124124
									],
									[
										124148,
										124152
									],
									[
										124334,
										124338
									],
									[
										124362,
										124366
									],
									[
										124533,
										124537
									],
									[
										124561,
										124565
									],
									[
										124719,
										124723
									],
									[
										124838,
										124842
									],
									[
										124959,
										124963
									],
									[
										125048,
										125052
									],
									[
										125169,
										125173
									],
									[
										125227,
										125231
									],
									[
										125346,
										125350
									],
									[
										125543,
										125547
									],
									[
										125606,
										125610
									],
									[
										125681,
										125685
									],
									[
										125762,
										125766
									],
									[
										125836,
										125840
									],
									[
										125916,
										125920
									],
									[
										125988,
										125992
									],
									[
										126066,
										126070
									],
									[
										126140,
										126144
									],
									[
										126220,
										126224
									],
									[
										126307,
										126311
									],
									[
										126388,
										126392
									],
									[
										126473,
										126477
									],
									[
										126553,
										126557
									],
									[
										126634,
										126638
									],
									[
										126712,
										126716
									],
									[
										126797,
										126801
									],
									[
										126877,
										126881
									],
									[
										126976,
										126980
									],
									[
										127057,
										127061
									],
									[
										127153,
										127157
									],
									[
										127233,
										127237
									],
									[
										127323,
										127327
									],
									[
										127401,
										127405
									],
									[
										127497,
										127501
									],
									[
										127577,
										127581
									],
									[
										127688,
										127692
									],
									[
										127769,
										127773
									],
									[
										127876,
										127880
									],
									[
										127956,
										127960
									],
									[
										128055,
										128059
									],
									[
										128133,
										128137
									],
									[
										128240,
										128244
									],
									[
										128594,
										128598
									],
									[
										128669,
										128673
									],
									[
										128756,
										128760
									],
									[
										128849,
										128853
									],
									[
										128935,
										128939
									],
									[
										129027,
										129031
									],
									[
										129111,
										129115
									],
									[
										129201,
										129205
									],
									[
										129287,
										129291
									],
									[
										129379,
										129383
									],
									[
										129478,
										129482
									],
									[
										129571,
										129575
									],
									[
										129668,
										129672
									],
									[
										129760,
										129764
									],
									[
										129853,
										129857
									],
									[
										129943,
										129947
									],
									[
										130040,
										130044
									],
									[
										130132,
										130136
									],
									[
										130243,
										130247
									],
									[
										130336,
										130340
									],
									[
										130444,
										130448
									],
									[
										130536,
										130540
									],
									[
										130638,
										130642
									],
									[
										130728,
										130732
									],
									[
										130836,
										130840
									],
									[
										130928,
										130932
									],
									[
										131051,
										131055
									],
									[
										131144,
										131148
									],
									[
										131263,
										131267
									],
									[
										131355,
										131359
									],
									[
										131466,
										131470
									],
									[
										131556,
										131560
									],
									[
										131675,
										131679
									],
									[
										131994,
										131998
									],
									[
										132013,
										132017
									],
									[
										132032,
										132036
									],
									[
										132053,
										132057
									],
									[
										132121,
										132125
									],
									[
										132244,
										132248
									],
									[
										132279,
										132283
									],
									[
										132382,
										132386
									],
									[
										132459,
										132463
									],
									[
										132543,
										132547
									],
									[
										132618,
										132622
									],
									[
										132754,
										132758
									],
									[
										132773,
										132777
									],
									[
										132792,
										132796
									],
									[
										132813,
										132817
									],
									[
										132893,
										132897
									],
									[
										133028,
										133032
									],
									[
										133063,
										133067
									],
									[
										133178,
										133182
									],
									[
										133267,
										133271
									],
									[
										133363,
										133367
									],
									[
										133450,
										133454
									],
									[
										133682,
										133686
									],
									[
										134121,
										134125
									],
									[
										134514,
										134518
									],
									[
										135013,
										135017
									],
									[
										135397,
										135401
									],
									[
										135463,
										135467
									],
									[
										135520,
										135524
									],
									[
										135535,
										135539
									],
									[
										135623,
										135627
									],
									[
										135712,
										135716
									],
									[
										135784,
										135788
									],
									[
										136065,
										136069
									],
									[
										136117,
										136121
									],
									[
										136176,
										136180
									],
									[
										136293,
										136297
									],
									[
										136400,
										136404
									],
									[
										136415,
										136419
									],
									[
										136478,
										136482
									],
									[
										136545,
										136549
									],
									[
										136560,
										136564
									],
									[
										136638,
										136642
									],
									[
										136653,
										136657
									],
									[
										137010,
										137014
									],
									[
										137088,
										137092
									],
									[
										137157,
										137161
									],
									[
										137172,
										137176
									],
									[
										137272,
										137276
									],
									[
										137373,
										137377
									],
									[
										137457,
										137461
									],
									[
										137786,
										137790
									],
									[
										137838,
										137842
									],
									[
										137909,
										137913
									],
									[
										138038,
										138042
									],
									[
										138157,
										138161
									],
									[
										138172,
										138176
									],
									[
										138247,
										138251
									],
									[
										138326,
										138330
									],
									[
										138341,
										138345
									],
									[
										138431,
										138435
									],
									[
										138446,
										138450
									],
									[
										138624,
										138628
									],
									[
										138640,
										138644
									],
									[
										138718,
										138722
									],
									[
										138781,
										138785
									],
									[
										138794,
										138798
									],
									[
										138808,
										138812
									],
									[
										138823,
										138827
									],
									[
										138889,
										138893
									],
									[
										138902,
										138906
									],
									[
										138990,
										138994
									],
									[
										139350,
										139354
									],
									[
										139752,
										139756
									],
									[
										139905,
										139909
									],
									[
										140192,
										140196
									],
									[
										140395,
										140399
									],
									[
										140903,
										140907
									],
									[
										140998,
										141002
									],
									[
										141092,
										141096
									],
									[
										141190,
										141194
									],
									[
										141587,
										141591
									],
									[
										141766,
										141770
									],
									[
										141782,
										141786
									],
									[
										141872,
										141876
									],
									[
										141947,
										141951
									],
									[
										141960,
										141964
									],
									[
										141974,
										141978
									],
									[
										141989,
										141993
									],
									[
										142067,
										142071
									],
									[
										142080,
										142084
									],
									[
										142180,
										142184
									],
									[
										142600,
										142604
									],
									[
										143062,
										143066
									],
									[
										143227,
										143231
									],
									[
										143550,
										143554
									],
									[
										143777,
										143781
									],
									[
										144345,
										144349
									],
									[
										144452,
										144456
									],
									[
										144558,
										144562
									],
									[
										144668,
										144672
									],
									[
										145125,
										145129
									],
									[
										145414,
										145418
									],
									[
										145505,
										145509
									],
									[
										145586,
										145590
									],
									[
										145655,
										145659
									],
									[
										145731,
										145735
									],
									[
										145814,
										145818
									],
									[
										145941,
										145945
									],
									[
										146065,
										146069
									],
									[
										146222,
										146226
									],
									[
										146379,
										146383
									],
									[
										146449,
										146453
									],
									[
										146464,
										146468
									],
									[
										146543,
										146547
									],
									[
										146692,
										146696
									],
									[
										146808,
										146812
									],
									[
										146902,
										146906
									],
									[
										147324,
										147328
									],
									[
										147339,
										147343
									],
									[
										147422,
										147426
									],
									[
										147437,
										147441
									],
									[
										147523,
										147527
									],
									[
										147538,
										147542
									],
									[
										147618,
										147622
									],
									[
										147633,
										147637
									],
									[
										147708,
										147712
									],
									[
										147807,
										147811
									],
									[
										147906,
										147910
									],
									[
										148006,
										148010
									],
									[
										148122,
										148126
									],
									[
										148366,
										148370
									],
									[
										148469,
										148473
									],
									[
										148562,
										148566
									],
									[
										148643,
										148647
									],
									[
										148731,
										148735
									],
									[
										148826,
										148830
									],
									[
										148977,
										148981
									],
									[
										149113,
										149117
									],
									[
										149282,
										149286
									],
									[
										149451,
										149455
									],
									[
										149533,
										149537
									],
									[
										149548,
										149552
									],
									[
										149639,
										149643
									],
									[
										149812,
										149816
									],
									[
										149940,
										149944
									],
									[
										150046,
										150050
									],
									[
										150528,
										150532
									],
									[
										150543,
										150547
									],
									[
										150638,
										150642
									],
									[
										150653,
										150657
									],
									[
										150751,
										150755
									],
									[
										150766,
										150770
									],
									[
										150858,
										150862
									],
									[
										150873,
										150877
									],
									[
										150960,
										150964
									],
									[
										151071,
										151075
									],
									[
										151182,
										151186
									],
									[
										151294,
										151298
									],
									[
										151422,
										151426
									],
									[
										151601,
										151605
									],
									[
										151714,
										151718
									],
									[
										151742,
										151746
									],
									[
										151838,
										151842
									],
									[
										151853,
										151857
									],
									[
										152061,
										152065
									],
									[
										152186,
										152190
									],
									[
										152214,
										152218
									],
									[
										152322,
										152326
									],
									[
										152337,
										152341
									],
									[
										152592,
										152596
									],
									[
										152690,
										152694
									],
									[
										152705,
										152709
									],
									[
										152786,
										152790
									],
									[
										152801,
										152805
									],
									[
										152948,
										152952
									],
									[
										153058,
										153062
									],
									[
										153073,
										153077
									],
									[
										153166,
										153170
									],
									[
										153181,
										153185
									],
									[
										153413,
										153417
									],
									[
										153492,
										153496
									],
									[
										153508,
										153512
									],
									[
										153580,
										153584
									],
									[
										153592,
										153596
									],
									[
										153666,
										153670
									],
									[
										153681,
										153685
									],
									[
										153696,
										153700
									],
									[
										153713,
										153717
									],
									[
										153916,
										153920
									],
									[
										154007,
										154011
									],
									[
										154023,
										154027
									],
									[
										154107,
										154111
									],
									[
										154119,
										154123
									],
									[
										154205,
										154209
									],
									[
										154220,
										154224
									],
									[
										154235,
										154239
									],
									[
										154252,
										154256
									],
									[
										154416,
										154420
									],
									[
										154486,
										154490
									],
									[
										154552,
										154556
									],
									[
										154630,
										154634
									],
									[
										154714,
										154718
									],
									[
										154791,
										154795
									],
									[
										154874,
										154878
									],
									[
										154949,
										154953
									],
									[
										155030,
										155034
									],
									[
										155107,
										155111
									],
									[
										155190,
										155194
									],
									[
										155280,
										155284
									],
									[
										155364,
										155368
									],
									[
										155452,
										155456
									],
									[
										155535,
										155539
									],
									[
										155619,
										155623
									],
									[
										155700,
										155704
									],
									[
										155788,
										155792
									],
									[
										155871,
										155875
									],
									[
										155973,
										155977
									],
									[
										156057,
										156061
									],
									[
										156156,
										156160
									],
									[
										156239,
										156243
									],
									[
										156332,
										156336
									],
									[
										156413,
										156417
									],
									[
										156512,
										156516
									],
									[
										156595,
										156599
									],
									[
										156709,
										156713
									],
									[
										156793,
										156797
									],
									[
										156903,
										156907
									],
									[
										156986,
										156990
									],
									[
										157088,
										157092
									],
									[
										157169,
										157173
									],
									[
										157279,
										157283
									],
									[
										157412,
										157416
									],
									[
										157494,
										157498
									],
									[
										157572,
										157576
									],
									[
										157662,
										157666
									],
									[
										157758,
										157762
									],
									[
										157847,
										157851
									],
									[
										157942,
										157946
									],
									[
										158029,
										158033
									],
									[
										158122,
										158126
									],
									[
										158211,
										158215
									],
									[
										158306,
										158310
									],
									[
										158408,
										158412
									],
									[
										158504,
										158508
									],
									[
										158604,
										158608
									],
									[
										158699,
										158703
									],
									[
										158795,
										158799
									],
									[
										158888,
										158892
									],
									[
										158988,
										158992
									],
									[
										159083,
										159087
									],
									[
										159197,
										159201
									],
									[
										159293,
										159297
									],
									[
										159404,
										159408
									],
									[
										159499,
										159503
									],
									[
										159604,
										159608
									],
									[
										159697,
										159701
									],
									[
										159808,
										159812
									],
									[
										159903,
										159907
									],
									[
										160029,
										160033
									],
									[
										160125,
										160129
									],
									[
										160247,
										160251
									],
									[
										160342,
										160346
									],
									[
										160456,
										160460
									],
									[
										160549,
										160553
									],
									[
										160671,
										160675
									],
									[
										160865,
										160869
									],
									[
										160893,
										160897
									],
									[
										161070,
										161074
									],
									[
										161098,
										161102
									],
									[
										161260,
										161264
									],
									[
										161288,
										161292
									],
									[
										161437,
										161441
									],
									[
										161556,
										161560
									],
									[
										161668,
										161672
									],
									[
										161757,
										161761
									],
									[
										161869,
										161873
									],
									[
										161927,
										161931
									],
									[
										162037,
										162041
									],
									[
										162185,
										162189
									],
									[
										162213,
										162217
									],
									[
										162402,
										162406
									],
									[
										162430,
										162434
									],
									[
										162604,
										162608
									],
									[
										162632,
										162636
									],
									[
										162793,
										162797
									],
									[
										162912,
										162916
									],
									[
										163036,
										163040
									],
									[
										163125,
										163129
									],
									[
										163249,
										163253
									],
									[
										163307,
										163311
									],
									[
										163429,
										163433
									],
									[
										163623,
										163627
									],
									[
										163703,
										163707
									],
									[
										163842,
										163846
									],
									[
										163934,
										163938
									],
									[
										164219,
										164223
									],
									[
										164632,
										164636
									],
									[
										165010,
										165014
									],
									[
										165459,
										165463
									],
									[
										165785,
										165789
									],
									[
										166052,
										166056
									],
									[
										166067,
										166071
									],
									[
										166163,
										166167
									],
									[
										166409,
										166413
									],
									[
										166543,
										166547
									],
									[
										166652,
										166656
									],
									[
										166782,
										166786
									],
									[
										166892,
										166896
									],
									[
										167028,
										167032
									],
									[
										167139,
										167143
									],
									[
										167271,
										167275
									],
									[
										167382,
										167386
									],
									[
										167488,
										167492
									],
									[
										167595,
										167599
									],
									[
										167703,
										167707
									],
									[
										167796,
										167800
									],
									[
										167811,
										167815
									],
									[
										167891,
										167895
									],
									[
										167906,
										167910
									],
									[
										168002,
										168006
									],
									[
										168100,
										168104
									],
									[
										168197,
										168201
									],
									[
										168298,
										168302
									],
									[
										168723,
										168727
									],
									[
										169026,
										169030
									],
									[
										169041,
										169045
									],
									[
										169149,
										169153
									],
									[
										169431,
										169435
									],
									[
										169577,
										169581
									],
									[
										169698,
										169702
									],
									[
										169840,
										169844
									],
									[
										169962,
										169966
									],
									[
										170110,
										170114
									],
									[
										170233,
										170237
									],
									[
										170377,
										170381
									],
									[
										170500,
										170504
									],
									[
										170618,
										170622
									],
									[
										170737,
										170741
									],
									[
										170857,
										170861
									],
									[
										170962,
										170966
									],
									[
										170977,
										170981
									],
									[
										171069,
										171073
									],
									[
										171084,
										171088
									],
									[
										171192,
										171196
									],
									[
										171302,
										171306
									],
									[
										171411,
										171415
									],
									[
										171524,
										171528
									],
									[
										171777,
										171781
									],
									[
										172070,
										172074
									],
									[
										172125,
										172129
									],
									[
										172187,
										172191
									],
									[
										172313,
										172317
									],
									[
										172429,
										172433
									],
									[
										172444,
										172448
									],
									[
										172510,
										172514
									],
									[
										172580,
										172584
									],
									[
										172595,
										172599
									],
									[
										172676,
										172680
									],
									[
										172691,
										172695
									],
									[
										172819,
										172823
									],
									[
										173160,
										173164
									],
									[
										173215,
										173219
									],
									[
										173289,
										173293
									],
									[
										173427,
										173431
									],
									[
										173555,
										173559
									],
									[
										173570,
										173574
									],
									[
										173648,
										173652
									],
									[
										173730,
										173734
									],
									[
										173745,
										173749
									],
									[
										173838,
										173842
									],
									[
										173853,
										173857
									],
									[
										174093,
										174097
									],
									[
										174162,
										174166
									],
									[
										174222,
										174226
									],
									[
										174237,
										174241
									],
									[
										174328,
										174332
									],
									[
										174420,
										174424
									],
									[
										174788,
										174792
									],
									[
										174869,
										174873
									],
									[
										174941,
										174945
									],
									[
										174956,
										174960
									],
									[
										175059,
										175063
									],
									[
										175163,
										175167
									],
									[
										175370,
										175374
									],
									[
										175542,
										175546
									],
									[
										176092,
										176096
									],
									[
										176195,
										176199
									],
									[
										176712,
										176716
									],
									[
										177134,
										177138
									],
									[
										177330,
										177334
									],
									[
										177940,
										177944
									],
									[
										178055,
										178059
									],
									[
										178620,
										178624
									],
									[
										179172,
										179176
									],
									[
										179618,
										179622
									],
									[
										179915,
										179919
									],
									[
										180044,
										180048
									],
									[
										180208,
										180212
									],
									[
										180223,
										180227
									],
									[
										180334,
										180338
									],
									[
										180349,
										180353
									],
									[
										180518,
										180522
									],
									[
										180634,
										180638
									],
									[
										180662,
										180666
									],
									[
										180823,
										180827
									],
									[
										180951,
										180955
									],
									[
										180979,
										180983
									],
									[
										181216,
										181220
									],
									[
										181476,
										181480
									],
									[
										181491,
										181495
									],
									[
										181603,
										181607
									],
									[
										181618,
										181622
									],
									[
										181764,
										181768
									],
									[
										181982,
										181986
									],
									[
										182024,
										182028
									],
									[
										182091,
										182095
									],
									[
										182106,
										182110
									],
									[
										182125,
										182129
									],
									[
										182224,
										182228
									],
									[
										182239,
										182243
									],
									[
										182258,
										182262
									],
									[
										182357,
										182361
									],
									[
										182372,
										182376
									],
									[
										182391,
										182395
									],
									[
										182508,
										182512
									],
									[
										182523,
										182527
									],
									[
										182542,
										182546
									],
									[
										182657,
										182661
									],
									[
										182672,
										182676
									],
									[
										182691,
										182695
									],
									[
										182766,
										182770
									],
									[
										182949,
										182953
									],
									[
										183026,
										183030
									],
									[
										183058,
										183062
									],
									[
										183167,
										183171
									],
									[
										183182,
										183186
									],
									[
										183427,
										183431
									],
									[
										183723,
										183727
									],
									[
										183738,
										183742
									],
									[
										183862,
										183866
									],
									[
										183877,
										183881
									],
									[
										184047,
										184051
									],
									[
										184291,
										184295
									],
									[
										184343,
										184347
									],
									[
										184422,
										184426
									],
									[
										184437,
										184441
									],
									[
										184456,
										184460
									],
									[
										184567,
										184571
									],
									[
										184582,
										184586
									],
									[
										184601,
										184605
									],
									[
										184712,
										184716
									],
									[
										184727,
										184731
									],
									[
										184746,
										184750
									],
									[
										184875,
										184879
									],
									[
										184890,
										184894
									],
									[
										184909,
										184913
									],
									[
										185036,
										185040
									],
									[
										185051,
										185055
									],
									[
										185070,
										185074
									],
									[
										185157,
										185161
									],
									[
										185352,
										185356
									],
									[
										185441,
										185445
									],
									[
										185473,
										185477
									],
									[
										185594,
										185598
									],
									[
										185609,
										185613
									],
									[
										185841,
										185845
									],
									[
										185921,
										185925
									],
									[
										185936,
										185940
									],
									[
										186042,
										186046
									],
									[
										186057,
										186061
									],
									[
										186175,
										186179
									],
									[
										186190,
										186194
									],
									[
										186238,
										186242
									],
									[
										186371,
										186375
									],
									[
										186463,
										186467
									],
									[
										186478,
										186482
									],
									[
										186596,
										186600
									],
									[
										186611,
										186615
									],
									[
										186741,
										186745
									],
									[
										186756,
										186760
									],
									[
										186804,
										186808
									],
									[
										186969,
										186973
									],
									[
										187093,
										187097
									],
									[
										187245,
										187249
									],
									[
										187381,
										187385
									],
									[
										187584,
										187588
									],
									[
										187599,
										187603
									],
									[
										187733,
										187737
									],
									[
										187748,
										187752
									],
									[
										188107,
										188111
									],
									[
										188479,
										188483
									],
									[
										189111,
										189115
									],
									[
										189519,
										189523
									],
									[
										189977,
										189981
									],
									[
										189996,
										190000
									],
									[
										190177,
										190181
									],
									[
										190196,
										190200
									],
									[
										190442,
										190446
									],
									[
										190470,
										190474
									],
									[
										190583,
										190587
									],
									[
										190637,
										190641
									],
									[
										190754,
										190758
									],
									[
										190782,
										190786
									],
									[
										190914,
										190918
									],
									[
										190949,
										190953
									],
									[
										191136,
										191140
									],
									[
										191164,
										191168
									],
									[
										191289,
										191293
									],
									[
										191343,
										191347
									],
									[
										191472,
										191476
									],
									[
										191500,
										191504
									],
									[
										191644,
										191648
									],
									[
										191679,
										191683
									],
									[
										191910,
										191914
									],
									[
										192022,
										192026
									],
									[
										192169,
										192173
									],
									[
										192330,
										192334
									],
									[
										192547,
										192551
									],
									[
										192632,
										192636
									],
									[
										192790,
										192794
									],
									[
										192977,
										192981
									],
									[
										193228,
										193232
									],
									[
										193325,
										193329
									],
									[
										193547,
										193551
									],
									[
										193717,
										193721
									],
									[
										193897,
										193901
									],
									[
										194118,
										194122
									],
									[
										194300,
										194304
									],
									[
										194492,
										194496
									],
									[
										194778,
										194782
									],
									[
										194860,
										194864
									],
									[
										194876,
										194880
									],
									[
										194951,
										194955
									],
									[
										194963,
										194967
									],
									[
										195040,
										195044
									],
									[
										195055,
										195059
									],
									[
										195070,
										195074
									],
									[
										195087,
										195091
									],
									[
										195217,
										195221
									],
									[
										195311,
										195315
									],
									[
										195327,
										195331
									],
									[
										195414,
										195418
									],
									[
										195426,
										195430
									],
									[
										195515,
										195519
									],
									[
										195530,
										195534
									],
									[
										195545,
										195549
									],
									[
										195562,
										195566
									],
									[
										195736,
										195740
									],
									[
										196346,
										196350
									],
									[
										196473,
										196477
									],
									[
										197143,
										197147
									],
									[
										197399,
										197403
									],
									[
										197492,
										197496
									],
									[
										197591,
										197595
									],
									[
										197686,
										197690
									],
									[
										197789,
										197793
									],
									[
										197891,
										197895
									],
									[
										197995,
										197999
									],
									[
										198094,
										198098
									],
									[
										198192,
										198196
									],
									[
										198294,
										198298
									],
									[
										198693,
										198697
									],
									[
										198798,
										198802
									],
									[
										198909,
										198913
									],
									[
										199016,
										199020
									],
									[
										199131,
										199135
									],
									[
										199245,
										199249
									],
									[
										199361,
										199365
									],
									[
										199472,
										199476
									],
									[
										199582,
										199586
									],
									[
										199696,
										199700
									],
									[
										199879,
										199883
									],
									[
										199955,
										199959
									],
									[
										200048,
										200052
									],
									[
										200187,
										200191
									],
									[
										200275,
										200279
									],
									[
										200380,
										200384
									],
									[
										200567,
										200571
									],
									[
										200637,
										200641
									],
									[
										200713,
										200717
									],
									[
										200783,
										200787
									],
									[
										200859,
										200863
									],
									[
										200929,
										200933
									],
									[
										201007,
										201011
									],
									[
										201080,
										201084
									],
									[
										201159,
										201163
									],
									[
										201232,
										201236
									],
									[
										201311,
										201315
									],
									[
										201384,
										201388
									],
									[
										201463,
										201467
									],
									[
										201536,
										201540
									],
									[
										201620,
										201624
									],
									[
										201636,
										201640
									],
									[
										201714,
										201718
									],
									[
										201730,
										201734
									],
									[
										201814,
										201818
									],
									[
										201830,
										201834
									],
									[
										201908,
										201912
									],
									[
										201924,
										201928
									],
									[
										202008,
										202012
									],
									[
										202024,
										202028
									],
									[
										202102,
										202106
									],
									[
										202118,
										202122
									],
									[
										202202,
										202206
									],
									[
										202218,
										202222
									],
									[
										202296,
										202300
									],
									[
										202312,
										202316
									],
									[
										202389,
										202393
									],
									[
										202460,
										202464
									],
									[
										202536,
										202540
									],
									[
										202605,
										202609
									],
									[
										202680,
										202684
									],
									[
										202749,
										202753
									],
									[
										202833,
										202837
									],
									[
										202911,
										202915
									],
									[
										203007,
										203011
									],
									[
										203119,
										203123
									],
									[
										203237,
										203241
									],
									[
										203349,
										203353
									],
									[
										203467,
										203471
									],
									[
										203579,
										203583
									],
									[
										203697,
										203701
									],
									[
										203809,
										203813
									],
									[
										203959,
										203963
									],
									[
										204041,
										204045
									],
									[
										204129,
										204133
									],
									[
										204211,
										204215
									],
									[
										204299,
										204303
									],
									[
										204381,
										204385
									],
									[
										204471,
										204475
									],
									[
										204556,
										204560
									],
									[
										204647,
										204651
									],
									[
										204732,
										204736
									],
									[
										204823,
										204827
									],
									[
										204908,
										204912
									],
									[
										204999,
										205003
									],
									[
										205084,
										205088
									],
									[
										205180,
										205184
									],
									[
										205196,
										205200
									],
									[
										205286,
										205290
									],
									[
										205302,
										205306
									],
									[
										205398,
										205402
									],
									[
										205414,
										205418
									],
									[
										205504,
										205508
									],
									[
										205520,
										205524
									],
									[
										205616,
										205620
									],
									[
										205632,
										205636
									],
									[
										205722,
										205726
									],
									[
										205738,
										205742
									],
									[
										205834,
										205838
									],
									[
										205850,
										205854
									],
									[
										205940,
										205944
									],
									[
										205956,
										205960
									],
									[
										206045,
										206049
									],
									[
										206128,
										206132
									],
									[
										206216,
										206220
									],
									[
										206297,
										206301
									],
									[
										206384,
										206388
									],
									[
										206465,
										206469
									],
									[
										206561,
										206565
									],
									[
										206651,
										206655
									],
									[
										206759,
										206763
									],
									[
										206883,
										206887
									],
									[
										207013,
										207017
									],
									[
										207137,
										207141
									],
									[
										207267,
										207271
									],
									[
										207391,
										207395
									],
									[
										207521,
										207525
									],
									[
										207645,
										207649
									],
									[
										207851,
										207855
									],
									[
										207940,
										207944
									],
									[
										207953,
										207957
									],
									[
										208092,
										208096
									],
									[
										208193,
										208197
									],
									[
										208206,
										208210
									],
									[
										208424,
										208428
									],
									[
										208531,
										208535
									],
									[
										208646,
										208650
									],
									[
										208679,
										208683
									],
									[
										208786,
										208790
									],
									[
										208938,
										208942
									],
									[
										209072,
										209076
									],
									[
										209184,
										209188
									],
									[
										209300,
										209304
									],
									[
										209319,
										209323
									],
									[
										209477,
										209481
									],
									[
										209596,
										209600
									],
									[
										209723,
										209727
									],
									[
										209756,
										209760
									],
									[
										209875,
										209879
									],
									[
										210039,
										210043
									],
									[
										210185,
										210189
									],
									[
										210309,
										210313
									],
									[
										210437,
										210441
									],
									[
										210456,
										210460
									],
									[
										210638,
										210642
									],
									[
										210713,
										210717
									],
									[
										210849,
										210853
									],
									[
										210936,
										210940
									],
									[
										211132,
										211136
									],
									[
										211501,
										211505
									],
									[
										211630,
										211634
									],
									[
										212059,
										212063
									],
									[
										212248,
										212252
									],
									[
										212336,
										212340
									],
									[
										212423,
										212427
									],
									[
										212501,
										212505
									],
									[
										212530,
										212534
									],
									[
										212670,
										212674
									],
									[
										212770,
										212774
									],
									[
										212869,
										212873
									],
									[
										212959,
										212963
									],
									[
										212988,
										212992
									],
									[
										213220,
										213224
									],
									[
										213335,
										213339
									],
									[
										213354,
										213358
									],
									[
										213735,
										213739
									],
									[
										213862,
										213866
									],
									[
										213881,
										213885
									],
									[
										214262,
										214266
									],
									[
										214361,
										214365
									],
									[
										214485,
										214489
									],
									[
										214662,
										214666
									],
									[
										214773,
										214777
									],
									[
										214909,
										214913
									],
									[
										215202,
										215206
									],
									[
										215633,
										215637
									],
									[
										216148,
										216152
									],
									[
										216639,
										216643
									],
									[
										217144,
										217148
									],
									[
										217260,
										217264
									],
									[
										217699,
										217703
									],
									[
										217827,
										217831
									],
									[
										218113,
										218117
									],
									[
										218201,
										218205
									],
									[
										218659,
										218663
									],
									[
										218759,
										218763
									],
									[
										218957,
										218961
									],
									[
										218972,
										218976
									],
									[
										218985,
										218989
									],
									[
										219108,
										219112
									],
									[
										219123,
										219127
									],
									[
										219147,
										219151
									],
									[
										219390,
										219394
									],
									[
										219407,
										219411
									],
									[
										219435,
										219439
									],
									[
										219599,
										219603
									],
									[
										219614,
										219618
									],
									[
										219627,
										219631
									],
									[
										219762,
										219766
									],
									[
										219777,
										219781
									],
									[
										219801,
										219805
									],
									[
										220068,
										220072
									],
									[
										220085,
										220089
									],
									[
										220113,
										220117
									],
									[
										220282,
										220286
									],
									[
										220377,
										220381
									],
									[
										220392,
										220396
									],
									[
										220480,
										220484
									],
									[
										220495,
										220499
									],
									[
										220582,
										220586
									],
									[
										220597,
										220601
									],
									[
										220687,
										220691
									],
									[
										220783,
										220787
									],
									[
										220878,
										220882
									],
									[
										221062,
										221066
									],
									[
										221077,
										221081
									],
									[
										221092,
										221096
									],
									[
										221193,
										221197
									],
									[
										221208,
										221212
									],
									[
										221223,
										221227
									],
									[
										221322,
										221326
									],
									[
										221337,
										221341
									],
									[
										221352,
										221356
									],
									[
										221499,
										221503
									],
									[
										221531,
										221535
									],
									[
										221546,
										221550
									],
									[
										221637,
										221641
									],
									[
										221669,
										221673
									],
									[
										221684,
										221688
									],
									[
										221777,
										221781
									],
									[
										221805,
										221809
									],
									[
										221820,
										221824
									],
									[
										221958,
										221962
									],
									[
										221973,
										221977
									],
									[
										222074,
										222078
									],
									[
										222533,
										222537
									],
									[
										222650,
										222654
									],
									[
										222665,
										222669
									],
									[
										222765,
										222769
									],
									[
										222780,
										222784
									],
									[
										222879,
										222883
									],
									[
										222894,
										222898
									],
									[
										222996,
										223000
									],
									[
										223104,
										223108
									],
									[
										223211,
										223215
									],
									[
										223419,
										223423
									],
									[
										223434,
										223438
									],
									[
										223449,
										223453
									],
									[
										223562,
										223566
									],
									[
										223577,
										223581
									],
									[
										223592,
										223596
									],
									[
										223703,
										223707
									],
									[
										223718,
										223722
									],
									[
										223733,
										223737
									],
									[
										223892,
										223896
									],
									[
										223924,
										223928
									],
									[
										223939,
										223943
									],
									[
										224042,
										224046
									],
									[
										224074,
										224078
									],
									[
										224089,
										224093
									],
									[
										224194,
										224198
									],
									[
										224222,
										224226
									],
									[
										224237,
										224241
									],
									[
										224387,
										224391
									],
									[
										224402,
										224406
									],
									[
										224515,
										224519
									],
									[
										224940,
										224944
									],
									[
										224968,
										224972
									],
									[
										225051,
										225055
									],
									[
										225066,
										225070
									],
									[
										225149,
										225153
									],
									[
										225268,
										225272
									],
									[
										225283,
										225287
									],
									[
										225415,
										225419
									],
									[
										225443,
										225447
									],
									[
										225526,
										225530
									],
									[
										225541,
										225545
									],
									[
										225636,
										225640
									],
									[
										225755,
										225759
									],
									[
										225770,
										225774
									],
									[
										225960,
										225964
									],
									[
										225975,
										225979
									],
									[
										226057,
										226061
									],
									[
										226072,
										226076
									],
									[
										226226,
										226230
									],
									[
										226241,
										226245
									],
									[
										226335,
										226339
									],
									[
										226350,
										226354
									],
									[
										226545,
										226549
									],
									[
										226603,
										226607
									],
									[
										226618,
										226622
									],
									[
										226701,
										226705
									],
									[
										226790,
										226794
									],
									[
										226805,
										226809
									],
									[
										226940,
										226944
									],
									[
										226998,
										227002
									],
									[
										227013,
										227017
									],
									[
										227108,
										227112
									],
									[
										227197,
										227201
									],
									[
										227212,
										227216
									],
									[
										227395,
										227399
									],
									[
										227423,
										227427
									],
									[
										227542,
										227546
									],
									[
										227570,
										227574
									],
									[
										227708,
										227712
									],
									[
										227836,
										227840
									],
									[
										227995,
										227999
									],
									[
										228218,
										228222
									],
									[
										228246,
										228250
									],
									[
										228377,
										228381
									],
									[
										228405,
										228409
									],
									[
										228555,
										228559
									],
									[
										228695,
										228699
									],
									[
										228866,
										228870
									],
									[
										229131,
										229135
									],
									[
										229163,
										229167
									],
									[
										229178,
										229182
									],
									[
										229265,
										229269
									],
									[
										229280,
										229284
									],
									[
										229369,
										229373
									],
									[
										229384,
										229388
									],
									[
										229457,
										229461
									],
									[
										229489,
										229493
									],
									[
										229504,
										229508
									],
									[
										229588,
										229592
									],
									[
										229603,
										229607
									],
									[
										229689,
										229693
									],
									[
										229704,
										229708
									],
									[
										229777,
										229781
									],
									[
										229807,
										229811
									],
									[
										229887,
										229891
									],
									[
										229902,
										229906
									],
									[
										229990,
										229994
									],
									[
										230051,
										230055
									],
									[
										230165,
										230169
									],
									[
										230197,
										230201
									],
									[
										230212,
										230216
									],
									[
										230311,
										230315
									],
									[
										230326,
										230330
									],
									[
										230427,
										230431
									],
									[
										230442,
										230446
									],
									[
										230527,
										230531
									],
									[
										230559,
										230563
									],
									[
										230574,
										230578
									],
									[
										230670,
										230674
									],
									[
										230685,
										230689
									],
									[
										230783,
										230787
									],
									[
										230798,
										230802
									],
									[
										230883,
										230887
									],
									[
										230913,
										230917
									],
									[
										231005,
										231009
									],
									[
										231020,
										231024
									],
									[
										231120,
										231124
									],
									[
										231193,
										231197
									],
									[
										231360,
										231364
									],
									[
										231375,
										231379
									],
									[
										231413,
										231417
									],
									[
										231428,
										231432
									],
									[
										231516,
										231520
									],
									[
										231531,
										231535
									],
									[
										231585,
										231589
									],
									[
										231600,
										231604
									],
									[
										231690,
										231694
									],
									[
										231705,
										231709
									],
									[
										231792,
										231796
									],
									[
										231807,
										231811
									],
									[
										231900,
										231904
									],
									[
										231915,
										231919
									],
									[
										232000,
										232004
									],
									[
										232015,
										232019
									],
									[
										232108,
										232112
									],
									[
										232123,
										232127
									],
									[
										232237,
										232241
									],
									[
										232252,
										232256
									],
									[
										232379,
										232383
									],
									[
										232394,
										232398
									],
									[
										232409,
										232413
									],
									[
										232497,
										232501
									],
									[
										232512,
										232516
									],
									[
										232603,
										232607
									],
									[
										232618,
										232622
									],
									[
										232700,
										232704
									],
									[
										232715,
										232719
									],
									[
										232730,
										232734
									],
									[
										232838,
										232842
									],
									[
										232853,
										232857
									],
									[
										232907,
										232911
									],
									[
										232922,
										232926
									],
									[
										233082,
										233086
									],
									[
										233097,
										233101
									],
									[
										233135,
										233139
									],
									[
										233150,
										233154
									],
									[
										233250,
										233254
									],
									[
										233265,
										233269
									],
									[
										233319,
										233323
									],
									[
										233334,
										233338
									],
									[
										233436,
										233440
									],
									[
										233451,
										233455
									],
									[
										233550,
										233554
									],
									[
										233565,
										233569
									],
									[
										233670,
										233674
									],
									[
										233685,
										233689
									],
									[
										233782,
										233786
									],
									[
										233797,
										233801
									],
									[
										233902,
										233906
									],
									[
										233917,
										233921
									],
									[
										234043,
										234047
									],
									[
										234058,
										234062
									],
									[
										234197,
										234201
									],
									[
										234212,
										234216
									],
									[
										234227,
										234231
									],
									[
										234327,
										234331
									],
									[
										234342,
										234346
									],
									[
										234445,
										234449
									],
									[
										234460,
										234464
									],
									[
										234554,
										234558
									],
									[
										234569,
										234573
									],
									[
										234584,
										234588
									],
									[
										234704,
										234708
									],
									[
										234719,
										234723
									],
									[
										234773,
										234777
									],
									[
										234788,
										234792
									],
									[
										234985,
										234989
									],
									[
										235000,
										235004
									],
									[
										235038,
										235042
									],
									[
										235053,
										235057
									],
									[
										235143,
										235147
									],
									[
										235158,
										235162
									],
									[
										235251,
										235255
									],
									[
										235266,
										235270
									],
									[
										235350,
										235354
									],
									[
										235365,
										235369
									],
									[
										235469,
										235473
									],
									[
										235484,
										235488
									],
									[
										235499,
										235503
									],
									[
										235586,
										235590
									],
									[
										235601,
										235605
									],
									[
										235691,
										235695
									],
									[
										235706,
										235710
									],
									[
										235832,
										235836
									],
									[
										235847,
										235851
									],
									[
										235885,
										235889
									],
									[
										235900,
										235904
									],
									[
										236002,
										236006
									],
									[
										236017,
										236021
									],
									[
										236122,
										236126
									],
									[
										236137,
										236141
									],
									[
										236233,
										236237
									],
									[
										236248,
										236252
									],
									[
										236364,
										236368
									],
									[
										236379,
										236383
									],
									[
										236394,
										236398
									],
									[
										236493,
										236497
									],
									[
										236508,
										236512
									],
									[
										236610,
										236614
									],
									[
										236625,
										236629
									],
									[
										236802,
										236806
									],
									[
										236914,
										236918
									],
									[
										237085,
										237089
									],
									[
										237170,
										237174
									],
									[
										237262,
										237266
									],
									[
										237349,
										237353
									],
									[
										237447,
										237451
									],
									[
										237537,
										237541
									],
									[
										237677,
										237681
									],
									[
										237774,
										237778
									],
									[
										237878,
										237882
									],
									[
										237977,
										237981
									],
									[
										238087,
										238091
									],
									[
										238189,
										238193
									],
									[
										238363,
										238367
									],
									[
										238391,
										238395
									],
									[
										238490,
										238494
									],
									[
										238505,
										238509
									],
									[
										238589,
										238593
									],
									[
										238739,
										238743
									],
									[
										238754,
										238758
									],
									[
										238887,
										238891
									],
									[
										238915,
										238919
									],
									[
										239014,
										239018
									],
									[
										239029,
										239033
									],
									[
										239125,
										239129
									],
									[
										239275,
										239279
									],
									[
										239290,
										239294
									],
									[
										239550,
										239554
									],
									[
										239973,
										239977
									],
									[
										240316,
										240320
									],
									[
										240417,
										240421
									],
									[
										240550,
										240554
									],
									[
										240663,
										240667
									],
									[
										240848,
										240852
									],
									[
										240950,
										240954
									],
									[
										241084,
										241088
									],
									[
										241198,
										241202
									],
									[
										241421,
										241425
									],
									[
										241630,
										241634
									],
									[
										241823,
										241827
									],
									[
										241935,
										241939
									],
									[
										242129,
										242133
									],
									[
										242207,
										242211
									],
									[
										242322,
										242326
									],
									[
										242451,
										242455
									],
									[
										242578,
										242582
									],
									[
										242824,
										242828
									],
									[
										242948,
										242952
									],
									[
										243166,
										243170
									],
									[
										243256,
										243260
									],
									[
										243383,
										243387
									],
									[
										243524,
										243528
									],
									[
										243663,
										243667
									],
									[
										243877,
										243881
									],
									[
										243990,
										243994
									],
									[
										244149,
										244153
									],
									[
										244231,
										244235
									],
									[
										244320,
										244324
									],
									[
										244400,
										244404
									],
									[
										244539,
										244543
									],
									[
										244633,
										244637
									],
									[
										244734,
										244738
									],
									[
										244826,
										244830
									],
									[
										245014,
										245018
									],
									[
										245094,
										245098
									],
									[
										245233,
										245237
									],
									[
										245325,
										245329
									],
									[
										245517,
										245521
									],
									[
										245598,
										245602
									],
									[
										245738,
										245742
									],
									[
										245831,
										245835
									],
									[
										246022,
										246026
									],
									[
										246278,
										246282
									],
									[
										246717,
										246721
									],
									[
										246985,
										246989
									],
									[
										247481,
										247485
									],
									[
										247496,
										247500
									],
									[
										247581,
										247585
									],
									[
										247596,
										247600
									],
									[
										247684,
										247688
									],
									[
										247699,
										247703
									],
									[
										247793,
										247797
									],
									[
										247808,
										247812
									],
									[
										247907,
										247911
									],
									[
										247922,
										247926
									],
									[
										248013,
										248017
									],
									[
										248028,
										248032
									],
									[
										248169,
										248173
									],
									[
										248184,
										248188
									],
									[
										248281,
										248285
									],
									[
										248296,
										248300
									],
									[
										248396,
										248400
									],
									[
										248411,
										248415
									],
									[
										248517,
										248521
									],
									[
										248532,
										248536
									],
									[
										248643,
										248647
									],
									[
										248658,
										248662
									],
									[
										248761,
										248765
									],
									[
										248776,
										248780
									],
									[
										248956,
										248960
									],
									[
										249001,
										249005
									],
									[
										249016,
										249020
									],
									[
										249101,
										249105
									],
									[
										249264,
										249268
									],
									[
										249309,
										249313
									],
									[
										249324,
										249328
									],
									[
										249421,
										249425
									],
									[
										249620,
										249624
									],
									[
										249738,
										249742
									],
									[
										249913,
										249917
									],
									[
										249928,
										249932
									],
									[
										249966,
										249970
									],
									[
										249981,
										249985
									],
									[
										250063,
										250067
									],
									[
										250078,
										250082
									],
									[
										250093,
										250097
									],
									[
										250179,
										250183
									],
									[
										250194,
										250198
									],
									[
										250282,
										250286
									],
									[
										250297,
										250301
									],
									[
										250425,
										250429
									],
									[
										250440,
										250444
									],
									[
										250478,
										250482
									],
									[
										250493,
										250497
									],
									[
										250587,
										250591
									],
									[
										250602,
										250606
									],
									[
										250617,
										250621
									],
									[
										250715,
										250719
									],
									[
										250730,
										250734
									],
									[
										250830,
										250834
									],
									[
										250845,
										250849
									],
									[
										251044,
										251048
									],
									[
										251142,
										251146
									],
									[
										251234,
										251238
									],
									[
										251327,
										251331
									],
									[
										251427,
										251431
									],
									[
										251518,
										251522
									],
									[
										251672,
										251676
									],
									[
										251782,
										251786
									],
									[
										251886,
										251890
									],
									[
										251991,
										251995
									],
									[
										252103,
										252107
									],
									[
										252206,
										252210
									],
									[
										252390,
										252394
									],
									[
										252403,
										252407
									],
									[
										252516,
										252520
									],
									[
										252529,
										252533
									],
									[
										252683,
										252687
									],
									[
										252806,
										252810
									],
									[
										252981,
										252985
									],
									[
										253063,
										253067
									],
									[
										253196,
										253200
									],
									[
										253290,
										253294
									],
									[
										253483,
										253487
									],
									[
										253496,
										253500
									],
									[
										253559,
										253563
									],
									[
										253573,
										253577
									],
									[
										253653,
										253657
									],
									[
										253667,
										253671
									],
									[
										253754,
										253758
									],
									[
										253768,
										253772
									],
									[
										253846,
										253850
									],
									[
										253860,
										253864
									],
									[
										253950,
										253954
									],
									[
										254035,
										254039
									],
									[
										254127,
										254131
									],
									[
										254210,
										254214
									],
									[
										254298,
										254302
									],
									[
										254311,
										254315
									],
									[
										254394,
										254398
									],
									[
										254407,
										254411
									],
									[
										254497,
										254501
									],
									[
										254510,
										254514
									],
									[
										254591,
										254595
									],
									[
										254604,
										254608
									],
									[
										254693,
										254697
									],
									[
										254707,
										254711
									],
									[
										254792,
										254796
									],
									[
										254806,
										254810
									],
									[
										254892,
										254896
									],
									[
										254905,
										254909
									],
									[
										254993,
										254997
									],
									[
										255006,
										255010
									],
									[
										255080,
										255084
									],
									[
										255216,
										255220
									],
									[
										255229,
										255233
									],
									[
										255304,
										255308
									],
									[
										255318,
										255322
									],
									[
										255410,
										255414
									],
									[
										255424,
										255428
									],
									[
										255523,
										255527
									],
									[
										255537,
										255541
									],
									[
										255627,
										255631
									],
									[
										255641,
										255645
									],
									[
										255743,
										255747
									],
									[
										255840,
										255844
									],
									[
										255944,
										255948
									],
									[
										256039,
										256043
									],
									[
										256139,
										256143
									],
									[
										256152,
										256156
									],
									[
										256247,
										256251
									],
									[
										256260,
										256264
									],
									[
										256362,
										256366
									],
									[
										256375,
										256379
									],
									[
										256468,
										256472
									],
									[
										256481,
										256485
									],
									[
										256582,
										256586
									],
									[
										256596,
										256600
									],
									[
										256693,
										256697
									],
									[
										256707,
										256711
									],
									[
										256805,
										256809
									],
									[
										256818,
										256822
									],
									[
										256918,
										256922
									],
									[
										256931,
										256935
									],
									[
										257017,
										257021
									],
									[
										257202,
										257206
									],
									[
										257256,
										257260
									],
									[
										257396,
										257400
									],
									[
										257450,
										257454
									],
									[
										257633,
										257637
									],
									[
										257693,
										257697
									],
									[
										257757,
										257761
									],
									[
										257770,
										257774
									],
									[
										257882,
										257886
									],
									[
										257954,
										257958
									],
									[
										258030,
										258034
									],
									[
										258043,
										258047
									],
									[
										258223,
										258227
									],
									[
										258311,
										258315
									],
									[
										258410,
										258414
									],
									[
										258512,
										258516
									],
									[
										258664,
										258668
									],
									[
										258764,
										258768
									],
									[
										258875,
										258879
									],
									[
										258989,
										258993
									],
									[
										259187,
										259191
									],
									[
										259202,
										259206
									],
									[
										259288,
										259292
									],
									[
										259303,
										259307
									],
									[
										259392,
										259396
									],
									[
										259407,
										259411
									],
									[
										259502,
										259506
									],
									[
										259517,
										259521
									],
									[
										259665,
										259669
									],
									[
										259680,
										259684
									],
									[
										259778,
										259782
									],
									[
										259793,
										259797
									],
									[
										259894,
										259898
									],
									[
										259909,
										259913
									],
									[
										260016,
										260020
									],
									[
										260031,
										260035
									],
									[
										260333,
										260337
									],
									[
										260806,
										260810
									],
									[
										261015,
										261019
									],
									[
										261128,
										261132
									],
									[
										261295,
										261299
									],
									[
										261421,
										261425
									],
									[
										261456,
										261460
									],
									[
										261614,
										261618
									],
									[
										261752,
										261756
									],
									[
										261787,
										261791
									],
									[
										262049,
										262053
									],
									[
										262432,
										262436
									],
									[
										262706,
										262710
									],
									[
										262808,
										262812
									],
									[
										263225,
										263229
									],
									[
										263339,
										263343
									],
									[
										263625,
										263629
									],
									[
										264043,
										264047
									],
									[
										264254,
										264258
									],
									[
										264273,
										264277
									],
									[
										264292,
										264296
									],
									[
										264313,
										264317
									],
									[
										264438,
										264442
									],
									[
										264457,
										264461
									],
									[
										264476,
										264480
									],
									[
										264497,
										264501
									],
									[
										264678,
										264682
									],
									[
										264697,
										264701
									],
									[
										264716,
										264720
									],
									[
										264737,
										264741
									],
									[
										264863,
										264867
									],
									[
										264882,
										264886
									],
									[
										264901,
										264905
									],
									[
										264922,
										264926
									],
									[
										265175,
										265179
									],
									[
										265507,
										265511
									],
									[
										265716,
										265720
									],
									[
										265805,
										265809
									],
									[
										265887,
										265891
									],
									[
										265974,
										265978
									],
									[
										266048,
										266052
									],
									[
										266062,
										266066
									],
									[
										266078,
										266082
									],
									[
										266095,
										266099
									],
									[
										266109,
										266113
									],
									[
										266125,
										266129
									],
									[
										266196,
										266200
									],
									[
										266210,
										266214
									],
									[
										266226,
										266230
									],
									[
										266243,
										266247
									],
									[
										266260,
										266264
									],
									[
										266278,
										266282
									],
									[
										266292,
										266296
									],
									[
										266423,
										266427
									],
									[
										266440,
										266444
									],
									[
										266454,
										266458
									],
									[
										266470,
										266474
									],
									[
										266554,
										266558
									],
									[
										266568,
										266572
									],
									[
										266584,
										266588
									],
									[
										266601,
										266605
									],
									[
										266693,
										266697
									],
									[
										266707,
										266711
									],
									[
										266723,
										266727
									],
									[
										266740,
										266744
									],
									[
										266831,
										266835
									],
									[
										266845,
										266849
									],
									[
										266861,
										266865
									],
									[
										266954,
										266958
									],
									[
										266968,
										266972
									],
									[
										266984,
										266988
									],
									[
										267079,
										267083
									],
									[
										267096,
										267100
									],
									[
										267193,
										267197
									],
									[
										267210,
										267214
									],
									[
										267344,
										267348
									],
									[
										267445,
										267449
									],
									[
										267539,
										267543
									],
									[
										267638,
										267642
									],
									[
										267724,
										267728
									],
									[
										267738,
										267742
									],
									[
										267754,
										267758
									],
									[
										267771,
										267775
									],
									[
										267785,
										267789
									],
									[
										267801,
										267805
									],
									[
										267884,
										267888
									],
									[
										267898,
										267902
									],
									[
										267914,
										267918
									],
									[
										267931,
										267935
									],
									[
										267948,
										267952
									],
									[
										267966,
										267970
									],
									[
										267980,
										267984
									],
									[
										268123,
										268127
									],
									[
										268140,
										268144
									],
									[
										268154,
										268158
									],
									[
										268170,
										268174
									],
									[
										268266,
										268270
									],
									[
										268280,
										268284
									],
									[
										268296,
										268300
									],
									[
										268313,
										268317
									],
									[
										268417,
										268421
									],
									[
										268431,
										268435
									],
									[
										268447,
										268451
									],
									[
										268464,
										268468
									],
									[
										268567,
										268571
									],
									[
										268581,
										268585
									],
									[
										268597,
										268601
									],
									[
										268702,
										268706
									],
									[
										268716,
										268720
									],
									[
										268732,
										268736
									],
									[
										268839,
										268843
									],
									[
										268856,
										268860
									],
									[
										268965,
										268969
									],
									[
										268982,
										268986
									],
									[
										269179,
										269183
									],
									[
										269334,
										269338
									],
									[
										269370,
										269374
									],
									[
										269562,
										269566
									],
									[
										269729,
										269733
									],
									[
										269765,
										269769
									],
									[
										270013,
										270017
									],
									[
										270153,
										270157
									],
									[
										270387,
										270391
									],
									[
										270506,
										270510
									],
									[
										270626,
										270630
									],
									[
										270760,
										270764
									],
									[
										270892,
										270896
									],
									[
										271075,
										271079
									],
									[
										271227,
										271231
									],
									[
										271485,
										271489
									],
									[
										271616,
										271620
									],
									[
										271748,
										271752
									],
									[
										271894,
										271898
									],
									[
										272038,
										272042
									],
									[
										272295,
										272299
									],
									[
										272502,
										272506
									],
									[
										272671,
										272675
									],
									[
										272809,
										272813
									],
									[
										273053,
										273057
									],
									[
										273197,
										273201
									],
									[
										273568,
										273572
									],
									[
										273736,
										273740
									],
									[
										273900,
										273904
									],
									[
										273929,
										273933
									],
									[
										274092,
										274096
									],
									[
										274107,
										274111
									],
									[
										274190,
										274194
									],
									[
										274205,
										274209
									],
									[
										274295,
										274299
									],
									[
										274324,
										274328
									],
									[
										274456,
										274460
									],
									[
										274471,
										274475
									],
									[
										274551,
										274555
									],
									[
										274566,
										274570
									],
									[
										274654,
										274658
									],
									[
										274683,
										274687
									],
									[
										274769,
										274773
									],
									[
										274798,
										274802
									],
									[
										274871,
										274875
									],
									[
										274886,
										274890
									],
									[
										275001,
										275005
									],
									[
										275030,
										275034
									],
									[
										275205,
										275209
									],
									[
										275220,
										275224
									],
									[
										275315,
										275319
									],
									[
										275330,
										275334
									],
									[
										275432,
										275436
									],
									[
										275461,
										275465
									],
									[
										275605,
										275609
									],
									[
										275620,
										275624
									],
									[
										275712,
										275716
									],
									[
										275727,
										275731
									],
									[
										275827,
										275831
									],
									[
										275856,
										275860
									],
									[
										275954,
										275958
									],
									[
										275983,
										275987
									],
									[
										276068,
										276072
									],
									[
										276083,
										276087
									],
									[
										276259,
										276263
									],
									[
										276273,
										276277
									],
									[
										276371,
										276375
									],
									[
										276385,
										276389
									],
									[
										276526,
										276530
									],
									[
										276540,
										276544
									],
									[
										276650,
										276654
									],
									[
										276664,
										276668
									],
									[
										276918,
										276922
									],
									[
										277075,
										277079
									],
									[
										277253,
										277257
									],
									[
										277282,
										277286
									],
									[
										277369,
										277373
									],
									[
										277398,
										277402
									],
									[
										277486,
										277490
									],
									[
										277576,
										277580
									],
									[
										277658,
										277662
									],
									[
										277689,
										277693
									],
									[
										277783,
										277787
									],
									[
										277880,
										277884
									],
									[
										277976,
										277980
									],
									[
										278076,
										278080
									],
									[
										278212,
										278216
									],
									[
										278327,
										278331
									],
									[
										278457,
										278461
									],
									[
										278557,
										278561
									],
									[
										278683,
										278687
									],
									[
										278784,
										278788
									],
									[
										278900,
										278904
									],
									[
										279098,
										279102
									],
									[
										279129,
										279133
									],
									[
										279144,
										279148
									],
									[
										279242,
										279246
									],
									[
										279681,
										279685
									],
									[
										279862,
										279866
									],
									[
										280064,
										280068
									],
									[
										280093,
										280097
									],
									[
										280192,
										280196
									],
									[
										280221,
										280225
									],
									[
										280321,
										280325
									],
									[
										280423,
										280427
									],
									[
										280517,
										280521
									],
									[
										280548,
										280552
									],
									[
										280654,
										280658
									],
									[
										280763,
										280767
									],
									[
										280871,
										280875
									],
									[
										280983,
										280987
									],
									[
										281143,
										281147
									],
									[
										281270,
										281274
									],
									[
										281412,
										281416
									],
									[
										281524,
										281528
									],
									[
										281662,
										281666
									],
									[
										281775,
										281779
									],
									[
										281903,
										281907
									],
									[
										282125,
										282129
									],
									[
										282156,
										282160
									],
									[
										282171,
										282175
									],
									[
										282281,
										282285
									],
									[
										282645,
										282649
									],
									[
										282732,
										282736
									],
									[
										282824,
										282828
									],
									[
										282908,
										282912
									],
									[
										283043,
										283047
									],
									[
										283142,
										283146
									],
									[
										283246,
										283250
									],
									[
										283342,
										283346
									],
									[
										283591,
										283595
									],
									[
										283678,
										283682
									],
									[
										283745,
										283749
									],
									[
										283895,
										283899
									],
									[
										284090,
										284094
									],
									[
										284330,
										284334
									],
									[
										284464,
										284468
									],
									[
										284643,
										284647
									],
									[
										285183,
										285187
									],
									[
										285282,
										285286
									],
									[
										285361,
										285365
									],
									[
										285523,
										285527
									],
									[
										285730,
										285734
									],
									[
										285982,
										285986
									],
									[
										286128,
										286132
									],
									[
										286319,
										286323
									],
									[
										286736,
										286740
									],
									[
										286810,
										286814
									],
									[
										286938,
										286942
									],
									[
										287024,
										287028
									],
									[
										287248,
										287252
									],
									[
										287451,
										287455
									],
									[
										287535,
										287539
									],
									[
										287633,
										287637
									],
									[
										287774,
										287778
									],
									[
										287800,
										287804
									],
									[
										287910,
										287914
									],
									[
										287924,
										287928
									],
									[
										288006,
										288010
									],
									[
										288020,
										288024
									],
									[
										288113,
										288117
									],
									[
										288241,
										288245
									],
									[
										288341,
										288345
									],
									[
										288511,
										288515
									],
									[
										288738,
										288742
									],
									[
										288834,
										288838
									],
									[
										288944,
										288948
									],
									[
										289109,
										289113
									],
									[
										289135,
										289139
									],
									[
										289257,
										289261
									],
									[
										289271,
										289275
									],
									[
										289365,
										289369
									],
									[
										289379,
										289383
									],
									[
										289484,
										289488
									],
									[
										289624,
										289628
									],
									[
										289736,
										289740
									],
									[
										289968,
										289972
									],
									[
										290048,
										290052
									],
									[
										290141,
										290145
									],
									[
										290268,
										290272
									],
									[
										290281,
										290285
									],
									[
										290294,
										290298
									],
									[
										290307,
										290311
									],
									[
										290387,
										290391
									],
									[
										290400,
										290404
									],
									[
										290413,
										290417
									],
									[
										290426,
										290430
									],
									[
										290659,
										290663
									],
									[
										290676,
										290680
									],
									[
										290696,
										290700
									],
									[
										290787,
										290791
									],
									[
										290882,
										290886
									],
									[
										291286,
										291290
									],
									[
										291530,
										291534
									],
									[
										291544,
										291548
									],
									[
										291616,
										291620
									],
									[
										291629,
										291633
									],
									[
										291699,
										291703
									],
									[
										291712,
										291716
									],
									[
										291726,
										291730
									],
									[
										291801,
										291805
									],
									[
										291814,
										291818
									],
									[
										291878,
										291882
									],
									[
										291959,
										291963
									],
									[
										292035,
										292039
									],
									[
										292130,
										292134
									],
									[
										292219,
										292223
									],
									[
										292312,
										292316
									],
									[
										292407,
										292411
									],
									[
										292504,
										292508
									],
									[
										292595,
										292599
									],
									[
										292694,
										292698
									],
									[
										292795,
										292799
									],
									[
										292890,
										292894
									],
									[
										293246,
										293250
									],
									[
										293338,
										293342
									],
									[
										293443,
										293447
									],
									[
										293582,
										293586
									],
									[
										293595,
										293599
									],
									[
										293608,
										293612
									],
									[
										293621,
										293625
									],
									[
										293713,
										293717
									],
									[
										293726,
										293730
									],
									[
										293739,
										293743
									],
									[
										293752,
										293756
									],
									[
										294021,
										294025
									],
									[
										294038,
										294042
									],
									[
										294058,
										294062
									],
									[
										294161,
										294165
									],
									[
										294268,
										294272
									],
									[
										294732,
										294736
									],
									[
										295012,
										295016
									],
									[
										295026,
										295030
									],
									[
										295110,
										295114
									],
									[
										295123,
										295127
									],
									[
										295205,
										295209
									],
									[
										295218,
										295222
									],
									[
										295232,
										295236
									],
									[
										295319,
										295323
									],
									[
										295332,
										295336
									],
									[
										295408,
										295412
									],
									[
										295501,
										295505
									],
									[
										295589,
										295593
									],
									[
										295696,
										295700
									],
									[
										295797,
										295801
									],
									[
										295902,
										295906
									],
									[
										296009,
										296013
									],
									[
										296118,
										296122
									],
									[
										296221,
										296225
									],
									[
										296332,
										296336
									],
									[
										296445,
										296449
									],
									[
										296552,
										296556
									],
									[
										296731,
										296735
									],
									[
										296807,
										296811
									],
									[
										296894,
										296898
									],
									[
										296968,
										296972
									],
									[
										297053,
										297057
									],
									[
										297129,
										297133
									],
									[
										297216,
										297220
									],
									[
										297293,
										297297
									],
									[
										297381,
										297385
									],
									[
										297468,
										297472
									],
									[
										297555,
										297559
									],
									[
										297638,
										297642
									],
									[
										297723,
										297727
									],
									[
										297810,
										297814
									],
									[
										297897,
										297901
									],
									[
										297986,
										297990
									],
									[
										298074,
										298078
									],
									[
										298172,
										298176
									],
									[
										298259,
										298263
									],
									[
										298351,
										298355
									],
									[
										298436,
										298440
									],
									[
										298534,
										298538
									],
									[
										298621,
										298625
									],
									[
										298722,
										298726
									],
									[
										298810,
										298814
									],
									[
										298919,
										298923
									],
									[
										299006,
										299010
									],
									[
										299107,
										299111
									],
									[
										299192,
										299196
									],
									[
										299301,
										299305
									],
									[
										299388,
										299392
									],
									[
										299501,
										299505
									],
									[
										299589,
										299593
									],
									[
										299687,
										299691
									],
									[
										299773,
										299777
									],
									[
										299874,
										299878
									],
									[
										299961,
										299965
									],
									[
										300056,
										300060
									],
									[
										300141,
										300145
									],
									[
										300242,
										300246
									],
									[
										300329,
										300333
									],
									[
										300433,
										300437
									],
									[
										300531,
										300535
									],
									[
										300596,
										300600
									],
									[
										300673,
										300677
									],
									[
										300803,
										300807
									],
									[
										300891,
										300895
									],
									[
										300990,
										300994
									],
									[
										301076,
										301080
									],
									[
										301173,
										301177
									],
									[
										301261,
										301265
									],
									[
										301360,
										301364
									],
									[
										301449,
										301453
									],
									[
										301549,
										301553
									],
									[
										301648,
										301652
									],
									[
										301747,
										301751
									],
									[
										301842,
										301846
									],
									[
										301939,
										301943
									],
									[
										302038,
										302042
									],
									[
										302137,
										302141
									],
									[
										302238,
										302242
									],
									[
										302338,
										302342
									],
									[
										302448,
										302452
									],
									[
										302547,
										302551
									],
									[
										302651,
										302655
									],
									[
										302748,
										302752
									],
									[
										302858,
										302862
									],
									[
										302957,
										302961
									],
									[
										303070,
										303074
									],
									[
										303170,
										303174
									],
									[
										303291,
										303295
									],
									[
										303390,
										303394
									],
									[
										303503,
										303507
									],
									[
										303600,
										303604
									],
									[
										303721,
										303725
									],
									[
										303820,
										303824
									],
									[
										303945,
										303949
									],
									[
										304045,
										304049
									],
									[
										304155,
										304159
									],
									[
										304253,
										304257
									],
									[
										304366,
										304370
									],
									[
										304465,
										304469
									],
									[
										304572,
										304576
									],
									[
										304669,
										304673
									],
									[
										304782,
										304786
									],
									[
										304881,
										304885
									],
									[
										304997,
										305001
									],
									[
										305107,
										305111
									],
									[
										305184,
										305188
									],
									[
										305273,
										305277
									],
									[
										305451,
										305455
									],
									[
										305538,
										305542
									],
									[
										305622,
										305626
									],
									[
										305777,
										305781
									],
									[
										305876,
										305880
									],
									[
										305972,
										305976
									],
									[
										306172,
										306176
									],
									[
										306329,
										306333
									],
									[
										306598,
										306602
									],
									[
										306692,
										306696
									],
									[
										307078,
										307082
									],
									[
										307184,
										307188
									],
									[
										307361,
										307365
									],
									[
										307438,
										307442
									],
									[
										307574,
										307578
									],
									[
										307663,
										307667
									],
									[
										307853,
										307857
									],
									[
										307970,
										307974
									],
									[
										308136,
										308140
									],
									[
										308225,
										308229
									],
									[
										308324,
										308328
									],
									[
										308449,
										308453
									],
									[
										308586,
										308590
									],
									[
										308789,
										308793
									],
									[
										308890,
										308894
									],
									[
										309001,
										309005
									],
									[
										309138,
										309142
									],
									[
										309287,
										309291
									],
									[
										309594,
										309598
									],
									[
										309671,
										309675
									],
									[
										310044,
										310048
									],
									[
										310133,
										310137
									],
									[
										310423,
										310427
									],
									[
										310761,
										310765
									],
									[
										310950,
										310954
									],
									[
										311079,
										311083
									],
									[
										311271,
										311275
									],
									[
										311588,
										311592
									],
									[
										311665,
										311669
									],
									[
										311748,
										311752
									],
									[
										311837,
										311841
									],
									[
										311920,
										311924
									],
									[
										312021,
										312025
									],
									[
										312104,
										312108
									],
									[
										312217,
										312221
									],
									[
										312620,
										312624
									],
									[
										312709,
										312713
									],
									[
										312804,
										312808
									],
									[
										312905,
										312909
									],
									[
										313000,
										313004
									],
									[
										313113,
										313117
									],
									[
										313208,
										313212
									],
									[
										313333,
										313337
									],
									[
										313641,
										313645
									],
									[
										313742,
										313746
									],
									[
										313857,
										313861
									],
									[
										313970,
										313974
									],
									[
										314140,
										314144
									],
									[
										314153,
										314157
									],
									[
										314167,
										314171
									],
									[
										314182,
										314186
									],
									[
										314251,
										314255
									],
									[
										314269,
										314273
									],
									[
										314414,
										314418
									],
									[
										314427,
										314431
									],
									[
										314441,
										314445
									],
									[
										314456,
										314460
									],
									[
										314537,
										314541
									],
									[
										314555,
										314559
									],
									[
										314793,
										314797
									],
									[
										314951,
										314955
									],
									[
										315059,
										315063
									],
									[
										315224,
										315228
									],
									[
										315394,
										315398
									],
									[
										315514,
										315518
									],
									[
										315709,
										315713
									],
									[
										315725,
										315729
									],
									[
										315851,
										315855
									],
									[
										315867,
										315871
									],
									[
										316073,
										316077
									],
									[
										316342,
										316346
									],
									[
										316357,
										316361
									],
									[
										316472,
										316476
									],
									[
										316487,
										316491
									],
									[
										316639,
										316643
									],
									[
										316863,
										316867
									],
									[
										316908,
										316912
									],
									[
										316978,
										316982
									],
									[
										316993,
										316997
									],
									[
										317012,
										317016
									],
									[
										317114,
										317118
									],
									[
										317129,
										317133
									],
									[
										317148,
										317152
									],
									[
										317250,
										317254
									],
									[
										317265,
										317269
									],
									[
										317284,
										317288
									],
									[
										317404,
										317408
									],
									[
										317419,
										317423
									],
									[
										317438,
										317442
									],
									[
										317556,
										317560
									],
									[
										317571,
										317575
									],
									[
										317590,
										317594
									],
									[
										317668,
										317672
									],
									[
										317873,
										317877
									],
									[
										318178,
										318182
									],
									[
										318193,
										318197
									],
									[
										318320,
										318324
									],
									[
										318335,
										318339
									],
									[
										318511,
										318515
									],
									[
										318761,
										318765
									],
									[
										318816,
										318820
									],
									[
										318898,
										318902
									],
									[
										318913,
										318917
									],
									[
										318932,
										318936
									],
									[
										319046,
										319050
									],
									[
										319061,
										319065
									],
									[
										319080,
										319084
									],
									[
										319194,
										319198
									],
									[
										319209,
										319213
									],
									[
										319228,
										319232
									],
									[
										319360,
										319364
									],
									[
										319375,
										319379
									],
									[
										319394,
										319398
									],
									[
										319524,
										319528
									],
									[
										319539,
										319543
									],
									[
										319558,
										319562
									],
									[
										319648,
										319652
									],
									[
										319937,
										319941
									],
									[
										320175,
										320179
									],
									[
										320365,
										320369
									],
									[
										320397,
										320401
									],
									[
										320568,
										320572
									],
									[
										320600,
										320604
									],
									[
										320816,
										320820
									],
									[
										320915,
										320919
									],
									[
										321066,
										321070
									],
									[
										321177,
										321181
									],
									[
										321379,
										321383
									],
									[
										321506,
										321510
									],
									[
										321683,
										321687
									],
									[
										321822,
										321826
									],
									[
										322049,
										322053
									],
									[
										322064,
										322068
									],
									[
										322150,
										322154
									],
									[
										322304,
										322308
									],
									[
										322319,
										322323
									],
									[
										322417,
										322421
									],
									[
										322622,
										322626
									],
									[
										322746,
										322750
									],
									[
										322856,
										322860
									],
									[
										322980,
										322984
									],
									[
										323109,
										323113
									],
									[
										323221,
										323225
									],
									[
										323343,
										323347
									],
									[
										323465,
										323469
									],
									[
										323573,
										323577
									],
									[
										323695,
										323699
									],
									[
										323822,
										323826
									],
									[
										323932,
										323936
									],
									[
										324059,
										324063
									],
									[
										324165,
										324169
									],
									[
										324269,
										324273
									],
									[
										324373,
										324377
									],
									[
										324528,
										324532
									],
									[
										324664,
										324668
									],
									[
										324786,
										324790
									],
									[
										324922,
										324926
									],
									[
										325063,
										325067
									],
									[
										325187,
										325191
									],
									[
										325321,
										325325
									],
									[
										325455,
										325459
									],
									[
										325575,
										325579
									],
									[
										325709,
										325713
									],
									[
										325848,
										325852
									],
									[
										325970,
										325974
									],
									[
										326109,
										326113
									],
									[
										326227,
										326231
									],
									[
										326343,
										326347
									],
									[
										326459,
										326463
									],
									[
										326659,
										326663
									],
									[
										326740,
										326744
									],
									[
										326755,
										326759
									],
									[
										326861,
										326865
									],
									[
										326876,
										326880
									],
									[
										326994,
										326998
									],
									[
										327009,
										327013
									],
									[
										327057,
										327061
									],
									[
										327174,
										327178
									],
									[
										327267,
										327271
									],
									[
										327282,
										327286
									],
									[
										327400,
										327404
									],
									[
										327415,
										327419
									],
									[
										327545,
										327549
									],
									[
										327560,
										327564
									],
									[
										327608,
										327612
									],
									[
										327792,
										327796
									],
									[
										327939,
										327943
									],
									[
										328244,
										328248
									],
									[
										328363,
										328367
									],
									[
										328460,
										328464
									],
									[
										328907,
										328911
									],
									[
										329038,
										329042
									],
									[
										329147,
										329151
									],
									[
										329332,
										329336
									],
									[
										329448,
										329452
									],
									[
										329476,
										329480
									],
									[
										329637,
										329641
									],
									[
										329765,
										329769
									],
									[
										329793,
										329797
									],
									[
										330000,
										330004
									],
									[
										330015,
										330019
									],
									[
										330149,
										330153
									],
									[
										330164,
										330168
									],
									[
										330392,
										330396
									],
									[
										330454,
										330458
									],
									[
										330632,
										330636
									],
									[
										330694,
										330698
									],
									[
										330922,
										330926
									],
									[
										331065,
										331069
									],
									[
										331207,
										331211
									],
									[
										331401,
										331405
									],
									[
										331556,
										331560
									],
									[
										331710,
										331714
									],
									[
										332029,
										332033
									],
									[
										332129,
										332133
									],
									[
										332220,
										332224
									],
									[
										332299,
										332303
									],
									[
										332385,
										332389
									],
									[
										332651,
										332655
									],
									[
										332763,
										332767
									],
									[
										332866,
										332870
									],
									[
										332957,
										332961
									],
									[
										333055,
										333059
									],
									[
										333250,
										333254
									],
									[
										333428,
										333432
									],
									[
										333497,
										333501
									],
									[
										333626,
										333630
									],
									[
										333736,
										333740
									],
									[
										333895,
										333899
									],
									[
										334218,
										334222
									],
									[
										334500,
										334504
									],
									[
										334629,
										334633
									],
									[
										334831,
										334835
									],
									[
										334912,
										334916
									],
									[
										335053,
										335057
									],
									[
										335175,
										335179
									],
									[
										335346,
										335350
									],
									[
										335705,
										335709
									],
									[
										336011,
										336015
									],
									[
										336188,
										336192
									],
									[
										336203,
										336207
									],
									[
										336290,
										336294
									],
									[
										336305,
										336309
									],
									[
										336395,
										336399
									],
									[
										336410,
										336414
									],
									[
										336494,
										336498
									],
									[
										336509,
										336513
									],
									[
										336842,
										336846
									],
									[
										336857,
										336861
									],
									[
										336956,
										336960
									],
									[
										336971,
										336975
									],
									[
										337073,
										337077
									],
									[
										337088,
										337092
									],
									[
										337184,
										337188
									],
									[
										337199,
										337203
									],
									[
										337605,
										337609
									],
									[
										337800,
										337804
									],
									[
										338133,
										338137
									],
									[
										338146,
										338150
									],
									[
										338189,
										338193
									],
									[
										338387,
										338391
									],
									[
										338400,
										338404
									],
									[
										338430,
										338434
									],
									[
										338460,
										338464
									],
									[
										338490,
										338494
									],
									[
										338584,
										338588
									],
									[
										338678,
										338682
									],
									[
										338774,
										338778
									],
									[
										338875,
										338879
									],
									[
										339115,
										339119
									],
									[
										339128,
										339132
									],
									[
										339171,
										339175
									],
									[
										339381,
										339385
									],
									[
										339394,
										339398
									],
									[
										339424,
										339428
									],
									[
										339454,
										339458
									],
									[
										339484,
										339488
									],
									[
										339590,
										339594
									],
									[
										339696,
										339700
									],
									[
										339804,
										339808
									],
									[
										339917,
										339921
									],
									[
										340120,
										340124
									],
									[
										340255,
										340259
									],
									[
										340385,
										340389
									],
									[
										340496,
										340500
									],
									[
										340657,
										340661
									],
									[
										340818,
										340822
									],
									[
										340957,
										340961
									],
									[
										341116,
										341120
									],
									[
										341258,
										341262
									],
									[
										341381,
										341385
									],
									[
										341554,
										341558
									],
									[
										341727,
										341731
									],
									[
										341981,
										341985
									],
									[
										342059,
										342063
									],
									[
										342138,
										342142
									],
									[
										342216,
										342220
									],
									[
										342302,
										342306
									],
									[
										342364,
										342368
									],
									[
										342474,
										342478
									],
									[
										342587,
										342591
									],
									[
										342681,
										342685
									],
									[
										342782,
										342786
									],
									[
										342880,
										342884
									],
									[
										342978,
										342982
									],
									[
										343131,
										343135
									],
									[
										343282,
										343286
									],
									[
										343341,
										343345
									],
									[
										343410,
										343414
									],
									[
										343497,
										343501
									],
									[
										343585,
										343589
									],
									[
										343672,
										343676
									],
									[
										343773,
										343777
									],
									[
										343788,
										343792
									],
									[
										343887,
										343891
									],
									[
										343902,
										343906
									],
									[
										344008,
										344012
									],
									[
										344023,
										344027
									],
									[
										344120,
										344124
									],
									[
										344135,
										344139
									],
									[
										344236,
										344240
									],
									[
										344264,
										344268
									],
									[
										344316,
										344320
									],
									[
										344331,
										344335
									],
									[
										344432,
										344436
									],
									[
										344460,
										344464
									],
									[
										344528,
										344532
									],
									[
										344543,
										344547
									],
									[
										344647,
										344651
									],
									[
										344705,
										344709
									],
									[
										344720,
										344724
									],
									[
										344824,
										344828
									],
									[
										344913,
										344917
									],
									[
										344928,
										344932
									],
									[
										345033,
										345037
									],
									[
										345061,
										345065
									],
									[
										345201,
										345205
									],
									[
										345229,
										345233
									],
									[
										345388,
										345392
									],
									[
										345537,
										345541
									],
									[
										345711,
										345715
									],
									[
										345739,
										345743
									],
									[
										345754,
										345758
									],
									[
										345856,
										345860
									],
									[
										345871,
										345875
									],
									[
										345975,
										345979
									],
									[
										345990,
										345994
									],
									[
										346097,
										346101
									],
									[
										346125,
										346129
									],
									[
										346234,
										346238
									],
									[
										346262,
										346266
									],
									[
										346357,
										346361
									],
									[
										346385,
										346389
									],
									[
										346468,
										346472
									],
									[
										346483,
										346487
									],
									[
										346587,
										346591
									],
									[
										346706,
										346710
									],
									[
										346721,
										346725
									],
									[
										346829,
										346833
									],
									[
										347005,
										347009
									],
									[
										347021,
										347025
									],
									[
										347036,
										347040
									],
									[
										347120,
										347124
									],
									[
										347136,
										347140
									],
									[
										347151,
										347155
									],
									[
										347242,
										347246
									],
									[
										347258,
										347262
									],
									[
										347273,
										347277
									],
									[
										347355,
										347359
									],
									[
										347371,
										347375
									],
									[
										347386,
										347390
									],
									[
										347472,
										347476
									],
									[
										347488,
										347492
									],
									[
										347516,
										347520
									],
									[
										347568,
										347572
									],
									[
										347583,
										347587
									],
									[
										347669,
										347673
									],
									[
										347685,
										347689
									],
									[
										347713,
										347717
									],
									[
										347781,
										347785
									],
									[
										347796,
										347800
									],
									[
										347885,
										347889
									],
									[
										347901,
										347905
									],
									[
										347959,
										347963
									],
									[
										347974,
										347978
									],
									[
										348063,
										348067
									],
									[
										348079,
										348083
									],
									[
										348168,
										348172
									],
									[
										348183,
										348187
									],
									[
										348273,
										348277
									],
									[
										348289,
										348293
									],
									[
										348317,
										348321
									],
									[
										348442,
										348446
									],
									[
										348458,
										348462
									],
									[
										348486,
										348490
									],
									[
										348630,
										348634
									],
									[
										348646,
										348650
									],
									[
										348780,
										348784
									],
									[
										348796,
										348800
									],
									[
										348955,
										348959
									],
									[
										348971,
										348975
									],
									[
										348999,
										349003
									],
									[
										349014,
										349018
									],
									[
										349101,
										349105
									],
									[
										349117,
										349121
									],
									[
										349132,
										349136
									],
									[
										349221,
										349225
									],
									[
										349237,
										349241
									],
									[
										349252,
										349256
									],
									[
										349344,
										349348
									],
									[
										349360,
										349364
									],
									[
										349388,
										349392
									],
									[
										349482,
										349486
									],
									[
										349498,
										349502
									],
									[
										349526,
										349530
									],
									[
										349606,
										349610
									],
									[
										349622,
										349626
									],
									[
										349650,
										349654
									],
									[
										349733,
										349737
									],
									[
										349748,
										349752
									],
									[
										349837,
										349841
									],
									[
										349853,
										349857
									],
									[
										349972,
										349976
									],
									[
										349987,
										349991
									],
									[
										350080,
										350084
									],
									[
										350096,
										350100
									],
									[
										350270,
										350274
									],
									[
										350286,
										350290
									],
									[
										350377,
										350381
									],
									[
										350466,
										350470
									],
									[
										350550,
										350554
									],
									[
										350578,
										350582
									],
									[
										350678,
										350682
									],
									[
										350694,
										350698
									],
									[
										350709,
										350713
									],
									[
										350787,
										350791
									],
									[
										350803,
										350807
									],
									[
										350818,
										350822
									],
									[
										350903,
										350907
									],
									[
										350919,
										350923
									],
									[
										350934,
										350938
									],
									[
										351010,
										351014
									],
									[
										351026,
										351030
									],
									[
										351041,
										351045
									],
									[
										351124,
										351128
									],
									[
										351140,
										351144
									],
									[
										351154,
										351158
									],
									[
										351233,
										351237
									],
									[
										351249,
										351253
									],
									[
										351263,
										351267
									],
									[
										351349,
										351353
									],
									[
										351365,
										351369
									],
									[
										351379,
										351383
									],
									[
										351457,
										351461
									],
									[
										351473,
										351477
									],
									[
										351487,
										351491
									],
									[
										351572,
										351576
									],
									[
										351588,
										351592
									],
									[
										351602,
										351606
									],
									[
										351678,
										351682
									],
									[
										351694,
										351698
									],
									[
										351708,
										351712
									],
									[
										351795,
										351799
									],
									[
										351811,
										351815
									],
									[
										351826,
										351830
									],
									[
										351909,
										351913
									],
									[
										351925,
										351929
									],
									[
										351940,
										351944
									],
									[
										352021,
										352025
									],
									[
										352037,
										352041
									],
									[
										352051,
										352055
									],
									[
										352135,
										352139
									],
									[
										352151,
										352155
									],
									[
										352165,
										352169
									],
									[
										352248,
										352252
									],
									[
										352264,
										352268
									],
									[
										352278,
										352282
									],
									[
										352359,
										352363
									],
									[
										352456,
										352460
									],
									[
										352555,
										352559
									],
									[
										352675,
										352679
									],
									[
										352703,
										352707
									],
									[
										352901,
										352905
									],
									[
										352929,
										352933
									],
									[
										353112,
										353116
									],
									[
										353140,
										353144
									],
									[
										353310,
										353314
									],
									[
										353429,
										353433
									],
									[
										353562,
										353566
									],
									[
										353651,
										353655
									],
									[
										353784,
										353788
									],
									[
										353842,
										353846
									],
									[
										353973,
										353977
									],
									[
										354073,
										354077
									],
									[
										354089,
										354093
									],
									[
										354117,
										354121
									],
									[
										354300,
										354304
									],
									[
										354316,
										354320
									],
									[
										354344,
										354348
									],
									[
										354512,
										354516
									],
									[
										354528,
										354532
									],
									[
										354556,
										354560
									],
									[
										354711,
										354715
									],
									[
										354727,
										354731
									],
									[
										354846,
										354850
									],
									[
										354964,
										354968
									],
									[
										354980,
										354984
									],
									[
										355069,
										355073
									],
									[
										355187,
										355191
									],
									[
										355203,
										355207
									],
									[
										355261,
										355265
									],
									[
										355377,
										355381
									],
									[
										355393,
										355397
									],
									[
										355502,
										355506
									],
									[
										355517,
										355521
									],
									[
										355647,
										355651
									],
									[
										355805,
										355809
									],
									[
										355938,
										355942
									],
									[
										356092,
										356096
									],
									[
										356227,
										356231
									],
									[
										356357,
										356361
									],
									[
										356472,
										356476
									],
									[
										356487,
										356491
									],
									[
										356589,
										356593
									],
									[
										356604,
										356608
									],
									[
										356716,
										356720
									],
									[
										356864,
										356868
									],
									[
										357011,
										357015
									],
									[
										357144,
										357148
									],
									[
										357291,
										357295
									],
									[
										357443,
										357447
									],
									[
										357578,
										357582
									],
									[
										357728,
										357732
									],
									[
										357857,
										357861
									],
									[
										357973,
										357977
									],
									[
										357988,
										357992
									],
									[
										358095,
										358099
									],
									[
										358110,
										358114
									],
									[
										358220,
										358224
									],
									[
										358235,
										358239
									],
									[
										358339,
										358343
									],
									[
										358354,
										358358
									],
									[
										358440,
										358444
									],
									[
										358456,
										358460
									],
									[
										358471,
										358475
									],
									[
										358563,
										358567
									],
									[
										358579,
										358583
									],
									[
										358594,
										358598
									],
									[
										358689,
										358693
									],
									[
										358705,
										358709
									],
									[
										358720,
										358724
									],
									[
										358809,
										358813
									],
									[
										358825,
										358829
									],
									[
										358840,
										358844
									],
									[
										359428,
										359432
									],
									[
										359633,
										359637
									],
									[
										360195,
										360199
									],
									[
										360297,
										360301
									],
									[
										360513,
										360517
									],
									[
										360528,
										360532
									],
									[
										360616,
										360620
									],
									[
										360632,
										360636
									],
									[
										360647,
										360651
									],
									[
										360766,
										360770
									],
									[
										360908,
										360912
									],
									[
										360952,
										360956
									],
									[
										361022,
										361026
									],
									[
										361118,
										361122
									],
									[
										361137,
										361141
									],
									[
										361265,
										361269
									],
									[
										361284,
										361288
									],
									[
										361412,
										361416
									],
									[
										361431,
										361435
									],
									[
										361577,
										361581
									],
									[
										361596,
										361600
									],
									[
										361740,
										361744
									],
									[
										361759,
										361763
									],
									[
										361861,
										361865
									],
									[
										361934,
										361938
									],
									[
										361950,
										361954
									],
									[
										362042,
										362046
									],
									[
										362150,
										362154
									],
									[
										362241,
										362245
									],
									[
										362335,
										362339
									],
									[
										362473,
										362477
									],
									[
										362674,
										362678
									],
									[
										362807,
										362811
									],
									[
										362939,
										362943
									],
									[
										363083,
										363087
									],
									[
										363131,
										363135
									],
									[
										363215,
										363219
									],
									[
										363307,
										363311
									],
									[
										363323,
										363327
									],
									[
										363801,
										363805
									],
									[
										363891,
										363895
									],
									[
										363982,
										363986
									],
									[
										364072,
										364076
									],
									[
										364170,
										364174
									],
									[
										364244,
										364248
									],
									[
										364366,
										364370
									],
									[
										364491,
										364495
									],
									[
										364597,
										364601
									],
									[
										364710,
										364714
									],
									[
										364820,
										364824
									],
									[
										364930,
										364934
									],
									[
										365095,
										365099
									],
									[
										365258,
										365262
									],
									[
										365329,
										365333
									],
									[
										365410,
										365414
									],
									[
										365509,
										365513
									],
									[
										365609,
										365613
									],
									[
										365708,
										365712
									],
									[
										365821,
										365825
									],
									[
										365836,
										365840
									],
									[
										365947,
										365951
									],
									[
										365962,
										365966
									],
									[
										366080,
										366084
									],
									[
										366095,
										366099
									],
									[
										366204,
										366208
									],
									[
										366219,
										366223
									],
									[
										366332,
										366336
									],
									[
										366360,
										366364
									],
									[
										366412,
										366416
									],
									[
										366427,
										366431
									],
									[
										366540,
										366544
									],
									[
										366568,
										366572
									],
									[
										366636,
										366640
									],
									[
										366651,
										366655
									],
									[
										366767,
										366771
									],
									[
										366825,
										366829
									],
									[
										366840,
										366844
									],
									[
										366956,
										366960
									],
									[
										367045,
										367049
									],
									[
										367060,
										367064
									],
									[
										367177,
										367181
									],
									[
										367205,
										367209
									],
									[
										367357,
										367361
									],
									[
										367385,
										367389
									],
									[
										367556,
										367560
									],
									[
										367717,
										367721
									],
									[
										367903,
										367907
									],
									[
										367931,
										367935
									],
									[
										367946,
										367950
									],
									[
										368060,
										368064
									],
									[
										368075,
										368079
									],
									[
										368191,
										368195
									],
									[
										368206,
										368210
									],
									[
										368325,
										368329
									],
									[
										368353,
										368357
									],
									[
										368474,
										368478
									],
									[
										368502,
										368506
									],
									[
										368609,
										368613
									],
									[
										368637,
										368641
									],
									[
										368720,
										368724
									],
									[
										368735,
										368739
									],
									[
										368851,
										368855
									],
									[
										368970,
										368974
									],
									[
										368985,
										368989
									],
									[
										369105,
										369109
									],
									[
										369293,
										369297
									],
									[
										369309,
										369313
									],
									[
										369324,
										369328
									],
									[
										369420,
										369424
									],
									[
										369436,
										369440
									],
									[
										369451,
										369455
									],
									[
										369554,
										369558
									],
									[
										369570,
										369574
									],
									[
										369585,
										369589
									],
									[
										369679,
										369683
									],
									[
										369695,
										369699
									],
									[
										369710,
										369714
									],
									[
										369808,
										369812
									],
									[
										369824,
										369828
									],
									[
										369852,
										369856
									],
									[
										369904,
										369908
									],
									[
										369919,
										369923
									],
									[
										370017,
										370021
									],
									[
										370033,
										370037
									],
									[
										370061,
										370065
									],
									[
										370129,
										370133
									],
									[
										370144,
										370148
									],
									[
										370245,
										370249
									],
									[
										370261,
										370265
									],
									[
										370319,
										370323
									],
									[
										370334,
										370338
									],
									[
										370435,
										370439
									],
									[
										370451,
										370455
									],
									[
										370540,
										370544
									],
									[
										370555,
										370559
									],
									[
										370657,
										370661
									],
									[
										370673,
										370677
									],
									[
										370701,
										370705
									],
									[
										370838,
										370842
									],
									[
										370854,
										370858
									],
									[
										370882,
										370886
									],
									[
										371038,
										371042
									],
									[
										371054,
										371058
									],
									[
										371200,
										371204
									],
									[
										371216,
										371220
									],
									[
										371387,
										371391
									],
									[
										371403,
										371407
									],
									[
										371431,
										371435
									],
									[
										371446,
										371450
									],
									[
										371545,
										371549
									],
									[
										371561,
										371565
									],
									[
										371576,
										371580
									],
									[
										371677,
										371681
									],
									[
										371693,
										371697
									],
									[
										371708,
										371712
									],
									[
										371812,
										371816
									],
									[
										371828,
										371832
									],
									[
										371856,
										371860
									],
									[
										371962,
										371966
									],
									[
										371978,
										371982
									],
									[
										372006,
										372010
									],
									[
										372098,
										372102
									],
									[
										372114,
										372118
									],
									[
										372142,
										372146
									],
									[
										372225,
										372229
									],
									[
										372240,
										372244
									],
									[
										372341,
										372345
									],
									[
										372357,
										372361
									],
									[
										372476,
										372480
									],
									[
										372491,
										372495
									],
									[
										372596,
										372600
									],
									[
										372612,
										372616
									],
									[
										372798,
										372802
									],
									[
										372814,
										372818
									],
									[
										372917,
										372921
									],
									[
										373018,
										373022
									],
									[
										373114,
										373118
									],
									[
										373142,
										373146
									],
									[
										373254,
										373258
									],
									[
										373270,
										373274
									],
									[
										373285,
										373289
									],
									[
										373375,
										373379
									],
									[
										373391,
										373395
									],
									[
										373406,
										373410
									],
									[
										373503,
										373507
									],
									[
										373519,
										373523
									],
									[
										373534,
										373538
									],
									[
										373622,
										373626
									],
									[
										373638,
										373642
									],
									[
										373653,
										373657
									],
									[
										373748,
										373752
									],
									[
										373764,
										373768
									],
									[
										373778,
										373782
									],
									[
										373869,
										373873
									],
									[
										373885,
										373889
									],
									[
										373899,
										373903
									],
									[
										373997,
										374001
									],
									[
										374013,
										374017
									],
									[
										374027,
										374031
									],
									[
										374117,
										374121
									],
									[
										374133,
										374137
									],
									[
										374147,
										374151
									],
									[
										374244,
										374248
									],
									[
										374260,
										374264
									],
									[
										374274,
										374278
									],
									[
										374362,
										374366
									],
									[
										374378,
										374382
									],
									[
										374392,
										374396
									],
									[
										374491,
										374495
									],
									[
										374507,
										374511
									],
									[
										374522,
										374526
									],
									[
										374617,
										374621
									],
									[
										374633,
										374637
									],
									[
										374648,
										374652
									],
									[
										374741,
										374745
									],
									[
										374757,
										374761
									],
									[
										374771,
										374775
									],
									[
										374867,
										374871
									],
									[
										374883,
										374887
									],
									[
										374897,
										374901
									],
									[
										374992,
										374996
									],
									[
										375008,
										375012
									],
									[
										375022,
										375026
									],
									[
										375115,
										375119
									],
									[
										375224,
										375228
									],
									[
										375335,
										375339
									],
									[
										375467,
										375471
									],
									[
										375495,
										375499
									],
									[
										375705,
										375709
									],
									[
										375733,
										375737
									],
									[
										375928,
										375932
									],
									[
										375956,
										375960
									],
									[
										376138,
										376142
									],
									[
										376257,
										376261
									],
									[
										376402,
										376406
									],
									[
										376491,
										376495
									],
									[
										376636,
										376640
									],
									[
										376694,
										376698
									],
									[
										376837,
										376841
									],
									[
										376949,
										376953
									],
									[
										376965,
										376969
									],
									[
										376993,
										376997
									],
									[
										377188,
										377192
									],
									[
										377204,
										377208
									],
									[
										377232,
										377236
									],
									[
										377412,
										377416
									],
									[
										377428,
										377432
									],
									[
										377456,
										377460
									],
									[
										377623,
										377627
									],
									[
										377639,
										377643
									],
									[
										377758,
										377762
									],
									[
										377888,
										377892
									],
									[
										377904,
										377908
									],
									[
										377993,
										377997
									],
									[
										378123,
										378127
									],
									[
										378139,
										378143
									],
									[
										378197,
										378201
									],
									[
										378325,
										378329
									],
									[
										378341,
										378345
									],
									[
										378462,
										378466
									],
									[
										378477,
										378481
									],
									[
										378619,
										378623
									],
									[
										378789,
										378793
									],
									[
										378934,
										378938
									],
									[
										379100,
										379104
									],
									[
										379247,
										379251
									],
									[
										379389,
										379393
									],
									[
										379516,
										379520
									],
									[
										379531,
										379535
									],
									[
										379645,
										379649
									],
									[
										379660,
										379664
									],
									[
										379784,
										379788
									],
									[
										379944,
										379948
									],
									[
										380103,
										380107
									],
									[
										380248,
										380252
									],
									[
										380407,
										380411
									],
									[
										380571,
										380575
									],
									[
										380718,
										380722
									],
									[
										380880,
										380884
									],
									[
										381021,
										381025
									],
									[
										381149,
										381153
									],
									[
										381164,
										381168
									],
									[
										381283,
										381287
									],
									[
										381298,
										381302
									],
									[
										381420,
										381424
									],
									[
										381435,
										381439
									],
									[
										381551,
										381555
									],
									[
										381566,
										381570
									],
									[
										381664,
										381668
									],
									[
										381680,
										381684
									],
									[
										381695,
										381699
									],
									[
										381799,
										381803
									],
									[
										381815,
										381819
									],
									[
										381830,
										381834
									],
									[
										381937,
										381941
									],
									[
										381953,
										381957
									],
									[
										381968,
										381972
									],
									[
										382069,
										382073
									],
									[
										382085,
										382089
									],
									[
										382100,
										382104
									],
									[
										382748,
										382752
									],
									[
										382977,
										382981
									],
									[
										383599,
										383603
									],
									[
										383713,
										383717
									],
									[
										383953,
										383957
									],
									[
										383968,
										383972
									],
									[
										384068,
										384072
									],
									[
										384084,
										384088
									],
									[
										384099,
										384103
									],
									[
										384230,
										384234
									],
									[
										384384,
										384388
									],
									[
										384430,
										384434
									],
									[
										384510,
										384514
									],
									[
										384618,
										384622
									],
									[
										384637,
										384641
									],
									[
										384777,
										384781
									],
									[
										384796,
										384800
									],
									[
										384936,
										384940
									],
									[
										384955,
										384959
									],
									[
										385113,
										385117
									],
									[
										385132,
										385136
									],
									[
										385288,
										385292
									],
									[
										385307,
										385311
									],
									[
										385421,
										385425
									],
									[
										385506,
										385510
									],
									[
										385522,
										385526
									],
									[
										385626,
										385630
									],
									[
										385746,
										385750
									],
									[
										385849,
										385853
									],
									[
										385955,
										385959
									],
									[
										386105,
										386109
									],
									[
										386318,
										386322
									],
									[
										386463,
										386467
									],
									[
										386607,
										386611
									],
									[
										386763,
										386767
									],
									[
										386811,
										386815
									],
									[
										386907,
										386911
									],
									[
										387011,
										387015
									],
									[
										387027,
										387031
									],
									[
										387429,
										387433
									],
									[
										387604,
										387608
									],
									[
										387744,
										387748
									],
									[
										387943,
										387947
									],
									[
										388145,
										388149
									],
									[
										388530,
										388534
									],
									[
										388663,
										388667
									],
									[
										389108,
										389112
									],
									[
										389534,
										389538
									],
									[
										389943,
										389947
									],
									[
										390587,
										390591
									],
									[
										391056,
										391060
									],
									[
										391311,
										391315
									],
									[
										391511,
										391515
									],
									[
										391683,
										391687
									],
									[
										391800,
										391804
									],
									[
										391987,
										391991
									],
									[
										391999,
										392003
									],
									[
										392083,
										392087
									],
									[
										392098,
										392102
									],
									[
										392113,
										392117
									],
									[
										392130,
										392134
									],
									[
										392215,
										392219
									],
									[
										392304,
										392308
									],
									[
										392320,
										392324
									],
									[
										392455,
										392459
									],
									[
										392467,
										392471
									],
									[
										392563,
										392567
									],
									[
										392578,
										392582
									],
									[
										392593,
										392597
									],
									[
										392610,
										392614
									],
									[
										392707,
										392711
									],
									[
										392808,
										392812
									],
									[
										392824,
										392828
									],
									[
										392999,
										393003
									],
									[
										393114,
										393118
									],
									[
										393129,
										393133
									],
									[
										393263,
										393267
									],
									[
										393390,
										393394
									],
									[
										393405,
										393409
									],
									[
										393625,
										393629
									],
									[
										393710,
										393714
									],
									[
										393802,
										393806
									],
									[
										394472,
										394476
									],
									[
										394569,
										394573
									],
									[
										394673,
										394677
									],
									[
										395127,
										395131
									],
									[
										395167,
										395171
									],
									[
										395199,
										395203
									],
									[
										395229,
										395233
									],
									[
										395271,
										395275
									],
									[
										395303,
										395307
									],
									[
										395376,
										395380
									],
									[
										395408,
										395412
									],
									[
										395495,
										395499
									],
									[
										395545,
										395549
									],
									[
										395577,
										395581
									],
									[
										395609,
										395613
									],
									[
										395661,
										395665
									],
									[
										395693,
										395697
									],
									[
										395778,
										395782
									],
									[
										395810,
										395814
									],
									[
										396089,
										396093
									],
									[
										396236,
										396240
									],
									[
										396257,
										396261
									],
									[
										396444,
										396448
									],
									[
										396573,
										396577
									],
									[
										396702,
										396706
									],
									[
										396833,
										396837
									],
									[
										396880,
										396884
									],
									[
										397096,
										397100
									],
									[
										397237,
										397241
									],
									[
										397380,
										397384
									],
									[
										397667,
										397671
									],
									[
										397826,
										397830
									],
									[
										397847,
										397851
									],
									[
										398058,
										398062
									],
									[
										398199,
										398203
									],
									[
										398340,
										398344
									],
									[
										398483,
										398487
									],
									[
										398532,
										398536
									],
									[
										398770,
										398774
									],
									[
										398923,
										398927
									],
									[
										399078,
										399082
									],
									[
										399284,
										399288
									],
									[
										399370,
										399374
									],
									[
										399606,
										399610
									],
									[
										399692,
										399696
									],
									[
										399975,
										399979
									],
									[
										400126,
										400130
									],
									[
										400266,
										400270
									],
									[
										400441,
										400445
									],
									[
										400638,
										400642
									],
									[
										400653,
										400657
									],
									[
										400724,
										400728
									],
									[
										400795,
										400799
									],
									[
										400883,
										400887
									],
									[
										401108,
										401112
									],
									[
										401123,
										401127
									],
									[
										401236,
										401240
									],
									[
										401321,
										401325
									],
									[
										401781,
										401785
									],
									[
										401796,
										401800
									],
									[
										401879,
										401883
									],
									[
										401962,
										401966
									],
									[
										402062,
										402066
									],
									[
										402323,
										402327
									],
									[
										402338,
										402342
									],
									[
										402463,
										402467
									],
									[
										402560,
										402564
									],
									[
										402952,
										402956
									],
									[
										403079,
										403083
									],
									[
										403155,
										403159
									],
									[
										403242,
										403246
									],
									[
										403317,
										403321
									],
									[
										403407,
										403411
									],
									[
										403568,
										403572
									],
									[
										403646,
										403650
									],
									[
										403754,
										403758
									],
									[
										403885,
										403889
									],
									[
										403966,
										403970
									],
									[
										404121,
										404125
									],
									[
										404260,
										404264
									],
									[
										404348,
										404352
									],
									[
										404447,
										404451
									],
									[
										404534,
										404538
									],
									[
										404636,
										404640
									],
									[
										404821,
										404825
									],
									[
										404911,
										404915
									],
									[
										405031,
										405035
									],
									[
										405174,
										405178
									],
									[
										405267,
										405271
									],
									[
										405558,
										405562
									],
									[
										405837,
										405841
									],
									[
										406222,
										406226
									],
									[
										406342,
										406346
									],
									[
										406495,
										406499
									],
									[
										406966,
										406970
									],
									[
										407098,
										407102
									],
									[
										407263,
										407267
									],
									[
										407477,
										407481
									],
									[
										407596,
										407600
									],
									[
										407758,
										407762
									],
									[
										407889,
										407893
									],
									[
										408213,
										408217
									],
									[
										408317,
										408321
									],
									[
										408432,
										408436
									],
									[
										408886,
										408890
									],
									[
										409002,
										409006
									],
									[
										409129,
										409133
									],
									[
										409309,
										409313
									],
									[
										409402,
										409406
									],
									[
										409501,
										409505
									],
									[
										409630,
										409634
									],
									[
										409735,
										409739
									],
									[
										409846,
										409850
									],
									[
										410036,
										410040
									],
									[
										410053,
										410057
									],
									[
										410177,
										410181
									],
									[
										410194,
										410198
									],
									[
										410444,
										410448
									],
									[
										410639,
										410643
									],
									[
										410656,
										410660
									],
									[
										410792,
										410796
									],
									[
										410809,
										410813
									],
									[
										411083,
										411087
									],
									[
										411443,
										411447
									],
									[
										411604,
										411608
									],
									[
										411908,
										411912
									],
									[
										412050,
										412054
									],
									[
										412562,
										412566
									],
									[
										412735,
										412739
									],
									[
										413075,
										413079
									],
									[
										413229,
										413233
									],
									[
										413737,
										413741
									],
									[
										413749,
										413753
									],
									[
										413881,
										413885
									],
									[
										414113,
										414117
									],
									[
										414303,
										414307
									],
									[
										414363,
										414367
									],
									[
										414395,
										414399
									],
									[
										414452,
										414456
									],
									[
										414648,
										414652
									],
									[
										414741,
										414745
									],
									[
										414771,
										414775
									],
									[
										414801,
										414805
									],
									[
										414974,
										414978
									],
									[
										415173,
										415177
									],
									[
										415474,
										415478
									],
									[
										415755,
										415759
									],
									[
										415848,
										415852
									],
									[
										415947,
										415951
									],
									[
										416042,
										416046
									],
									[
										416254,
										416258
									],
									[
										416337,
										416341
									],
									[
										416353,
										416357
									],
									[
										416428,
										416432
									],
									[
										416444,
										416448
									],
									[
										416525,
										416529
									],
									[
										416540,
										416544
									],
									[
										416555,
										416559
									],
									[
										416572,
										416576
									],
									[
										416647,
										416651
									],
									[
										416699,
										416703
									],
									[
										416774,
										416778
									],
									[
										416862,
										416866
									],
									[
										416913,
										416917
									],
									[
										417389,
										417393
									],
									[
										417417,
										417421
									],
									[
										417595,
										417599
									],
									[
										417684,
										417688
									],
									[
										417800,
										417804
									],
									[
										417828,
										417832
									],
									[
										417979,
										417983
									],
									[
										418213,
										418217
									],
									[
										418282,
										418286
									],
									[
										418730,
										418734
									],
									[
										419052,
										419056
									],
									[
										419208,
										419212
									],
									[
										419309,
										419313
									],
									[
										419337,
										419341
									],
									[
										419427,
										419431
									],
									[
										419714,
										419718
									],
									[
										419729,
										419733
									],
									[
										419748,
										419752
									],
									[
										419864,
										419868
									],
									[
										419879,
										419883
									],
									[
										419898,
										419902
									],
									[
										420002,
										420006
									],
									[
										420163,
										420167
									],
									[
										420600,
										420604
									],
									[
										420769,
										420773
									],
									[
										421090,
										421094
									],
									[
										421191,
										421195
									],
									[
										421206,
										421210
									],
									[
										421254,
										421258
									],
									[
										421354,
										421358
									],
									[
										421468,
										421472
									],
									[
										421483,
										421487
									],
									[
										421502,
										421506
									],
									[
										421590,
										421594
									],
									[
										421695,
										421699
									],
									[
										421930,
										421934
									],
									[
										421945,
										421949
									],
									[
										422048,
										422052
									],
									[
										422279,
										422283
									],
									[
										422298,
										422302
									],
									[
										422539,
										422543
									],
									[
										422617,
										422621
									],
									[
										422632,
										422636
									],
									[
										422728,
										422732
									],
									[
										422743,
										422747
									],
									[
										423169,
										423173
									],
									[
										423279,
										423283
									],
									[
										423393,
										423397
									],
									[
										423477,
										423481
									],
									[
										423492,
										423496
									],
									[
										423633,
										423637
									],
									[
										424011,
										424015
									],
									[
										424237,
										424241
									],
									[
										424252,
										424256
									],
									[
										424423,
										424427
									],
									[
										424438,
										424442
									],
									[
										424786,
										424790
									],
									[
										425044,
										425048
									],
									[
										425148,
										425152
									],
									[
										425161,
										425165
									],
									[
										425337,
										425341
									],
									[
										425420,
										425424
									],
									[
										425433,
										425437
									],
									[
										425447,
										425451
									],
									[
										425526,
										425530
									],
									[
										425539,
										425543
									],
									[
										425552,
										425556
									],
									[
										425566,
										425570
									],
									[
										425638,
										425642
									],
									[
										425733,
										425737
									],
									[
										425748,
										425752
									],
									[
										425844,
										425848
									],
									[
										425859,
										425863
									],
									[
										425950,
										425954
									],
									[
										425965,
										425969
									],
									[
										426063,
										426067
									],
									[
										426078,
										426082
									],
									[
										426167,
										426171
									],
									[
										426182,
										426186
									],
									[
										426278,
										426282
									],
									[
										426367,
										426371
									],
									[
										426382,
										426386
									],
									[
										426924,
										426928
									],
									[
										427197,
										427201
									],
									[
										427211,
										427215
									],
									[
										427233,
										427237
									],
									[
										427601,
										427605
									],
									[
										427713,
										427717
									],
									[
										427836,
										427840
									],
									[
										427955,
										427959
									],
									[
										428205,
										428209
									],
									[
										428315,
										428319
									],
									[
										428502,
										428506
									],
									[
										428619,
										428623
									],
									[
										428825,
										428829
									],
									[
										428840,
										428844
									],
									[
										428914,
										428918
									],
									[
										428989,
										428993
									],
									[
										429004,
										429008
									],
									[
										429109,
										429113
									],
									[
										429124,
										429128
									],
									[
										429205,
										429209
									],
									[
										429287,
										429291
									],
									[
										429302,
										429306
									],
									[
										429483,
										429487
									],
									[
										429511,
										429515
									],
									[
										429594,
										429598
									],
									[
										429609,
										429613
									],
									[
										429700,
										429704
									],
									[
										429819,
										429823
									],
									[
										429834,
										429838
									],
									[
										429929,
										429933
									],
									[
										430114,
										430118
									],
									[
										430142,
										430146
									],
									[
										430330,
										430334
									],
									[
										430449,
										430453
									],
									[
										430566,
										430570
									],
									[
										430581,
										430585
									],
									[
										430600,
										430604
									],
									[
										430736,
										430740
									],
									[
										430764,
										430768
									],
									[
										430847,
										430851
									],
									[
										430862,
										430866
									],
									[
										430960,
										430964
									],
									[
										431079,
										431083
									],
									[
										431094,
										431098
									],
									[
										431196,
										431200
									],
									[
										431388,
										431392
									],
									[
										431416,
										431420
									],
									[
										431611,
										431615
									],
									[
										431730,
										431734
									],
									[
										431850,
										431854
									],
									[
										431865,
										431869
									],
									[
										431884,
										431888
									],
									[
										432097,
										432101
									],
									[
										432112,
										432116
									],
									[
										432125,
										432129
									],
									[
										432253,
										432257
									],
									[
										432268,
										432272
									],
									[
										432292,
										432296
									],
									[
										432540,
										432544
									],
									[
										432557,
										432561
									],
									[
										432585,
										432589
									],
									[
										432697,
										432701
									],
									[
										432872,
										432876
									],
									[
										432995,
										432999
									],
									[
										433358,
										433362
									],
									[
										433468,
										433472
									],
									[
										433483,
										433487
									],
									[
										433496,
										433500
									],
									[
										433631,
										433635
									],
									[
										433646,
										433650
									],
									[
										433670,
										433674
									],
									[
										433932,
										433936
									],
									[
										433949,
										433953
									],
									[
										433977,
										433981
									],
									[
										434096,
										434100
									],
									[
										434285,
										434289
									],
									[
										434415,
										434419
									],
									[
										434799,
										434803
									],
									[
										435248,
										435252
									],
									[
										435691,
										435695
									],
									[
										436315,
										436319
									],
									[
										436793,
										436797
									],
									[
										437146,
										437150
									],
									[
										437363,
										437367
									],
									[
										437565,
										437569
									],
									[
										437597,
										437601
									],
									[
										437747,
										437751
									],
									[
										437779,
										437783
									],
									[
										437995,
										437999
									],
									[
										438121,
										438125
									],
									[
										438149,
										438153
									],
									[
										438381,
										438385
									],
									[
										438514,
										438518
									],
									[
										438542,
										438546
									],
									[
										438875,
										438879
									],
									[
										438892,
										438896
									],
									[
										439120,
										439124
									],
									[
										439152,
										439156
									],
									[
										439434,
										439438
									],
									[
										439626,
										439630
									],
									[
										439877,
										439881
									],
									[
										439975,
										439979
									],
									[
										440115,
										440119
									],
									[
										440318,
										440322
									],
									[
										440593,
										440597
									],
									[
										440698,
										440702
									],
									[
										440913,
										440917
									],
									[
										441035,
										441039
									],
									[
										441187,
										441191
									],
									[
										441316,
										441320
									],
									[
										441560,
										441564
									],
									[
										441605,
										441609
									],
									[
										441708,
										441712
									],
									[
										441753,
										441757
									],
									[
										441935,
										441939
									],
									[
										442070,
										442074
									],
									[
										442200,
										442204
									],
									[
										442342,
										442346
									],
									[
										442583,
										442587
									],
									[
										442600,
										442604
									],
									[
										442700,
										442704
									],
									[
										442708,
										442712
									],
									[
										442716,
										442720
									],
									[
										442842,
										442846
									],
									[
										442874,
										442878
									],
									[
										443009,
										443013
									],
									[
										443024,
										443028
									],
									[
										443043,
										443047
									],
									[
										443276,
										443280
									],
									[
										443377,
										443381
									],
									[
										443473,
										443477
									],
									[
										443596,
										443600
									],
									[
										443704,
										443708
									],
									[
										443807,
										443811
									],
									[
										444011,
										444015
									],
									[
										444108,
										444112
									],
									[
										444133,
										444137
									],
									[
										444272,
										444276
									],
									[
										444401,
										444405
									],
									[
										444436,
										444440
									],
									[
										444725,
										444729
									],
									[
										444802,
										444806
									],
									[
										444870,
										444874
									],
									[
										444885,
										444889
									],
									[
										444985,
										444989
									],
									[
										445339,
										445343
									],
									[
										445423,
										445427
									],
									[
										445498,
										445502
									],
									[
										445513,
										445517
									],
									[
										445620,
										445624
									],
									[
										445766,
										445770
									],
									[
										445923,
										445927
									],
									[
										445938,
										445942
									],
									[
										446250,
										446254
									],
									[
										446424,
										446428
									],
									[
										446439,
										446443
									],
									[
										447012,
										447016
									],
									[
										447494,
										447498
									],
									[
										447601,
										447605
									],
									[
										448137,
										448141
									],
									[
										448654,
										448658
									],
									[
										448768,
										448772
									],
									[
										449155,
										449159
									],
									[
										449186,
										449190
									],
									[
										449279,
										449283
									],
									[
										449310,
										449314
									],
									[
										449419,
										449423
									],
									[
										449450,
										449454
									],
									[
										449594,
										449598
									],
									[
										449625,
										449629
									],
									[
										449738,
										449742
									],
									[
										449769,
										449773
									],
									[
										449898,
										449902
									],
									[
										449929,
										449933
									],
									[
										450074,
										450078
									],
									[
										450105,
										450109
									],
									[
										450205,
										450209
									],
									[
										450236,
										450240
									],
									[
										450352,
										450356
									],
									[
										450383,
										450387
									],
									[
										450534,
										450538
									],
									[
										450565,
										450569
									],
									[
										450685,
										450689
									],
									[
										450716,
										450720
									],
									[
										450852,
										450856
									],
									[
										450883,
										450887
									],
									[
										451142,
										451146
									],
									[
										451159,
										451163
									],
									[
										451259,
										451263
									],
									[
										451267,
										451271
									],
									[
										451275,
										451279
									],
									[
										451401,
										451405
									],
									[
										451433,
										451437
									],
									[
										451568,
										451572
									],
									[
										451583,
										451587
									],
									[
										451602,
										451606
									],
									[
										451857,
										451861
									],
									[
										452032,
										452036
									],
									[
										452218,
										452222
									],
									[
										452323,
										452327
									],
									[
										452551,
										452555
									],
									[
										452687,
										452691
									],
									[
										453034,
										453038
									],
									[
										453208,
										453212
									],
									[
										453375,
										453379
									],
									[
										453461,
										453465
									],
									[
										453625,
										453629
									],
									[
										453726,
										453730
									],
									[
										454132,
										454136
									],
									[
										454158,
										454162
									],
									[
										454257,
										454261
									],
									[
										454272,
										454276
									],
									[
										454360,
										454364
									],
									[
										454479,
										454483
									],
									[
										454494,
										454498
									],
									[
										454587,
										454591
									],
									[
										455133,
										455137
									],
									[
										455159,
										455163
									],
									[
										455265,
										455269
									],
									[
										455280,
										455284
									],
									[
										455375,
										455379
									],
									[
										455494,
										455498
									],
									[
										455509,
										455513
									],
									[
										455609,
										455613
									],
									[
										455952,
										455956
									],
									[
										456438,
										456442
									],
									[
										456664,
										456668
									],
									[
										456767,
										456771
									],
									[
										456891,
										456895
									],
									[
										457018,
										457022
									],
									[
										457146,
										457150
									],
									[
										457252,
										457256
									],
									[
										457397,
										457401
									],
									[
										457509,
										457513
									],
									[
										457693,
										457697
									],
									[
										457766,
										457770
									],
									[
										458031,
										458035
									],
									[
										458226,
										458230
									],
									[
										458311,
										458315
									],
									[
										458582,
										458586
									],
									[
										458865,
										458869
									],
									[
										459135,
										459139
									],
									[
										459340,
										459344
									],
									[
										459538,
										459542
									],
									[
										459714,
										459718
									],
									[
										459926,
										459930
									],
									[
										460254,
										460258
									],
									[
										460403,
										460407
									],
									[
										460657,
										460661
									],
									[
										460762,
										460766
									],
									[
										460995,
										460999
									],
									[
										461280,
										461284
									],
									[
										461386,
										461390
									],
									[
										461528,
										461532
									],
									[
										461820,
										461824
									],
									[
										461856,
										461860
									],
									[
										461887,
										461891
									],
									[
										461917,
										461921
									],
									[
										461962,
										461966
									],
									[
										461985,
										461989
									],
									[
										462287,
										462291
									],
									[
										462304,
										462308
									],
									[
										462509,
										462513
									],
									[
										462759,
										462763
									],
									[
										463004,
										463008
									],
									[
										463236,
										463240
									],
									[
										463413,
										463417
									],
									[
										463571,
										463575
									],
									[
										463663,
										463667
									],
									[
										463789,
										463793
									],
									[
										464115,
										464119
									],
									[
										464411,
										464415
									],
									[
										464659,
										464663
									],
									[
										465009,
										465013
									],
									[
										465320,
										465324
									],
									[
										465669,
										465673
									],
									[
										465852,
										465856
									],
									[
										465869,
										465873
									],
									[
										465912,
										465916
									],
									[
										466076,
										466080
									],
									[
										466196,
										466200
									],
									[
										466213,
										466217
									],
									[
										466257,
										466261
									],
									[
										466519,
										466523
									],
									[
										466758,
										466762
									],
									[
										466926,
										466930
									],
									[
										466943,
										466947
									],
									[
										467156,
										467160
									],
									[
										467184,
										467188
									],
									[
										467217,
										467221
									],
									[
										467245,
										467249
									],
									[
										467468,
										467472
									],
									[
										467644,
										467648
									],
									[
										467926,
										467930
									],
									[
										468037,
										468041
									],
									[
										468054,
										468058
									],
									[
										468097,
										468101
									],
									[
										468115,
										468119
									],
									[
										468148,
										468152
									],
									[
										468294,
										468298
									],
									[
										468310,
										468314
									],
									[
										468533,
										468537
									],
									[
										468755,
										468759
									],
									[
										469142,
										469146
									],
									[
										469176,
										469180
									],
									[
										469425,
										469429
									],
									[
										469518,
										469522
									],
									[
										469533,
										469537
									],
									[
										469563,
										469567
									],
									[
										469614,
										469618
									],
									[
										469833,
										469837
									],
									[
										470061,
										470065
									],
									[
										470152,
										470156
									],
									[
										470167,
										470171
									],
									[
										470214,
										470218
									],
									[
										470269,
										470273
									],
									[
										470376,
										470380
									],
									[
										470406,
										470410
									],
									[
										470635,
										470639
									],
									[
										470652,
										470656
									],
									[
										470749,
										470753
									],
									[
										470862,
										470866
									],
									[
										470885,
										470889
									],
									[
										470950,
										470954
									],
									[
										470990,
										470994
									],
									[
										471063,
										471067
									],
									[
										471087,
										471091
									],
									[
										471268,
										471272
									],
									[
										471287,
										471291
									],
									[
										471345,
										471349
									],
									[
										471395,
										471399
									],
									[
										471420,
										471424
									],
									[
										471652,
										471656
									],
									[
										471678,
										471682
									],
									[
										471860,
										471864
									],
									[
										471922,
										471926
									],
									[
										471947,
										471951
									],
									[
										472087,
										472091
									],
									[
										472222,
										472226
									],
									[
										472239,
										472243
									],
									[
										472364,
										472368
									],
									[
										472440,
										472444
									],
									[
										472679,
										472683
									],
									[
										472696,
										472700
									],
									[
										472727,
										472731
									],
									[
										472745,
										472749
									],
									[
										473049,
										473053
									],
									[
										473292,
										473296
									],
									[
										474100,
										474104
									],
									[
										474143,
										474147
									],
									[
										474390,
										474394
									],
									[
										474433,
										474437
									],
									[
										474733,
										474737
									],
									[
										474776,
										474780
									],
									[
										475049,
										475053
									],
									[
										475092,
										475096
									],
									[
										475391,
										475395
									],
									[
										475434,
										475438
									],
									[
										475740,
										475744
									],
									[
										475783,
										475787
									],
									[
										476089,
										476093
									],
									[
										476132,
										476136
									],
									[
										476405,
										476409
									],
									[
										476448,
										476452
									],
									[
										476713,
										476717
									],
									[
										476756,
										476760
									],
									[
										477047,
										477051
									],
									[
										477090,
										477094
									],
									[
										477368,
										477372
									],
									[
										477411,
										477415
									],
									[
										477716,
										477720
									],
									[
										477759,
										477763
									],
									[
										478031,
										478035
									],
									[
										478074,
										478078
									],
									[
										478360,
										478364
									],
									[
										478403,
										478407
									],
									[
										478676,
										478680
									],
									[
										478719,
										478723
									],
									[
										479005,
										479009
									],
									[
										479048,
										479052
									],
									[
										479295,
										479299
									],
									[
										479338,
										479342
									],
									[
										479664,
										479668
									],
									[
										479707,
										479711
									],
									[
										480033,
										480037
									],
									[
										480077,
										480081
									],
									[
										480413,
										480417
									],
									[
										480456,
										480460
									],
									[
										480726,
										480730
									],
									[
										480769,
										480773
									],
									[
										481039,
										481043
									],
									[
										481082,
										481086
									],
									[
										481443,
										481447
									],
									[
										481487,
										481491
									],
									[
										481853,
										481857
									],
									[
										481896,
										481900
									],
									[
										482166,
										482170
									],
									[
										482209,
										482213
									],
									[
										482575,
										482579
									],
									[
										482619,
										482623
									],
									[
										483003,
										483007
									],
									[
										483046,
										483050
									],
									[
										483348,
										483352
									],
									[
										483391,
										483395
									],
									[
										483693,
										483697
									],
									[
										483736,
										483740
									],
									[
										484062,
										484066
									],
									[
										484105,
										484109
									],
									[
										484431,
										484435
									],
									[
										484474,
										484478
									],
									[
										484811,
										484815
									],
									[
										484855,
										484859
									],
									[
										485191,
										485195
									],
									[
										485235,
										485239
									],
									[
										485532,
										485536
									],
									[
										485575,
										485579
									],
									[
										485930,
										485934
									],
									[
										485974,
										485978
									],
									[
										486267,
										486271
									],
									[
										486311,
										486315
									],
									[
										486604,
										486608
									],
									[
										486647,
										486651
									],
									[
										486922,
										486926
									],
									[
										486965,
										486969
									],
									[
										487286,
										487290
									],
									[
										487329,
										487333
									],
									[
										487625,
										487629
									],
									[
										487669,
										487673
									],
									[
										488035,
										488039
									],
									[
										488078,
										488082
									],
									[
										488347,
										488351
									],
									[
										488390,
										488394
									],
									[
										488637,
										488641
									],
									[
										488680,
										488684
									],
									[
										488970,
										488974
									],
									[
										489013,
										489017
									],
									[
										489303,
										489307
									],
									[
										489347,
										489351
									],
									[
										489729,
										489733
									],
									[
										489773,
										489777
									],
									[
										490158,
										490162
									],
									[
										490202,
										490206
									],
									[
										490587,
										490591
									],
									[
										490630,
										490634
									],
									[
										490924,
										490928
									],
									[
										490967,
										490971
									],
									[
										491237,
										491241
									],
									[
										491280,
										491284
									],
									[
										491550,
										491554
									],
									[
										491593,
										491597
									],
									[
										491863,
										491867
									],
									[
										491906,
										491910
									],
									[
										492187,
										492191
									],
									[
										492230,
										492234
									],
									[
										492590,
										492594
									],
									[
										492633,
										492637
									],
									[
										492920,
										492924
									],
									[
										492969,
										492973
									],
									[
										493253,
										493257
									],
									[
										493302,
										493306
									],
									[
										493587,
										493591
									],
									[
										493636,
										493640
									],
									[
										493903,
										493907
									],
									[
										493946,
										493950
									],
									[
										494306,
										494310
									],
									[
										494349,
										494353
									],
									[
										494663,
										494667
									],
									[
										494706,
										494710
									],
									[
										495020,
										495024
									],
									[
										495063,
										495067
									],
									[
										495406,
										495410
									],
									[
										495449,
										495453
									],
									[
										495768,
										495772
									],
									[
										495811,
										495815
									],
									[
										496117,
										496121
									],
									[
										496160,
										496164
									],
									[
										496465,
										496469
									],
									[
										496508,
										496512
									],
									[
										496783,
										496787
									],
									[
										496826,
										496830
									],
									[
										497101,
										497105
									],
									[
										497144,
										497148
									],
									[
										497458,
										497462
									],
									[
										497501,
										497505
									],
									[
										497815,
										497819
									],
									[
										497859,
										497863
									],
									[
										498152,
										498156
									],
									[
										498195,
										498199
									],
									[
										498496,
										498500
									],
									[
										498538,
										498542
									],
									[
										498864,
										498868
									],
									[
										498908,
										498912
									],
									[
										499274,
										499278
									],
									[
										499318,
										499322
									],
									[
										499615,
										499619
									],
									[
										499658,
										499662
									],
									[
										499959,
										499963
									],
									[
										500002,
										500006
									],
									[
										500303,
										500307
									],
									[
										500346,
										500350
									],
									[
										500647,
										500651
									],
									[
										500691,
										500695
									],
									[
										501057,
										501061
									],
									[
										501100,
										501104
									],
									[
										501455,
										501459
									],
									[
										501499,
										501503
									],
									[
										501801,
										501805
									],
									[
										501845,
										501849
									],
									[
										502202,
										502206
									],
									[
										502245,
										502249
									],
									[
										502546,
										502550
									],
									[
										502589,
										502593
									],
									[
										502910,
										502914
									],
									[
										502954,
										502958
									],
									[
										503334,
										503338
									],
									[
										503378,
										503382
									],
									[
										503753,
										503757
									],
									[
										504031,
										504035
									],
									[
										504286,
										504290
									],
									[
										504543,
										504547
									],
									[
										504874,
										504878
									],
									[
										504935,
										504939
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								65820,
								65824
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"color_scheme": "Packages/BetterFindBuffer/FindResults.hidden-tmTheme",
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"detect_indentation": false,
							"function_name_status_row": 1384,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 24565.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "networkplayground/include/networking/StringUtils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 739,
						"regions":
						{
						},
						"selection":
						[
							[
								434,
								434
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										503,
										504
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										410,
										411
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"function_name_status_row": 21,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.387882864238,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.9o:///Users/erikparreira/Dropbox/goStuff/Sandbox":
	{
		"height": 100.0
	},
	"output.9o:///Users/erikparreira/Dropbox/goStuff/go_experiment/backend":
	{
		"height": 100.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/core":
	{
		"height": 124.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib":
	{
		"height": 243.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/game":
	{
		"height": 252.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/logger":
	{
		"height": 124.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/network":
	{
		"height": 189.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/websockethandler":
	{
		"height": 124.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/websockethandler.go":
	{
		"height": 124.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/go_game/game":
	{
		"height": 280.0
	},
	"output.GoSublime-main-output":
	{
		"height": 124.0
	},
	"output.MarGo-output":
	{
		"height": 100.0
	},
	"output.cc":
	{
		"height": 308.0
	},
	"output.exec":
	{
		"height": 371.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "networkplayground.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"string",
				"networkplayground/src/networking/StringUtils.cpp"
			],
			[
				"strin",
				"networkplayground/include/networking/StringUtils.h"
			],
			[
				"stringu",
				"networkplayground/src/networking/StringUtils.cpp"
			],
			[
				"inpu",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"timin/",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"timing.h",
				"networkplayground/include/timing/Timing.h"
			],
			[
				"timing",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"timing.cp",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"timin",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"inpumana",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"tim",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"movelist",
				"networkplayground/src/gameobjects/MoveList.cpp"
			],
			[
				"ti",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"cli",
				"networkplaygroundclient/src/gameobjects/Client.cpp"
			],
			[
				"i",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"inputma",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"str",
				"networkplayground/src/networking/StringUtils.cpp"
			],
			[
				"",
				"networkplaygroundclient/src/networking/NetworkManagerClient.cpp"
			],
			[
				"inputpa",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"player",
				"networkplayground/src/gameobjects/Player.cpp"
			],
			[
				"netwokrser",
				"networkplaygroundserver/src/networking/NetworkManagerServer.cpp"
			],
			[
				"clie",
				"networkplaygroundclient/src/gameobjects/Client.cpp"
			],
			[
				"engin",
				"networkplayground/include/gameobjects/Engine.h"
			],
			[
				"networkcli",
				"networkplaygroundclient/include/networking/NetworkManagerClient.h"
			],
			[
				"networkma",
				"networkplayground/include/networking/NetworkManager.h"
			],
			[
				"make",
				"Makefile"
			],
			[
				"netowkrmana",
				"networkplayground/include/networking/NetworkManager.h"
			],
			[
				"socketad",
				"networkplayground/src/networking/SocketAddress.cpp"
			],
			[
				"socekt",
				"networkplayground/include/networking/SocketAddress.h"
			],
			[
				"networkmana",
				"networkplayground/src/networking/NetworkManager.cpp"
			],
			[
				"meme",
				"networkplayground/include/IO/MemoryBitStream.h"
			],
			[
				"main",
				"networkplaygroundserver/src/main.cpp"
			],
			[
				"netowrkmana",
				"networkplayground/include/networking/NetworkManager.h"
			],
			[
				"ma",
				"networkplaygroundserver/src/main.cpp"
			],
			[
				"network",
				"networkplayground/src/networking/NetworkManager.cpp"
			],
			[
				"netwrokmana",
				"networkplayground/src/networking/NetworkManager.cpp"
			],
			[
				"scr",
				"scratch.cpp"
			],
			[
				"netowrkingmana",
				"networkplayground/include/networking/NetworkManager.h"
			],
			[
				"client",
				"falcon/game/client_handlers.go"
			],
			[
				"physics",
				"falcon/core_lib/basic_physics.go"
			],
			[
				"gameo",
				"falcon/game/game_objs.go"
			],
			[
				"clientha",
				"falcon/game/client_handlers.go"
			],
			[
				"game.go",
				"falcon/game/game.go"
			],
			[
				"game_loo",
				"falcon/game/game_loop.go"
			],
			[
				"gameloo",
				"falcon/game/game_loop.go"
			],
			[
				"game.js",
				"falcon/web/js/game.js"
			],
			[
				"client_me",
				"falcon/game/client_messages.go"
			],
			[
				"mess",
				"falcon/network/messages.go"
			],
			[
				"game_ob",
				"falcon/game/game_objs.go"
			],
			[
				"gameobj",
				"falcon/core_lib/game_objs.go"
			],
			[
				"game_lo",
				"falcon/game/game_loop.go"
			],
			[
				"game_o",
				"falcon/core_lib/game_objs.go"
			],
			[
				"game",
				"falcon/game/game_loop.go"
			],
			[
				"basi",
				"falcon/core_lib/basic_physics.go"
			],
			[
				"game.",
				"go_game/game/game_loop.go"
			],
			[
				"basic",
				"falcon/core_lib/basic_physics.go"
			],
			[
				"gameob",
				"falcon/core_lib/game_objs.go"
			],
			[
				"index",
				"falcon/web/index.html"
			],
			[
				"webso",
				"falcon/network/websockethandler.go"
			],
			[
				"clienth",
				"falcon/game/client_handlers.go"
			],
			[
				"inde",
				"falcon/web/index.html"
			],
			[
				"clei",
				"falcon/network/clients.go"
			],
			[
				"networ",
				"falcon/network/clients.go"
			],
			[
				"corli",
				"go_game/game/core_lib.go"
			],
			[
				"clients",
				"falcon/network/clients.go"
			],
			[
				"clien",
				"falcon/game/client_handlers.go"
			],
			[
				"web",
				"falcon/network/websockethandler.go"
			],
			[
				"gamelo",
				"falcon/game/game_loop.go"
			],
			[
				"gamel",
				"falcon/game/game_loop.go"
			],
			[
				"messages",
				"go_game/game/messages.go"
			],
			[
				"messages.go",
				"game/messages.go"
			],
			[
				"message",
				"message_structure.md"
			],
			[
				"comm",
				"game/communication_layer.go"
			],
			[
				"mes",
				"game/messages.go"
			],
			[
				"han",
				"game/client_handlers.go"
			],
			[
				"handle",
				"game/client_handlers.go"
			],
			[
				"handl",
				"game/client_handlers.go"
			],
			[
				"g",
				"game/game.go"
			],
			[
				"game_og",
				"game/game_objs.go"
			],
			[
				"me",
				"game/messages.go"
			],
			[
				"com",
				"game/communication_layer.go"
			],
			[
				"commu",
				"game/communication_layer.go"
			],
			[
				"ws",
				"web/js/ws_events_dispatcher.js"
			],
			[
				"units",
				"web/js/unit_manager.js"
			],
			[
				"simpl",
				"web/js/simple_actor.js"
			],
			[
				"master",
				"master_server/master_server.go"
			],
			[
				"gaemloo",
				"game/game_loop.go"
			],
			[
				"gam",
				"game/game.go"
			],
			[
				"gmae",
				"game/game.go"
			],
			[
				"simple",
				"web/js/simple_actor.js"
			],
			[
				"uti",
				"web/js/utils.js"
			],
			[
				"index.",
				"web/index.html"
			],
			[
				"log",
				"game/logger.go"
			],
			[
				"game.sj",
				"web/js/game.js"
			],
			[
				"backen",
				"backend/main.go"
			],
			[
				"backe",
				"backend/main.go"
			],
			[
				"co",
				"game/communication_layer.go"
			],
			[
				"gmaeoj",
				"game/game_objs.go"
			],
			[
				"backend",
				"backend/main.go"
			],
			[
				"gameoj",
				"game/game_objs.go"
			],
			[
				"game_l",
				"game/game_loop.go"
			],
			[
				"back",
				"backend/main.go"
			],
			[
				"cl",
				"game/client_handlers.go"
			],
			[
				"w",
				"web/js/ws_events_dispatcher.js"
			],
			[
				"si",
				"web/js/simple_actor.js"
			],
			[
				"messa",
				"game/messages.go"
			],
			[
				"settings",
				"web/js/settings.js"
			],
			[
				"server",
				"game/server_handlers.go"
			],
			[
				"clienthan",
				"game/client_handlers.go"
			],
			[
				"game_loop",
				"game/game_loop.go"
			],
			[
				"maser",
				"master_server/master_server.go"
			],
			[
				"rea",
				"go_experiment/README.md"
			],
			[
				"utisl",
				"go_experiment/web/js/utility.js"
			],
			[
				"uni",
				"go_experiment/web/js/unit.js"
			],
			[
				"sty",
				"go_experiment/web/styles.css"
			],
			[
				"games",
				"go_experiment/web/js/game_state.js"
			],
			[
				"style",
				"go_experiment/web/styles.css"
			],
			[
				"glo",
				"chat_tutorial/web/js/globals.js"
			],
			[
				"chat",
				"chat_tutorial/web/chat.html"
			],
			[
				"unit",
				"chat_tutorial/web/js/unit.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Dropbox/Programming/networkplayground/networkplayground.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 227.0,
		"last_filter": "moveM",
		"selected_items":
		[
			[
				"moveM",
				"MoveMessage"
			],
			[
				"move",
				"MoveMessage"
			],
			[
				"player",
				"Player"
			],
			[
				"mes",
				"Message"
			],
			[
				"newPLa",
				"NewPlayer"
			],
			[
				"newPla",
				"NewPlayer"
			],
			[
				"addgame",
				"AddGameObject"
			],
			[
				"baseR",
				"BaseRectMessage"
			],
			[
				"Update",
				"UpdateMessage"
			],
			[
				"addphy",
				"AddPhysicsComp"
			],
			[
				"addph",
				"AddPhysicsComp"
			],
			[
				"newcli",
				"NewClient"
			],
			[
				"Netw",
				"NetworkedGameObjects"
			],
			[
				"Pl",
				"Player"
			],
			[
				"clie",
				"ClientData"
			],
			[
				"clei",
				"ClientData"
			],
			[
				"newBa",
				"NewBackendController"
			],
			[
				"syn",
				"SyncClient"
			],
			[
				"syc",
				"SyncClient"
			],
			[
				"message",
				"Message"
			],
			[
				"mess",
				"Message"
			],
			[
				"build",
				"BuildAddMessage"
			],
			[
				"clien",
				"ClientData"
			],
			[
				"addme",
				"AddMessage"
			],
			[
				"pro",
				"ProcessEvents"
			],
			[
				"baseagme",
				"BaseGameObjData"
			],
			[
				"buildup",
				"BuildUpdateMessage"
			],
			[
				"sync",
				"SyncClient"
			],
			[
				"addUn",
				"addUnit: function( unit )"
			],
			[
				"cleanup",
				"cleanUpSocket"
			],
			[
				"readBr",
				"readBroadCastEvents"
			],
			[
				"broa",
				"broadCastGameObjects"
			],
			[
				"CLIENT",
				"ClientData"
			],
			[
				"cli",
				"ClientData"
			],
			[
				"addRe",
				"AddRequest"
			],
			[
				"updateEve",
				"UpdateEvent"
			],
			[
				"updat",
				"update: function()"
			],
			[
				"client",
				"ClientData"
			],
			[
				"update",
				"UpdateMessage"
			],
			[
				"addre",
				"AddRequest"
			],
			[
				"ob",
				"ObjectMessage"
			],
			[
				"Obje",
				"Object"
			],
			[
				"makeO",
				"MakeObjectFromJson"
			],
			[
				"make",
				"MakeObjectFromJson"
			],
			[
				"read",
				"ReadMoveMessage"
			],
			[
				"exclu",
				"ExcludeClient"
			],
			[
				"newgame",
				"NewGameObject"
			]
		],
		"width": 568.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 259.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
