{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"in",
				"inFormat\tconst char *"
			],
			[
				"wid",
				"width"
			],
			[
				"padd",
				"padding-bottom"
			],
			[
				"scrip",
				"script\tTag"
			],
			[
				"seque",
				"sequenceNumber"
			],
			[
				"char",
				"charIdx\tint"
			],
			[
				"for",
				"for(init-statement;condition;inc-expression){\nstatements\n}\tKeyWord"
			],
			[
				"get",
				"GetBufferPtr"
			],
			[
				"Pro",
				"ProcessPacket(InputMemoryBitStream &inInputStream, const SocketAddress &inFromAddress)\tvoid"
			],
			[
				"input",
				"inputStream"
			],
			[
				"em",
				"emplace(_Args &&__args...)\tvoid"
			],
			[
				"tota",
				"totalBytesRead\tint"
			],
			[
				"m",
				"mSocket"
			],
			[
				"game",
				"gameObject\tGameObject ν"
			],
			[
				"up",
				"updateMessage\tUpdateMessage ν"
			],
			[
				"New",
				"NewVector\tcore_lib.Vector2D ƒ"
			],
			[
				"pn",
				"physicsComponenet\tcore_lib.PhysicsComponent ν"
			],
			[
				"se",
				"SendMessage\terror ƒ"
			],
			[
				"cli",
				"clientData\t*Client ν"
			],
			[
				"raw",
				"rawJsonData\t ν"
			],
			[
				"rec",
				"rectData\tcore_lib.BaseRectData ν"
			],
			[
				"phy",
				"physicsSpace\tcore_lib.PhysicsSpace ν"
			],
			[
				"print",
				"Printf\t ƒ"
			],
			[
				"P",
				"PhysicsComponent\tstruct ʈ"
			],
			[
				"Ph",
				"PhysicsSpace\tstruct ʈ"
			],
			[
				"gameO",
				"gameObj\t*PhysicsComponent ν"
			],
			[
				"gam",
				"gameObj\t*PhysicsComponent ν"
			],
			[
				"floa",
				"float64\tbuilt-in ʈ"
			],
			[
				"flo",
				"float64\tbuilt-in ʈ"
			],
			[
				"ca",
				"canvasHeight〔variable〕"
			],
			[
				"sett",
				"settings〔variable〕"
			],
			[
				"pla",
				"player〔variable〕"
			],
			[
				"par",
				"parseNetworkGameObject"
			],
			[
				"obj",
				"object〔variable〕"
			],
			[
				"fun",
				"function〔keyword〕"
			],
			[
				"conn",
				"connectionData〔argument〕"
			],
			[
				"ne",
				"network\t package ρ"
			],
			[
				"s",
				"string\tbuilt-in ʈ"
			],
			[
				"clien",
				"clientData\tnetwork.ClientData ν"
			],
			[
				"prin",
				"Printf\t ƒ"
			],
			[
				"lo",
				"logger\t package ρ"
			],
			[
				"p",
				"Panicf\t ƒ"
			],
			[
				"pa",
				"Panicf\t ƒ"
			],
			[
				"Conn",
				"MakeConnectionMessage\tMessage ƒ"
			],
			[
				"con",
				"connectionMessage\tnetwork.Message ν"
			],
			[
				"make",
				"MakeConnectionMessage\tMessage ƒ"
			],
			[
				"clin",
				"clientData\t ν"
			],
			[
				"sen",
				"SendToClient\terror ƒ"
			],
			[
				"client",
				"clientData\t ν"
			],
			[
				"clie",
				"clientData\t*network.ClientData ν"
			],
			[
				"Me",
				"Message\tstruct ʈ"
			],
			[
				"Mess",
				"MessageQueue\tstruct ʈ"
			],
			[
				"new",
				"newClient\tClientData ν"
			],
			[
				"Cli",
				"ClientData\tstruct ʈ"
			],
			[
				"Prin",
				"Println\t ƒ"
			],
			[
				"web",
				"websockethandler\t package ρ"
			],
			[
				"Ad",
				"AddNewPlayer\tPlayer ƒ"
			],
			[
				"gae",
				"gameObjects\tmap[string]GameObject ν"
			],
			[
				"ba",
				"BaseRectMessage\tstruct ʈ"
			],
			[
				"build",
				"buildBaseRectData\tMessageRectData ƒ"
			],
			[
				"Oj",
				"ObjectRectData\tstruct ʈ"
			],
			[
				"ob",
				"ObjectRectData\tstruct ʈ"
			],
			[
				"Ob",
				"ObjectRectData\tstruct ʈ"
			],
			[
				"event",
				"eventMessage\tMessage ν"
			],
			[
				"broa",
				"broadcastMessages\t[]Message ν"
			],
			[
				"syn",
				"syncDataBytes\t[]byte ν"
			],
			[
				"mess",
				"message2\tMessage ν"
			],
			[
				"sy",
				"syncDataBytes\t[]byte ν"
			],
			[
				"mes",
				"messageJson\t[]byte ν"
			],
			[
				"bro",
				"broadcastBytes\t[]byte ν"
			],
			[
				"br",
				"broadcastBytes\t[]byte ν"
			],
			[
				"even",
				"event\tMessage ν"
			],
			[
				"add",
				"addBytes\t[]byte ν"
			],
			[
				"upda",
				"UpdateMessage\tstruct ʈ"
			],
			[
				"update",
				"updateBytes\t[]byte ν"
			],
			[
				"eventa",
				"eventName\tstring ν"
			],
			[
				"UPdate",
				"UpdateMessage\tstruct ʈ"
			],
			[
				"test",
				"testSlice\t[]Test ν"
			],
			[
				"Tes",
				"Tester\tstruct ʈ"
			],
			[
				"g",
				"GameObjects\tmap[string]GameObject ν"
			],
			[
				"i",
				"sourceId\tint ν"
			],
			[
				"eve",
				"eventSourceId\tint ν"
			],
			[
				"c",
				"client\t*websocket.Conn ν"
			],
			[
				"cl",
				"clients\tmap[*websocket.Conn]ClientData ν"
			],
			[
				"pro",
				"ProcessObjectEvents\tstring ƒ"
			],
			[
				"Pr",
				"Printf\t ƒ"
			],
			[
				"Syn",
				"SyncMessage\tstruct ʈ"
			],
			[
				"ru",
				"runHttpServer\t ƒ"
			],
			[
				"run",
				"runInteractiveMode\t ƒ"
			],
			[
				"err",
				"Error\t*log.Logger ν"
			],
			[
				"a",
				"RemoteAddr\tnet.Addr ƒ"
			],
			[
				"set",
				"SetOutput\t ƒ"
			],
			[
				"Upd",
				"UpdateMessage\tstruct ʈ"
			],
			[
				"Add",
				"AddRequest\tstruct ʈ"
			],
			[
				"Up",
				"UpdateMessage\tstruct ʈ"
			],
			[
				"updat",
				"updateBytes\t[]byte ν"
			],
			[
				"json",
				"jsonData\t ν"
			],
			[
				"Co",
				"channelCoordinator\tComunicationChannels ν"
			],
			[
				"time",
				"timeStep\tfloat64 ν"
			],
			[
				"ph",
				"PhysicsLoop\t ƒ"
			],
			[
				"Tick",
				"Ticker\tstruct ʈ"
			],
			[
				"pr",
				"Println\tn int, err error ƒ"
			],
			[
				"move",
				"moveChannel\tchan MoveRequest ν"
			],
			[
				"Read",
				"ReadCreatePlayerEvent\tPlayer ƒ"
			],
			[
				"data",
				"dataMessage\tAddRequest ν"
			],
			[
				"Move",
				"MoveRequest\tstruct ʈ"
			],
			[
				"Moev",
				"MoveRequest\tstruct ʈ"
			],
			[
				"Cle",
				"ClientMessage\tstruct ʈ"
			],
			[
				"ini",
				"initializeConnectionData\t ƒ"
			],
			[
				"imp",
				"import\timport (...) ʂ"
			],
			[
				"Make",
				"MakePlayerObjectFromJson\tPlayer ƒ"
			],
			[
				"Play",
				"PlayerControlledObject\tinterface ¡"
			],
			[
				"pl",
				"PlayerControlledObject\tinterface ¡"
			],
			[
				"Game",
				"GameObject\tinterface ¡"
			],
			[
				"Physi",
				"PhysicsComponent\tstruct ʈ"
			],
			[
				"Bas",
				"BasePhysicsObjData\tstruct ʈ"
			],
			[
				"PLay",
				"PlayerControlledObject\tinterface ¡"
			],
			[
				"send",
				"sendMoveEvent"
			],
			[
				"key",
				"keyListener"
			],
			[
				"fu",
				"function"
			],
			[
				"Mo",
				"MovableObject\tstruct ʈ"
			],
			[
				"x",
				"XVel\tint ν"
			],
			[
				"no",
				"Now\ttime.Time ƒ"
			],
			[
				"debu",
				"debugNetwork"
			],
			[
				"de",
				"debugDraw"
			],
			[
				"frame",
				"frameId"
			],
			[
				"this",
				"thisFrameFPS"
			],
			[
				"fram",
				"frameId"
			]
		]
	},
	"buffers":
	[
		{
			"file": "networkplaygroundserver/src/gameobjects/PlayerServer.cpp",
			"settings":
			{
				"buffer_size": 1241,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 1383 files for \"Writing Update\"\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/server:\n    <binary>\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/ReplicationManagerServer.cpp:\n   71              break;\n   72          case RA_UPDATE:\n   73:             Log(Logger::CRITICAL, \"Writing Update Packet\");\n   74              writtenState =\n   75                  WriteUpdateAction( inOutputStream, networkId, dirtyState );\n\n2 matches across 2 files\n\n\nSearching 1383 files for \"for(\"\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/scratch.cpp:\n  566          {\n  567              MoveList& moveList = client->GetUnprocessedMoveList();\n  568:             for( const Move& unprocessedMove : moveList )\n  569              {\n  570                  const InputState& currentState = unprocessedMove.GetInputState();\n  ...\n  810          const MoveList& moveList = InputManager::sInstance->GetMoveList();\n  811          \n  812:         for( const Move& move : moveList )\n  813          {\n  814              float deltaTime = move.GetDeltaTime();\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/NetworkManager.cpp:\n   85  \n   86      // For now, just output the packet data\n   87:     // for(int i = 0 ; i < readByteCount ; i ++ )\n   88      // {\n   89      //     std::cout << packetMem[i] ;//Looping 5 times to print out\n\n/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/NetworkManagerServer.cpp:\n  316      // tell all client proxies to STOP replicating!\n  317      // tell all client proxies this is new...\n  318:     //    for( const auto& pair: mAddressToClientMap )\n  319      //    {\n  320      //        pair.second->GetReplicationManagerServer().ReplicateDestroy(\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/dlmalloc/malloc.c:\n 2288  \n 2289  /* Get the internal overhead associated with chunk p */\n 2290: #define overhead_for(p)\\\n 2291   (is_mmapped(p)? MMAP_CHUNK_OVERHEAD : CHUNK_OVERHEAD)\n 2292  \n ....\n 3066    (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))\n 3067  \n 3068: #define get_mstate_for(p)\\\n 3069    ((mstate)(((mchunkptr)((char*)(p) +\\\n 3070      (chunksize(p))))->prev_foot ^ mparams.magic))\n ....\n 4685      mchunkptr p  = mem2chunk(mem);\n 4686  #if FOOTERS\n 4687:     mstate fm = get_mstate_for(p);\n 4688      if (!ok_magic(fm)) {\n 4689        USAGE_ERROR_ACTION(fm, p);\n ....\n 5101          size_t psize = chunksize(p);\n 5102  #if FOOTERS\n 5103:         if (get_mstate_for(p) != m) {\n 5104            ++unfreed;\n 5105            continue;\n ....\n 5197      mstate m = gm;\n 5198  #else /* FOOTERS */\n 5199:     mstate m = get_mstate_for(oldp);\n 5200      if (!ok_magic(m)) {\n 5201        USAGE_ERROR_ACTION(m, oldmem);\n ....\n 5213          mem = internal_malloc(m, bytes);\n 5214          if (mem != 0) {\n 5215:           size_t oc = chunksize(oldp) - overhead_for(oldp);\n 5216            memcpy(mem, oldmem, (oc < bytes)? oc : bytes);\n 5217            internal_free(m, oldmem);\n ....\n 5235        mstate m = gm;\n 5236  #else /* FOOTERS */\n 5237:       mstate m = get_mstate_for(oldp);\n 5238        if (!ok_magic(m)) {\n 5239          USAGE_ERROR_ACTION(m, oldmem);\n ....\n 5381      mchunkptr p = mem2chunk(mem);\n 5382      if (is_inuse(p))\n 5383:       return chunksize(p) - overhead_for(p);\n 5384    }\n 5385    return 0;\n ....\n 5611      mchunkptr p  = mem2chunk(mem);\n 5612  #if FOOTERS\n 5613:     mstate fm = get_mstate_for(p);\n 5614      (void)msp; /* placate people compiling -Wunused */\n 5615  #else /* FOOTERS */\n ....\n 5747      mstate m = (mstate)msp;\n 5748  #else /* FOOTERS */\n 5749:     mstate m = get_mstate_for(oldp);\n 5750      if (!ok_magic(m)) {\n 5751        USAGE_ERROR_ACTION(m, oldmem);\n ....\n 5763          mem = mspace_malloc(m, bytes);\n 5764          if (mem != 0) {\n 5765:           size_t oc = chunksize(oldp) - overhead_for(oldp);\n 5766            memcpy(mem, oldmem, (oc < bytes)? oc : bytes);\n 5767            mspace_free(m, oldmem);\n ....\n 5785        mstate m = (mstate)msp;\n 5786  #else /* FOOTERS */\n 5787:       mstate m = get_mstate_for(oldp);\n 5788        (void)msp; /* placate people compiling -Wunused */\n 5789        if (!ok_magic(m)) {\n ....\n 5957      mchunkptr p = mem2chunk(mem);\n 5958      if (is_inuse(p))\n 5959:       return chunksize(p) - overhead_for(p);\n 5960    }\n 5961    return 0;\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/nvImage/rgbe.c:\n  147    else if (info) {\n  148      info->valid |= RGBE_VALID_PROGRAMTYPE;\n  149:     for(i=0;i<sizeof(info->programtype)-1;i++) {\n  150        if ((buf[i+2] == 0) || isspace(buf[i+2]))\n  151  \tbreak;\n  ...\n  157    }\n  158  \n  159:   for(;;) {\n  160      if ((buf[0] == 0)||(buf[0] == '\\n'))\n  161        return rgbe_error(rgbe_format_error,\"no FORMAT specifier found\");\n  ...\n  182  #endif\n  183  \n  184:   for(;;) {\n  185      if (fgets(buf,sizeof(buf)/sizeof(buf[0]),fp) == 0)\n  186        return rgbe_error(rgbe_read_error,NULL);\n  ...\n  316        return rgbe_error(rgbe_write_error,NULL);\n  317      }\n  318:     for(i=0;i<scanline_width;i++) {\n  319        float2rgbe(rgbe,data[RGBE_DATA_RED],\n  320  \t\t data[RGBE_DATA_GREEN],data[RGBE_DATA_BLUE]);\n  ...\n  327      /* write out each of the four channels separately run length encoded */\n  328      /* first red, then green, then blue, then exponent */\n  329:     for(i=0;i<4;i++) {\n  330        if ((err = RGBE_WriteBytes_RLE(fp,&buffer[i*scanline_width],\n  331  \t\t\t\t     scanline_width)) != RGBE_RETURN_SUCCESS) {\n  ...\n  375      ptr = &scanline_buffer[0];\n  376      /* read each of the four channels for the scanline into the buffer */\n  377:     for(i=0;i<4;i++) {\n  378        ptr_end = &scanline_buffer[(i+1)*scanline_width];\n  379        while(ptr < ptr_end) {\n  ...\n  411      }\n  412      /* now convert data from buffer into floats */\n  413:     for(i=0;i<scanline_width;i++) {\n  414        rgbe[0] = scanline_buffer[i];\n  415        rgbe[1] = scanline_buffer[i+scanline_width];\n  ...\n  470      ptr = &scanline_buffer[0];\n  471      /* read each of the four channels for the scanline into the buffer */\n  472:     for(i=0;i<4;i++) {\n  473        ptr_end = &scanline_buffer[(i+1)*scanline_width];\n  474        while(ptr < ptr_end) {\n  ...\n  506      }\n  507      /* copy byte data to output */\n  508:     for(i=0;i<scanline_width;i++) {\n  509        data[0] = scanline_buffer[i];\n  510        data[1] = scanline_buffer[i+scanline_width];\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/configure:\n    <binary>\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/drawstuff/src/drawstuff.cpp:\n  144  {\n  145    int c,d;\n  146:   for(;;) {\n  147      c = fgetc(f);\n  148      if (c==EOF) dsError (\"unexpected end of file in \\\"%s\\\"\",filename);\n  ...\n  171  {\n  172    int c,n=0;\n  173:   for(;;) {\n  174      c = fgetc(f);\n  175      if (c==EOF) dsError (\"unexpected end of file in \\\"%s\\\"\",filename);\n  ...\n  401  {\n  402    unsigned int polyindex=0;\n  403:   for(unsigned int i=0;i<_planecount;++i)\n  404      {\n  405        unsigned int pointcount=_polygons[polyindex];\n  ...\n  409  \t\t  _planes[(i*4)+1],\n  410  \t\t  _planes[(i*4)+2]);\n  411:       for(unsigned int j=0;j<pointcount;++j)\n  412  \t{\n  413  \t  glVertex3f(_points[_polygons[polyindex]*3],\n  ...\n  426  {\n  427    unsigned int polyindex=0;\n  428:   for(unsigned int i=0;i<_planecount;++i)\n  429      {\n  430        unsigned int pointcount=_polygons[polyindex];\n  ...\n  434  \t\t _planes[(i*4)+1],\n  435  \t\t _planes[(i*4)+2]);\n  436:       for(unsigned int j=0;j<pointcount;++j)\n  437  \t{\n  438  \t  glVertex3d(_points[_polygons[polyindex]*3],\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/drawstuff/src/osx.cpp:\n  115  \t}\n  116  \tfprintf( f,\"P6\\n%d %d\\n255\\n\", windowWidth, windowHeight );\n  117: \tfor( int y=windowHeight-1; y>-1; y-- ){\n  118  \t\tfwrite( buffer[y*windowWidth], 3*windowWidth, 1, f );\n  119  \t}\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/GIMPACT/include/GIMPACT/gim_radixsort.h:\n  186        while (_i_<_j_) \\\n  187        {\\\n  188:         for(; _i_<=_j_ && comp_macro(((array)[_i_]),((array)[_p_]))<=0; _i_++) ;\\\n  189          if (_i_ > _j_) \\\n  190          {\\\n  ...\n  194          else\\\n  195          {\\\n  196:           for(; _i_<=_j_ && comp_macro(((array)[_j_]),((array)[_p_]))>=0; _j_--) ;\\\n  197            if (_i_ > _j_) \\\n  198            {\\\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/GIMPACT/include/GIMPACT/gim_tri_collision.h:\n   45      GUINT32  _i, _vi, _prevclassif=32000, _classif; \\\n   46  \tGREAL _d; \\\n   47: \tfor(_i=0;_i<=polygon_point_count;_i++) \\\n   48  \t{ \\\n   49  \t\t_vi = _i%polygon_point_count; \\\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/GIMPACT/src/gim_boxpruning.cpp:\n  111          //Sort by quick sort\n  112              //Calculate keys\n  113:         for(i=0;i<count;i++)\n  114          {\n  115              GIM_CONVERT_VEC3F_GUINT_XZ_UPPER(paabb[i].maxX,paabb[i].maxZ,maxcoords[i]);\n  ...\n  124          GIM_RSORT_TOKEN * unsorted = (GIM_RSORT_TOKEN *)gim_alloc(sizeof(GIM_RSORT_TOKEN )*count);\n  125          //Calculate keys\n  126:         for(i=0;i<count;i++)\n  127          {\n  128              GIM_CONVERT_VEC3F_GUINT_XZ_UPPER(paabb[i].maxX,paabb[i].maxZ,maxcoords[i]);\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/GIMPACT/src/gim_contact.cpp:\n   40  \n   41      GUINT32 i;\n   42: \tfor(i=0;i<source_count;i++)\n   43  \t{\n   44  \t\tkeycontacts[i].m_value = i;\n   ..\n   54  \tGUINT32 key,last_key=0;\n   55  \n   56: \tfor(i=0;i<source_contacts->m_size;i++)\n   57  \t{\n   58  \t    key = keycontacts[i].m_key;\n   ..\n  103  \t//Average the contacts\n  104      GUINT32 i;\n  105: \tfor(i=1;i<source_count;i++)\n  106  \t{\n  107  \t    VEC_SUM(pcontact->m_point,pcontact->m_point,psource_contacts->m_point);\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/GIMPACT/src/gim_trimesh_capsule_collision.cpp:\n  137      dis = G_REAL_INFINITY;\n  138      GUINT32 i;\n  139:     for(i=0;i<3;i++)\n  140      {\n  141          SEGMENT_COLLISION(s1,s2,triangle->m_vertices[i],triangle->m_vertices[(i+1)%3],segment_points[0],segment_points[1]);\n  ...\n  253  \tGIM_CONTACT * pcontact;\n  254  \n  255: \tfor(i=0;i<collision_result.m_size;i++)\n  256  \t{\n  257  \t    old_contact_size = dummycontacts.m_size;\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/GIMPACT/src/gim_trimesh_ray_collision.cpp:\n   60  \tgim_trimesh_locks_work_data(trimesh);\n   61  \n   62: \tfor(unsigned int i=0;i<collision_result.m_size;i++)\n   63  \t{\n   64  \t\tgim_trimesh_get_triangle_data(trimesh,boxesresult[i],&tridata);\n   ..\n  122  \tgim_trimesh_locks_work_data(trimesh);\n  123  \n  124: \tfor(unsigned int i=0;i<collision_result.m_size;i++)\n  125  \t{\n  126  \t\tgim_trimesh_get_triangle_data(trimesh,boxesresult[i],&tridata);\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/GIMPACT/src/gim_trimesh_sphere_collision.cpp:\n  174  \tGIM_TRIANGLE_DATA tri_data;\n  175  \n  176: \tfor(i=0;i<collision_result.m_size;i++)\n  177  \t{\n  178  \t\tgim_trimesh_get_triangle_data(trimesh,boxesresult[i],&tri_data);\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/GIMPACT/src/gim_trimesh_trimesh_collision.cpp:\n   52  \tGREAL _dist;\\\n   53  \tdeep_points_count = 0;\\\n   54: \tfor(_k=0;_k<point_count;_k++)\\\n   55  \t{\\\n   56  \t    _dist = -DISTANCE_PLANE_POINT(plane,points[_k]);\\\n   ..\n   73      else\\\n   74      {\\\n   75:         for(_k=0;_k<deep_points_count;_k++)\\\n   76          {\\\n   77              VEC_COPY(deep_points[_k],points[_max_candidates[_k]]);\\\n   ..\n  185  \t{\n  186  \t    contact_data->m_point_count = deep2_count;\n  187: \t    for(mostdir=0;mostdir<deep2_count;mostdir++)\n  188  \t    {\n  189  \t        VEC_COPY(contact_data->m_points[mostdir] ,deep_points2[mostdir]);\n  ...\n  193  \t{\n  194  \t\tcontact_data->m_point_count = deep1_count;\n  195: \t    for(mostdir=0;mostdir<deep1_count;mostdir++)\n  196  \t    {\n  197  \t        VEC_COPY(contact_data->m_points[mostdir] ,deep_points1[mostdir]);\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/libccd/aclocal.m4:\n 3737      lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n 3738  \"     {last_section=section; section=\\$ 3};\"\\\n 3739: \"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n 3740  \"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n 3741  \"     \\$ 0!~/External *\\|/{next};\"\\\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/libccd/configure:\n    <binary>\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/m4/libtool.m4:\n 3723      lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n 3724  \"     {last_section=section; section=\\$ 3};\"\\\n 3725: \"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n 3726  \"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n 3727  \"     \\$ 0!~/External *\\|/{next};\"\\\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/collision_cylinder_box.cpp:\n  167      dVector3\tvTempBoxVertices[8];\n  168      // transform vertices in absolute space\n  169:     for(i=0; i < 8; i++) \n  170      {\n  171          dMultiplyMat3Vec3(m_mBoxRot,m_avBoxVertices[i], vTempBoxVertices[i]);\n  ...\n  187  \n  188      // calculate nCYLINDER_SEGMENT-gon points\n  189:     for(i = 0; i < nCYLINDER_SEGMENT; i++) \n  190      {\n  191          m_avCylinderNormals[i][0] = -dCos(fAngle);\n  ...\n  414      dVector3\tvTemp2;\n  415      // here we check box's vertices axis\n  416:     for(i=0; i< 8; i++) \n  417      {\n  418          //vAxis = ( vCylinderAxis cross (m_avBoxVertices[i] - vCylinderPos));\n  ...\n  838  \n  839      int i=0;\n  840:     for(i=0; i<MAX_CYLBOX_CLIP_POINTS; i++) \n  841      {\n  842          avTempArray1[i][0] = REAL(0.0);\n  ...\n  874      dMatrix3Inv(m_mCylinderRot,mCylinderInv);\n  875  \n  876:     for(i=0; i<4; i++) \n  877      {\n  878          dVector3Subtract(avPoints[i],vCylinderCirclePos,vTemp);\n  ...\n  915      if (nCircleSegment % 2)\n  916      {\n  917:         for( i=0; i<iTmpCounter2; i++)\n  918          {\n  919              dMultiply0_331(vPoint,m_mCylinderRot,avTempArray2[i]);\n  ...\n  949      else\n  950      {\n  951:         for( i=0; i<iTmpCounter1; i++)\n  952          {\n  953              dMultiply0_331(vPoint,m_mCylinderRot,avTempArray1[i]);\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/collision_cylinder_trimesh.cpp:\n  287  \n  288      // for each vertex \n  289:     for(int i = 0; i < 3; i++) \n  290      {\n  291          // find minimum\n  ...\n  724      dQuatInv(m_qCylinderRot , m_qInvCylinderRot);\n  725      // transform triangle points to space of cylinder circle\n  726:     for(i=0; i<3; i++) \n  727      {\n  728          dVector3Subtract(avPoints[i] , vCylinderCirclePos , vTemp);\n  ...\n  765      if (nCircleSegment %2)\n  766      {\n  767:         for( i=0; i<iTmpCounter2; i++)\n  768          {\n  769              dQuatTransform(m_qCylinderRot,avTempArray2[i], vPoint);\n  ...\n  790      else\n  791      {\n  792:         for( i=0; i<iTmpCounter1; i++)\n  793          {\n  794              dQuatTransform(m_qCylinderRot,avTempArray1[i], vPoint);\n  ...\n  936      // calculate plane normals\n  937      // axis dependant code\n  938:     for(int i=0; i<nCYLINDER_CIRCLE_SEGMENTS; i++) \n  939      {\n  940          m_avCylinderNormals[i][0] = -dCos(fAngle);\n  ...\n 1157          gim_trimesh_locks_work_data(ptrimesh);\n 1158  \n 1159:         for(unsigned int i=0;i<collision_result.m_size;i++)\n 1160          {\n 1161              const int Triint = boxesresult[i];\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/collision_sapspace.cpp:\n  395      GeomList.setSize( geomSize + dirtySize ); // ensure space in geom list\n  396  \n  397:     for( int i = 0; i < dirtySize; ++i ) {\n  398          dxGeom* g = DirtyList[i];\n  399          if( IS_SPACE(g) ) {\n  ...\n  429      TmpInfGeomList.setSize(0);\n  430      int axis0max = ax0idx + 1;\n  431:     for( int i = 0; i < geom_count; ++i ) {\n  432          dxGeom* g = GeomList[i];\n  433          if( !GEOM_ENABLED(g) ) // skip disabled ones\n  ...\n  454      // collide overlapping\n  455      int overlapCount = overlapBoxes.size();\n  456:     for( int j = 0; j < overlapCount; ++j )\n  457      {\n  458          const Pair& pair = overlapBoxes[ j ];\n  ...\n  471  \n  472          // collide infinite ones\n  473:         for( n = m+1; n < infSize; ++n ) {\n  474              dxGeom* g2 = TmpInfGeomList[n];\n  475              collideGeomsNoAABBs( g1, g2, data, callback );\n  ...\n  477  \n  478          // collide infinite ones with normal ones\n  479:         for( n = 0; n < normSize; ++n ) {\n  480              dxGeom* g2 = TmpGeomList[n];\n  481              collideGeomsNoAABBs( g1, g2, data, callback );\n  ...\n  513      // 1) Build main list using the primary axis\n  514      //  NOTE: uses floats instead of dReals because that's what radix sort wants\n  515:     for( int i = 0; i < count; ++i )\n  516          poslist[ i ] = (float)TmpGeomList[i]->aabb[ ax0idx ];\n  517      poslist[ count++ ] = FLT_MAX;\n  ...\n  646              {\n  647                  uint32* const Ranks1 = GetRanks1();\n  648:                 for(uint32 i=0;i<nb;i++)\tRanks1[i] = i;\n  649                  return Ranks1;\n  650              }\n  ...\n  692      // responsible for the sign. 128 last values because the 128 first ones are related to positive numbers.\n  693      uint32* h3= &mHistogram[768];\n  694:     for(uint32 i=128;i<256;i++)\tNbNegativeValues += h3[i];\t// 768 for last histogram, 128 for negative part\n  695  \n  696      // Radix sort, j is the pass number (0=LSB, 3=MSB)\n  697:     for(uint32 j=0;j<4;j++)\n  698      {\n  699          // Should we care about negative values?\n  ...\n  708                  // Create offsets\n  709                  mLink[0] = Ranks2;\n  710:                 for(uint32 i=1;i<256;i++)\t\tmLink[i] = mLink[i-1] + CurCount[i-1];\n  711  \n  712                  // Perform Radix Sort\n  ...\n  715                  if (!AreRanksValid())\n  716                  {\n  717:                     for(uint32 i=0;i<nb;i++)\n  718                      {\n  719                          *mLink[InputBytes[i<<2]]++ = i;\n  ...\n  750                  // Create biased offsets, in order for negative numbers to be sorted as well\n  751                  mLink[0] = Ranks2 + NbNegativeValues;\t\t\t\t\t\t\t\t\t\t// First positive number takes place after the negative ones\n  752:                 for(uint32 i=1;i<128;i++)\t\tmLink[i] = mLink[i-1] + CurCount[i-1];\t\t// 1 to 128 for positive numbers\n  753  \n  754                  // We must reverse the sorting order for negative numbers!\n  755                  mLink[255] = Ranks2;\n  756:                 for(uint32 i=0;i<127;i++)\tmLink[254-i] = mLink[255-i] + CurCount[255-i];\t\t// Fixing the wrong order for negative values\n  757:                 for(uint32 i=128;i<256;i++)\tmLink[i] += CurCount[i];\t\t\t\t\t\t\t// Fixing the wrong place for negative values\n  758  \n  759                  // Perform Radix Sort\n  760                  if (!AreRanksValid())\n  761                  {\n  762:                     for(uint32 i=0;i<nb;i++)\n  763                      {\n  764                          uint32 Radix = input[i]>>24;\t\t\t\t\t\t\t// Radix byte, same as above. AND is useless here (uint32).\n  ...\n  774                      uint32* const Ranks1 = GetRanks1();\n  775  \n  776:                     for(uint32 i=0;i<nb;i++)\n  777                      {\n  778                          uint32 Radix = input[Ranks1[i]]>>24;\t\t\t\t\t\t\t// Radix byte, same as above. AND is useless here (uint32).\n  ...\n  794                          uint32* const Ranks2 = GetRanks2();\n  795                          // ###Possible?\n  796:                         for(uint32 i=0;i<nb;i++)\n  797                          {\n  798                              Ranks2[i] = nb-i-1;\n  ...\n  805                          uint32* const Ranks1 = GetRanks1();\n  806                          uint32* const Ranks2 = GetRanks2();\n  807:                         for(uint32 i=0;i<nb;i++)\tRanks2[i] = Ranks1[nb-i-1];\n  808                      }\n  809  \n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/collision_trimesh_box.cpp:\n  684  \n  685          // calculate point on box edge\n  686:         for( int i=0; i<3; i++) {\n  687              dVector3 vRotCol;\n  688              GETCOL(m_mHullBoxRot,i,vRotCol);\n  ...\n  826          GETCOL(m_mHullBoxRot,iB2,vRotCol2);\n  827  \n  828:         for(int x=0;x<3;x++) {\n  829              avPoints[0][x] = vCenter[x] + (m_vBoxHalfSize[iB1] * vRotCol[x]) - (m_vBoxHalfSize[iB2] * vRotCol2[x]);\n  830              avPoints[1][x] = vCenter[x] - (m_vBoxHalfSize[iB1] * vRotCol[x]) - (m_vBoxHalfSize[iB2] * vRotCol2[x]);\n  ...\n  842  \n  843          // zeroify vectors - necessary?\n  844:         for(int i=0; i<9; i++) {\n  845              avTempArray1[i][0]=0;\n  846              avTempArray1[i][1]=0;\n  ...\n  959  \n  960          // zeroify vectors - necessary?\n  961:         for(int i=0; i<9; i++) {\n  962              avTempArray1[i][0]=0;\n  963              avTempArray1[i][1]=0;\n  ...\n 1325      int ctContacts0 = 0;\n 1326  \n 1327:     for(unsigned int i=0;i<collision_result.m_size;i++)\n 1328      {\n 1329          dVector3 dv[3];\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/collision_trimesh_ccylinder.cpp:\n  388  \n  389      // for each vertex \n  390:     for(int i=0; i<3; i++) \n  391      {\n  392          // find minimum\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/collision_trimesh_opcode.cpp:\n  128      if( Single ) {\n  129          const char* verts = (const char*)Vertices;\n  130:         for( int i = 0; i < VertexCount; ++i ) {\n  131              const float* v = (const float*)verts;\n  132              if( v[0] > AABBMax[0] ) AABBMax[0] = v[0];\n  ...\n  140      } else {\n  141          const char* verts = (const char*)Vertices;\n  142:         for( int i = 0; i < VertexCount; ++i ) {\n  143              const double* v = (const double*)verts;\n  144              if( v[0] > AABBMax[0] ) AABBMax[0] = (dReal) v[0];\n  ...\n  586      int i, n;\n  587      n = SphereTCCache.size();\n  588:     for( i = 0; i < n; ++i ) {\n  589          SphereTCCache[i].~SphereTC();\n  590      }\n  591      SphereTCCache.setSize(0);\n  592      n = BoxTCCache.size();\n  593:     for( i = 0; i < n; ++i ) {\n  594          BoxTCCache[i].~BoxTC();\n  595      }\n  596      BoxTCCache.setSize(0);\n  597      n = CapsuleTCCache.size();\n  598:     for( i = 0; i < n; ++i ) {\n  599          CapsuleTCCache[i].~CapsuleTC();\n  600      }\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/collision_trimesh_plane.cpp:\n  207      vec4f * planecontact_results = GIM_DYNARRAY_POINTER(vec4f,collision_result);\n  208  \n  209:     for(unsigned int i = 0; i < contactcount; i++ )\n  210      {\n  211          pcontact = SAFECONTACT(flags, contacts, i, skip);\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/collision_trimesh_trimesh_new.cpp:\n  204  dContactGeom *AddContactToNode(const CONTACT_KEY * contactkey,CONTACT_KEY_HASH_NODE * node)\n  205  {\n  206:     for(int i=0;i<node->m_keycount;i++)\n  207      {\n  208          if(node->m_keyarray[i].m_key == contactkey->m_key)\n  ...\n  770          return;\n  771      }\n  772:     for(i=0;i<=Contacts.Count;i++)\n  773      {\n  774          vi = i%Contacts.Count;\n  ...\n  936      vmin = DOT(vertices[0],dir);\n  937      vmax = vmin;\n  938:     for(i=1;i<verticecount;i++)\n  939      {\n  940          dist = DOT(vertices[i],dir);\n  ...\n  957  \n  958      deep_points.Count = 0;\n  959:     for(i=0;i<points.Count;i++)\n  960      {\n  961          dist = DOT(plane_normal,points.Points[i]) - plane_dist;\n  ...\n  974      }\n  975  \n  976:     for(i=0;i<deep_points.Count;i++)\n  977      {\n  978          SET(deep_points.Points[i],points.Points[max_candidates[i]]);\n  ...\n  996      clipped_points.Count = pointcount;\n  997      memcpy(&clipped_points.Points[0],&points[0],pointcount*sizeof(dVector3));\n  998:     for(i=0;i<3;i++)\n  999      {\n 1000          if (BuildEdgePlane(\n ....\n 1107      ///test each edge plane\n 1108  \n 1109:     /*for(i=0;i<3;i++)\n 1110      {\n 1111  \n 1112  \n 1113:     for(j=0;j<3;j++)\n 1114      {\n 1115  \n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/convex.cpp:\n   75      unsigned int *index=polygons+1;\n   76  \n   77:     for(unsigned int i=0;i<planecount;++i)\n   78      {\n   79          dAASSERT (*points_in_poly > 2 );\n   ..\n  109      aabb[4] = point[2]+final_posr->pos[2];\n  110      aabb[5] = point[2]+final_posr->pos[2];\n  111:     for(unsigned int i=3;i<(pointcount*3);i+=3)\n  112      {\n  113          dMultiply0_331 (point,final_posr->R,&points[i]);\n  ...\n  130      edge e;\n  131      bool isinset;\n  132:     for(unsigned int i=0;i<planecount;++i)\n  133      {\n  134:         for(unsigned int j=0;j<*points_in_poly;++j)\n  135          {\n  136              e.first = dMIN(index[j],index[(j+1)%*points_in_poly]);\n  137              e.second = dMAX(index[j],index[(j+1)%*points_in_poly]);\n  138              isinset=false;\n  139:             for(unsigned int k=0;k<edgecount;++k)\n  140              {\n  141                  if((edges[k].first==e.first)&&(edges[k].second==e.second))\n  ...\n  180      std::vector<Arc> A;\n  181      A.reserve(edgecount);\n  182:     for(unsigned int i=0;i<edgecount;++i)\n  183      {\n  184          this->GetFacesSharedByEdge(i,A[i].normals);\n  ...\n  187      std::vector<Polygon> S;\n  188      S.reserve(pointcount);\n  189:     for(unsigned int i=0;i<pointcount;++i)\n  190      {\n  191          this->GetFacesSharedByVertex(i,S[i].normals);\n  ...\n  486      tmp[2] = p[2] - convex->final_posr->pos[2];\n  487      dMultiply1_331 (lp,convex->final_posr->R,tmp);\n  488:     for(unsigned int i=0;i<convex->planecount;++i)\n  489      {\n  490          if((\n  ...\n  536      b[2]=convex->final_posr->pos[2]+b[2];\n  537      \n  538:     for(unsigned i=0; i != pointcount; ++i)\n  539      {\n  540          a[0] = b[0];\n  ...\n  607  \n  608      unsigned int totalsign = 0;\n  609:     for(unsigned int i=0;i<Convex->pointcount;++i)\n  610      {\n  611          dMultiply0_331 (v2,Convex->final_posr->R,&Convex->points[(i*3)]);\n  ...\n  673      offsetpos[1]=Sphere->final_posr->pos[1]-Convex->final_posr->pos[1];\n  674      offsetpos[2]=Sphere->final_posr->pos[2]-Convex->final_posr->pos[2];\n  675:     for(unsigned int i=0;i<Convex->planecount;++i)\n  676      {\n  677          // apply rotation to the plane\n  ...\n  844      dVector4 plane,depthplane;\n  845      dReal t;\n  846:     for(unsigned int i = 0;i<cvx1.edgecount;++i)\n  847      {\n  848          // Rotate\n  ...\n  859          e2[2]+=cvx1.final_posr->pos[2];\n  860          unsigned int* pPoly=cvx2.polygons;\n  861:         for(size_t j=0;j<cvx2.planecount;++j)\n  862          {\n  863              // Rotate\n  ...\n  878                  {\n  879                      target->depth = dInfinity;\n  880:                     for(size_t k=0;k<cvx2.planecount;++k)\n  881                      {\n  882                          if(k==j) continue; // we're already at 0 depth on this plane\n  ...\n  932      dReal min,max,min1,max1,min2,max2,depth;\n  933      dVector4 plane;\n  934:     for(unsigned int i=0;i<cvx1.planecount;++i)\n  935      {\n  936          // -- Apply Transforms --\n  ...\n  987      dVector3Inv(dist);\n  988      unsigned int s2 = cvx2.SupportIndex(dist);\n  989:     for(unsigned int i = 0;i<cvx1.edgecount;++i)\n  990      {\n  991          // Skip edge if it doesn't contain the extremal vertex\n  ...\n  997          e1[1]=e1b[1]-e1a[1];\n  998          e1[2]=e1b[2]-e1a[2];\n  999:         for(unsigned int j = 0;j<cvx2.edgecount;++j)\n 1000          {\n 1001              // Skip edge if it doesn't contain the extremal vertex\n ....\n 1062      dMultiply1_331(nis,ccso.g2->final_posr->R,ccso.plane);\n 1063      SavedDot = dCalcVectorDot3(nis,ccso.g2->planes);\n 1064:     for(unsigned int i=1;i<ccso.g2->planecount;++i)\n 1065      {\n 1066          Dot = dCalcVectorDot3(nis,ccso.g2->planes+(i*4));\n ....\n 1085      dMultiply1_331(dics,cvx.final_posr->R,tmp);\n 1086      SavedDot = dCalcVectorDot3(dics,cvx.planes);\n 1087:     for(unsigned int i=1;i<cvx.planecount;++i)\n 1088      {\n 1089          Dot = dCalcVectorDot3(dics,cvx.planes+(i*4));\n ....\n 1169              rplane[2]=-rplane[2];\n 1170              rplane[3]=-rplane[3];\n 1171:             for(unsigned int i=0;i<incident_side;++i)\n 1172              {\n 1173                  pIncidentPoly+=pIncidentPoly[0]+1;\n ....\n 1182              dVector3Copy(r2,tmp);\n 1183              dMultiply1_331(r2,cvx1.final_posr->R,tmp);\n 1184:             for(unsigned int i=0;i<pIncidentPoly[0];++i)\n 1185              {\n 1186                  // Move i2 to i1, r2 to r1\n ....\n 1195                  dMultiply1_331(r2,cvx1.final_posr->R,tmp);\n 1196                  outside=false;\n 1197:                 for(unsigned int j=0;j<cvx1.planecount;++j)\n 1198                  {\n 1199                      plane[0]=cvx1.planes[(j*4)+0];\n ....\n 1216                          // Check the resulting point again to make sure it is inside the reference convex\n 1217                          out=false;\n 1218:                         for(unsigned int k=0;k<cvx1.planecount;++k)\n 1219                          {\n 1220                              d = p[0]*cvx1.planes[(k*4)+0]+\n ....\n 1298                  (iplane[2] * cvx2.final_posr->pos[2]));\n 1299              // get reference face\n 1300:             for(unsigned int i=0;i<reference_side;++i)\n 1301              {\n 1302                  pReferencePoly+=pReferencePoly[0]+1;\n 1303              }\n 1304              pReferencePoints = pReferencePoly+1;\n 1305:             for(unsigned int i=0;i<pReferencePoly[0];++i)\n 1306              {\n 1307                  dMultiply0_331(i1,cvx1.final_posr->R,&cvx1.points[(pReferencePoints[i]*3)]);\n ....\n 1322                  // Check if it is outside the incident convex\n 1323                  out = false;\n 1324:                 for(unsigned int j=0;j<cvx2.planecount;++j)\n 1325                  {\n 1326                      d = r1[0]*cvx2.planes[(j*4)+0]+\n ....\n 1334                      // check that the point is not a duplicate\n 1335                      outside = false;\n 1336:                     for(int j=0;j<contacts;++j)\n 1337                      {\n 1338                          if((SAFECONTACT(flags, contact, j, skip)->pos[0]==i1[0])&&\n ....\n 1420      destination[1]+=origin[1];\n 1421      destination[2]+=origin[2];\n 1422:     for(int i=0;i<convex->planecount;++i)\n 1423      {\n 1424          // Rotate\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/mass.cpp:\n  257      dReal TP[3] = {0., 0., 0.};\n  258  \n  259:     for( i = 0; i < triangles; i++ )\t \t\n  260      {\n  261          dVector3 v[3];\n  ...\n  299                      P1 = Pa = Pb = Paa = Pab = Pbb = Paaa = Paab = Pabb = Pbbb = 0.0;\n  300  \n  301:                     for( int j = 0; j < 3; j++)\n  302                      {\n  303                          switch(j)\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ode/src/quickstep.cpp:\n   85      dReal s;\n   86  \n   87:     for(unsigned int i=0, k = 0; i<q; k += 12, i++)\n   88      {\n   89          s = C[i]; //C[i] and B[n+k] cannot overlap because its value has been read into a temporary.\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_AABBCollider.cpp:\n  589  \n  590  \t\t// Loop through all triangles\n  591: \t\tfor(udword i=0;i<Nb;i++)\n  592  \t\t{\n  593  \t\t\tAABB_PRIM(i, OPC_CONTACT)\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_AABBTree.cpp:\n  105  \t// Loop through all node-related primitives. Their indices range from mNodePrimitives[0] to mNodePrimitives[mNbPrimitives-1].\n  106  \t// Those indices map the global list in the tree builder.\n  107: \tfor(udword i=0;i<mNbPrimitives;i++)\n  108  \t{\n  109  \t\t// Get index in global list\n  ...\n  178  \t\t// Compute the means\n  179  \t\tPoint Means(0.0f, 0.0f, 0.0f);\n  180: \t\tfor(udword i=0;i<mNbPrimitives;i++)\n  181  \t\t{\n  182  \t\t\tudword Index = mNodePrimitives[i];\n  ...\n  187  \t\t// Compute variances\n  188  \t\tPoint Vars(0.0f, 0.0f, 0.0f);\n  189: \t\tfor(udword i=0;i<mNbPrimitives;i++)\n  190  \t\t{\n  191  \t\t\tudword Index = mNodePrimitives[i];\n  ...\n  233  \t\tudword SortedAxis[] = { 0, 1, 2 };\n  234  \t\tfloat* Keys = (float*)&Extents.x;\n  235: \t\tfor(udword j=0;j<3;j++)\n  236  \t\t{\n  237: \t\t\tfor(udword i=0;i<2;i++)\n  238  \t\t\t{\n  239  \t\t\t\tif(Keys[SortedAxis[i]]<Keys[SortedAxis[i+1]])\n  ...\n  414  \tCHECKALLOC(mIndices);\n  415  \t// Identity permutation\n  416: \tfor(udword i=0;i<builder->mNbPrimitives;i++)\tmIndices[i] = i;\n  417  \n  418  \t// Setup initial node. Here we have a complete permutation of the app's primitives.\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_LSSAABBOverlap.h:\n  452      // Apply reflections so that direction vector has nonnegative components.\n  453      bool bReflect[3];\n  454:     for(int i=0;i<3;i++)\n  455      {\n  456          if(kDir[i]<0.0f)\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_LSSCollider.cpp:\n  618  \n  619  \t\t// Loop through all triangles\n  620: \t\tfor(udword i=0;i<Nb;i++)\n  621  \t\t{\n  622  \t\t\tLSS_PRIM(i, OPC_CONTACT)\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_MeshInterface.cpp:\n  193  \t// Using callbacks, we don't have access to vertex indices. Nevertheless we still can check for\n  194  \t// redundant vertex pointers, which cover all possibilities (callbacks/pointers/strides).\n  195: \tfor(udword i=0;i<mNbTris;i++)\n  196  \t{\n  197  \t\tGetTriangle(VP, i, VC);\n  ...\n  376  \t#endif\n  377  \n  378: \tfor(udword i=0;i<mNbTris;i++)\n  379  \t{\n  380  \t\tconst IndexedTriangle* T = (const IndexedTriangle*)(((ubyte*)mTris) + i * Stride);\n  ...\n  382  \t}\n  383  \n  384: \tfor(udword i=0;i<mNbTris;i++)\n  385  \t{\n  386  \t\tIndexedTriangle* T = (IndexedTriangle*)(((ubyte*)mTris) + i * Stride);\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_OBBCollider.cpp:\n  305  \n  306  \t// Precompute absolute box-to-model rotation matrix\n  307: \tfor(udword i=0;i<3;i++)\n  308  \t{\n  309: \t\tfor(udword j=0;j<3;j++)\n  310  \t\t{\n  311  \t\t\t// Epsilon value prevents floating-point inaccuracies (strategy borrowed from RAPID)\n  ...\n  660  \n  661  \t\t// Loop through all triangles\n  662: \t\tfor(udword i=0;i<Nb;i++)\n  663  \t\t{\n  664  \t\t\tOBB_PRIM(i, OPC_CONTACT)\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_OptimizedTree.cpp:\n  480  \tPoint CMax(MIN_FLOAT, MIN_FLOAT, MIN_FLOAT);\t\t\t\t\t\t\t\t\t\t\t\t\\\n  481  \tPoint EMax(MIN_FLOAT, MIN_FLOAT, MIN_FLOAT);\t\t\t\t\t\t\t\t\t\t\t\t\\\n  482: \tfor(udword i=0;i<mNbNodes;i++)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n  483  \t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n  484  \t\tif(fabsf(Nodes[i].mAABB.mCenter.x)>CMax.x)\tCMax.x = fabsf(Nodes[i].mAABB.mCenter.x);\t\\\n  ...\n  526  \t\tPoint Min = Nodes[i].mAABB.mCenter - Nodes[i].mAABB.mExtents;\t\t\t\t\\\n  527  \t\t/* For each axis */\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n  528: \t\tfor(udword j=0;j<3;j++)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n  529  \t\t{\t/* Dequantize the box center */\t\t\t\t\t\t\t\t\t\t\t\\\n  530  \t\t\tfloat qc = float(mNodes[i].mAABB.mCenter[j]) * mCenterCoeff[j];\t\t\t\\\n  ...\n  616  \t\t// Quantize\n  617  \t\tsize_t Data;\n  618: \t\tfor(udword i=0;i<mNbNodes;i++)\n  619  \t\t{\n  620  \t\t\tPERFORM_QUANTIZATION\n  ...\n  731  \t\t// Quantize\n  732  \t\tsize_t Data;\n  733: \t\tfor(udword i=0;i<mNbNodes;i++)\n  734  \t\t{\n  735  \t\t\tPERFORM_QUANTIZATION\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_PlanesCollider.cpp:\n  193  \t\tInvertPRMatrix(InvWorldM, *worldm);\n  194  \n  195: //\t\tfor(udword i=0;i<nb_planes;i++)\tmPlanes[i] = planes[i] * InvWorldM;\n  196: \t\tfor(udword i=0;i<nb_planes;i++)\tTransformPlane(mPlanes[i], planes[i], InvWorldM);\n  197  \t}\n  198  \telse CopyMemory(mPlanes, planes, nb_planes*sizeof(Plane));\n  ...\n  543  \t\t// Loop through all triangles\n  544  \t\tudword clip_mask = (1<<mNbPlanes)-1;\n  545: \t\tfor(udword i=0;i<Nb;i++)\n  546  \t\t{\n  547  \t\t\tPLANES_PRIM(i, OPC_CONTACT)\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_PlanesTriOverlap.h:\n   29  \t}\n   30  /*\n   31: \tfor(udword i=0;i<6;i++)\n   32  \t{\n   33  \t\tfloat d0 = p[i].Distance(mLeafVerts[0]);\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_SphereAABBOverlap.h:\n   17  \t//from the sphere to the box\n   18  #ifdef OLDIES\n   19: \tfor(udword i=0;i<3;i++)\n   20  \t{\n   21  \t\tfloat tmp = mCenter[i] - center[i];\n   ..\n  101  \t//find the square of the distance\n  102  \t//from the sphere to the box\n  103: \tfor(udword i=0;i<3;i++)\n  104  \t{\n  105  float Min = center[i] - extents[i];\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_SphereCollider.cpp:\n  106  \t\tudword Nb = mIMesh->GetNbTriangles();\n  107  \t\t// Loop through all triangles\n  108: \t\tfor(udword i=0;i<Nb;i++)\n  109  \t\t{\n  110  \t\t\tSPHERE_PRIM(i, OPC_CONTACT)\n  ...\n  632  \n  633  \t\t// Loop through all triangles\n  634: \t\tfor(udword i=0;i<Nb;i++)\n  635  \t\t{\n  636  \t\t\tSPHERE_PRIM(i, OPC_CONTACT)\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_TreeBuilders.cpp:\n   73  \n   74  \t// Loop through boxes\n   75: \tfor(udword i=1;i<nb_prims;i++)\n   76  \t{\n   77  \t\t// Update global box\n   ..\n  211  \t\tVertexPointers VP;\n  212  \t\tConversionArea VC;\n  213: \t\tfor(udword i=0;i<nb_prims;i++)\n  214  \t\t{\n  215  \t\t\t// Get current triangle-vertices\n  ...\n  243  \n  244  \t// Loop through vertices\n  245: \tfor(udword i=0;i<nb_prims;i++)\n  246  \t{\n  247  \t\t// Update global box\n  ...\n  296  \t\t// Loop through vertices\n  297  \t\tfloat SplitValue = 0.0f;\n  298: \t\tfor(udword i=0;i<nb_prims;i++)\n  299  \t\t{\n  300  \t\t\t// Update split value\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_TreeCollider.cpp:\n  257  \n  258  \t// Precompute absolute 1-to-0 rotation matrix\n  259: \tfor(udword i=0;i<3;i++)\n  260  \t{\n  261: \t\tfor(udword j=0;j<3;j++)\n  262  \t\t{\n  263  \t\t\t// Epsilon value prevents floating-point inaccuracies (strategy borrowed from RAPID)\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/OPC_TriBoxOverlap.h:\n   12  {\n   13  \tPoint vmin, vmax;\n   14: \tfor(udword q=0;q<=2;q++)\n   15  \t{\n   16  \t\tif(normal[q]>0.0f)\t{ vmin[q]=-maxbox[q]; vmax[q]=maxbox[q]; }\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/Ice/IceAABB.cpp:\n  390  \n  391  \t// Transform all outline corners into 2D screen space\n  392: \tfor(sdword i=0;i<num;i++)\n  393  \t{\n  394  \t\tHPoint Projected;\n  ...\n  399  \tfloat Sum = (dst[num-1][0] - dst[0][0]) * (dst[num-1][1] + dst[0][1]);\n  400  \n  401: \tfor(int i=0; i<num-1; i++)\n  402  \t\tSum += (dst[i][0] - dst[i+1][0]) * (dst[i][1] + dst[i+1][1]);\n  403  \n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/Ice/IceContainer.cpp:\n  225  {\n  226  \t// Look for the entry\n  227: \tfor(udword i=0;i<mCurNbEntries;i++)\n  228  \t{\n  229  \t\tif(mEntries[i]==entry)\n  ...\n  247  {\n  248  \t// Look for the entry\n  249: \tfor(udword i=0;i<mCurNbEntries;i++)\n  250  \t{\n  251  \t\tif(mEntries[i]==entry)\n  ...\n  270  {\n  271  \t// Look for the entry\n  272: \tfor(udword i=0;i<mCurNbEntries;i++)\n  273  \t{\n  274  \t\tif(mEntries[i]==entry)\n  ...\n  277  \t\t\t// Shift entries to preserve order. You really should use a linked list instead.\n  278  \t\t\tmCurNbEntries--;\n  279: \t\t\tfor(udword j=i;j<mCurNbEntries;j++)\n  280  \t\t\t{\n  281  \t\t\t\tmEntries[j] = mEntries[j+1];\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/Ice/IceMatrix3x3.h:\n  109  \t\tinline_\tBOOL\t\t\tIsValid()\t\t\t\tconst\n  110  \t\t\t\t\t\t\t\t{\n  111: \t\t\t\t\t\t\t\t\tfor(udword j=0;j<3;j++)\n  112  \t\t\t\t\t\t\t\t\t{\n  113: \t\t\t\t\t\t\t\t\t\tfor(udword i=0;i<3;i++)\n  114  \t\t\t\t\t\t\t\t\t\t{\n  115  \t\t\t\t\t\t\t\t\t\t\tif(!IsValidFloat(m[j][i]))\treturn FALSE;\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/Ice/IceMatrix4x4.h:\n  201  \t\tinline_\tBOOL\t\t\t\tIsValid()\t\tconst\n  202  \t\t\t\t\t\t\t\t\t{\n  203: \t\t\t\t\t\t\t\t\t\tfor(udword j=0;j<4;j++)\n  204  \t\t\t\t\t\t\t\t\t\t{\n  205: \t\t\t\t\t\t\t\t\t\t\tfor(udword i=0;i<4;i++)\n  206  \t\t\t\t\t\t\t\t\t\t\t{\n  207  \t\t\t\t\t\t\t\t\t\t\t\tif(!IsValidFloat(m[j][i]))\treturn FALSE;\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/Ice/IceOBB.cpp:\n  181  \n  182  \tconst Point* VN = (const Point*)VertexNormals;\n  183: \tfor(udword i=0;i<8;i++)\n  184  \t{\n  185  \t\tpts[i] = VN[i] * mRot;\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/Ice/IceRevisitedRadix.cpp:\n  106  \t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n  107  \t\t\tmNbHits++;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n  108: \t\t\tfor(udword i=0;i<nb;i++)\tmRanks[i] = i;\t\t\t\t\t\t\t\t\t\t\\\n  109  \t\t\treturn *this;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n  110  \t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n  ...\n  270  \t\t// responsible for the sign. 128 last values because the 128 first ones are related to positive numbers.\n  271  \t\tudword* h3= &mHistogram[768];\n  272: \t\tfor(udword i=128;i<256;i++)\tNbNegativeValues += h3[i];\t// 768 for last histogram, 128 for negative part\n  273  \t}\n  274  \n  275  \t// Radix sort, j is the pass number (0=LSB, 3=MSB)\n  276: \tfor(udword j=0;j<4;j++)\n  277  \t{\n  278  \t\tCHECK_PASS_VALIDITY(j);\n  ...\n  289  \t\t\t\t// Create offsets\n  290  //\t\t\t\tmOffset[0] = 0;\n  291: //\t\t\t\tfor(udword i=1;i<256;i++)\t\tmOffset[i] = mOffset[i-1] + CurCount[i-1];\n  292  \t\t\t\tmLink[0] = mRanks2;\n  293: \t\t\t\tfor(udword i=1;i<256;i++)\t\tmLink[i] = mLink[i-1] + CurCount[i-1];\n  294  \t\t\t}\n  295  \t\t\telse\n  ...\n  300  //\t\t\t\tmOffset[0] = NbNegativeValues;\t\t\t\t\t\t\t\t\t\t\t\t// First positive number takes place after the negative ones\n  301  \t\t\t\tmLink[0] = &mRanks2[NbNegativeValues];\t\t\t\t\t\t\t\t\t\t// First positive number takes place after the negative ones\n  302: //\t\t\t\tfor(udword i=1;i<128;i++)\t\tmOffset[i] = mOffset[i-1] + CurCount[i-1];\t// 1 to 128 for positive numbers\n  303: \t\t\t\tfor(udword i=1;i<128;i++)\t\tmLink[i] = mLink[i-1] + CurCount[i-1];\t\t// 1 to 128 for positive numbers\n  304  \n  305  \t\t\t\t// Fixing the wrong place for negative values\n  306  //\t\t\t\tmOffset[128] = 0;\n  307  \t\t\t\tmLink[128] = mRanks2;\n  308: //\t\t\t\tfor(i=129;i<256;i++)\t\t\tmOffset[i] = mOffset[i-1] + CurCount[i-1];\n  309: \t\t\t\tfor(udword i=129;i<256;i++)\t\tmLink[i] = mLink[i-1] + CurCount[i-1];\n  310  \t\t\t}\n  311  \n  ...\n  315  \t\t\tif(INVALID_RANKS)\n  316  \t\t\t{\n  317: //\t\t\t\tfor(udword i=0;i<nb;i++)\tmRanks2[mOffset[InputBytes[i<<2]]++] = i;\n  318: \t\t\t\tfor(udword i=0;i<nb;i++)\t*mLink[InputBytes[i<<2]]++ = i;\n  319  \t\t\t\tVALIDATE_RANKS;\n  320  \t\t\t}\n  ...\n  384  \t// responsible for the sign. 128 last values because the 128 first ones are related to positive numbers.\n  385  \tudword* h3= &mHistogram[768];\n  386: \tfor(udword i=128;i<256;i++)\tNbNegativeValues += h3[i];\t// 768 for last histogram, 128 for negative part\n  387  \n  388  \t// Radix sort, j is the pass number (0=LSB, 3=MSB)\n  389: \tfor(udword j=0;j<4;j++)\n  390  \t{\n  391  \t\t// Should we care about negative values?\n  ...\n  400  //\t\t\t\tmOffset[0] = 0;\n  401  \t\t\t\tmLink[0] = mRanks2;\n  402: //\t\t\t\tfor(udword i=1;i<256;i++)\t\tmOffset[i] = mOffset[i-1] + CurCount[i-1];\n  403: \t\t\t\tfor(udword i=1;i<256;i++)\t\tmLink[i] = mLink[i-1] + CurCount[i-1];\n  404  \n  405  \t\t\t\t// Perform Radix Sort\n  ...\n  408  \t\t\t\tif(INVALID_RANKS)\n  409  \t\t\t\t{\n  410: //\t\t\t\t\tfor(i=0;i<nb;i++)\tmRanks2[mOffset[InputBytes[i<<2]]++] = i;\n  411: \t\t\t\t\tfor(udword i=0;i<nb;i++)\t*mLink[InputBytes[i<<2]]++ = i;\n  412  \t\t\t\t\tVALIDATE_RANKS;\n  413  \t\t\t\t}\n  ...\n  438  //\t\t\t\tmOffset[0] = NbNegativeValues;\t\t\t\t\t\t\t\t\t\t\t\t// First positive number takes place after the negative ones\n  439  \t\t\t\tmLink[0] = &mRanks2[NbNegativeValues];\t\t\t\t\t\t\t\t\t\t// First positive number takes place after the negative ones\n  440: //\t\t\t\tfor(udword i=1;i<128;i++)\t\tmOffset[i] = mOffset[i-1] + CurCount[i-1];\t// 1 to 128 for positive numbers\n  441: \t\t\t\tfor(udword i=1;i<128;i++)\t\tmLink[i] = mLink[i-1] + CurCount[i-1];\t\t// 1 to 128 for positive numbers\n  442  \n  443  \t\t\t\t// We must reverse the sorting order for negative numbers!\n  444  //\t\t\t\tmOffset[255] = 0;\n  445  \t\t\t\tmLink[255] = mRanks2;\n  446: //\t\t\t\tfor(i=0;i<127;i++)\t\tmOffset[254-i] = mOffset[255-i] + CurCount[255-i];\t// Fixing the wrong order for negative values\n  447: \t\t\t\tfor(udword i=0;i<127;i++)\tmLink[254-i] = mLink[255-i] + CurCount[255-i];\t\t// Fixing the wrong order for negative values\n  448: //\t\t\t\tfor(i=128;i<256;i++)\tmOffset[i] += CurCount[i];\t\t\t\t\t\t\t// Fixing the wrong place for negative values\n  449: \t\t\t\tfor(udword i=128;i<256;i++)\tmLink[i] += CurCount[i];\t\t\t\t\t\t\t// Fixing the wrong place for negative values\n  450  \n  451  \t\t\t\t// Perform Radix Sort\n  452  \t\t\t\tif(INVALID_RANKS)\n  453  \t\t\t\t{\n  454: \t\t\t\t\tfor(udword i=0;i<nb;i++)\n  455  \t\t\t\t\t{\n  456  \t\t\t\t\t\tudword Radix = input[i]>>24;\t\t\t\t\t\t\t// Radix byte, same as above. AND is useless here (udword).\n  ...\n  465  \t\t\t\telse\n  466  \t\t\t\t{\n  467: \t\t\t\t\tfor(udword i=0;i<nb;i++)\n  468  \t\t\t\t\t{\n  469  \t\t\t\t\t\tudword Radix = input[mRanks[i]]>>24;\t\t\t\t\t\t\t// Radix byte, same as above. AND is useless here (udword).\n  ...\n  486  \t\t\t\t\t{\n  487  \t\t\t\t\t\t// ###Possible?\n  488: \t\t\t\t\t\tfor(udword i=0;i<nb;i++)\tmRanks2[i] = nb-i-1;\n  489  \t\t\t\t\t\tVALIDATE_RANKS;\n  490  \t\t\t\t\t}\n  491  \t\t\t\t\telse\n  492  \t\t\t\t\t{\n  493: \t\t\t\t\t\tfor(udword i=0;i<nb;i++)\tmRanks2[i] = mRanks[nb-i-1];\n  494  \t\t\t\t\t}\n  495  \n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/Ice/IceTriangle.cpp:\n  138  \n  139  \t// Loop through all vertices\n  140: \tfor(udword i=0;i<3;i++)\n  141  \t{\n  142  \t\t// Compute side:\n  ...\n  276  \t// Normalize => add a constant border, regardless of triangle size\n  277  \t// Don't => add more to big triangles\n  278: \tfor(udword i=0;i<3;i++)\n  279  \t{\n  280  \t\tPoint v = mVerts[i] - TriangleCenter;\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/OPCODE/Ice/IceUtils.cpp:\n   29  \t// Test all bits\n   30  \tudword Align = 1;\n   31: \tfor(udword i=1;i<32;i++)\n   32  \t{\n   33  \t\t// Returns as soon as the alignment is broken\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ou/aclocal.m4:\n 3737      lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n 3738  \"     {last_section=section; section=\\$ 3};\"\\\n 3739: \"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n 3740  \"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n 3741  \"     \\$ 0!~/External *\\|/{next};\"\\\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/external/ode/ou/configure:\n    <binary>\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/src/Network/DNSResolver.cpp:\n   88              auto entry = itor->second;\n   89  \n   90:             if ( entry->future.wait_for( std::chrono::seconds(0) ) == std::future_status::ready )\n   91              {\n   92                  entry->result = entry->future.get();\n\n/Users/erikparreira/Downloads/GDC 2015 Example Source Code/tests/ClientServer/SoakClientServer.cpp:\n   71      ServerInfo serverInfo[NumServers];\n   72  \n   73:     for( int i = 0; i < NumServers; ++i )\n   74      {\n   75          serverInfo[i].address = network::Address( \"::1\" );\n\n215 matches across 56 files\n",
			"settings":
			{
				"buffer_size": 47376,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "scratch.cpp",
			"settings":
			{
				"buffer_size": 26936,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/gameobjects/World.cpp",
			"settings":
			{
				"buffer_size": 1649,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/src/gameobjects/Client.cpp",
			"settings":
			{
				"buffer_size": 2959,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/src/main.cpp",
			"settings":
			{
				"buffer_size": 941,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/include/gameobjects/World.h",
			"settings":
			{
				"buffer_size": 780,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundserver/src/main.cpp",
			"settings":
			{
				"buffer_size": 948,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/gameobjects/Player.cpp",
			"settings":
			{
				"buffer_size": 1726,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundserver/src/networking/Server.cpp",
			"settings":
			{
				"buffer_size": 2312,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundserver/src/networking/NetworkManagerServer.cpp",
			"settings":
			{
				"buffer_size": 10055,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//  PlayerMessage.h\n//  Message sent/read about the player.\n//\n//  Created by Erik Parreira on 8/15/16.\n//  Copyright © 2016 Erik Parreira. All rights reserved.\n//\n\n#ifndef PlayerMessage_h\n#define PlayerMessage_h\n#include \"IO/MemoryBitStream.h\"\n#include \"gameobjects/Player.h\"\n#include \"networking/Logger.h\"\n\nclass Player;\n\nclass PlayerMessage\n{\n  public:\n    friend class Player;\n\n    template <typename Stream, typename DataContainer>\n    static bool Serialize( Stream& stream, DataContainer dataContainer )\n    {\n        stream.serialize( dataContainer->mState );\n        bool writePlayerId = dataContainer->mState & Player::PlayerReplicationState::PRS_PID;\n        bool writePosition = dataContainer->mState & Player::PlayerReplicationState::PRS_POSI;\n\n        if(writePlayerId)\n        {\n            stream.serialize(dataContainer->mPlayerId);\n        }\n\n        if(writePosition)\n        {\n            LOG(Logger::CRITICAL, \"Message is At %.2f, %.2f\", dataContainer->GetLocation().mX, dataContainer->GetLocation().mY);\n            stream.serialize( dataContainer->mVelocity.mX );\n            stream.serialize( dataContainer->mVelocity.mY );\n\n            stream.serialize( dataContainer->mLocation.mX );\n            stream.serialize( dataContainer->mLocation.mY );\n        }\n\n        return true;\n    }\n};\n#endif /* PlayerMessage_h */\n",
			"file": "networkplayground/include/gameobjects/PlayerMessage.h",
			"file_size": 1341,
			"file_write_time": 131393824730000000,
			"settings":
			{
				"buffer_size": 1340,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/src/gameobjects/PlayerClient.cpp",
			"settings":
			{
				"buffer_size": 2057,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/include/gameobjects/InputState.h",
			"settings":
			{
				"buffer_size": 785,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/gameobjects/MoveList.cpp",
			"settings":
			{
				"buffer_size": 1387,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundserver/src/networking/ReplicationManagerServer.cpp",
			"settings":
			{
				"buffer_size": 3803,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundserver/src/networking/ReplicationManagerTransmissionData.cpp",
			"settings":
			{
				"buffer_size": 4288,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundserver/include/networking/ClientProxy.h",
			"settings":
			{
				"buffer_size": 2193,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/networking/NetworkManager.cpp",
			"settings":
			{
				"buffer_size": 5387,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/src/networking/NetworkManagerClient.cpp",
			"settings":
			{
				"buffer_size": 5095,
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/gameobjects/Engine.cpp",
			"settings":
			{
				"buffer_size": 1094,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/src/gameobjects/PlayerMessage.cpp",
			"settings":
			{
				"buffer_size": 152,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplayground/include/gameobjects/GameObject.h",
			"settings":
			{
				"buffer_size": 1912,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "networkplaygroundclient/src/networking/ReplicationManagerClient.cpp",
			"settings":
			{
				"buffer_size": 2314,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Run Test",
	"build_system_choices":
	[
		[
			[
				[
					"List",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"List",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"Clean"
			]
		],
		[
			[
				[
					"Run TTest",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Run TTest",
				""
			]
		],
		[
			[
				[
					"Run Test",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				]
			],
			[
				"Run Test",
				""
			]
		],
		[
			[
				[
					"Run Test",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Run Test",
				""
			]
		],
		[
			[
				[
					"Run Tests",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/C++11/C++11.sublime-build",
					""
				],
				[
					"Packages/C++11/C++11.sublime-build",
					"Run"
				]
			],
			[
				"Run Tests",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 247.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"set javasc",
				"Set Syntax: JavaScript"
			],
			[
				"set css",
				"Set Syntax: CSS"
			],
			[
				"h",
				"HTMLPrettify"
			],
			[
				"set html",
				"Set Syntax: HTML"
			],
			[
				"html pre",
				"HTMLPrettify"
			],
			[
				"htl pre",
				"HTMLPrettify"
			],
			[
				"them",
				"Colorsublime: Browse Themes"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"package lis",
				"Package Control: List Packages"
			],
			[
				"copypa",
				"File: Copy Path"
			],
			[
				"copy",
				"File: Copy Name"
			],
			[
				"set c+",
				"Set Syntax: C++"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"gosu",
				"GoSublime: Run build command"
			],
			[
				"nrew",
				"File: New File Relative to Current View"
			],
			[
				"set c++",
				"Set Syntax: C++"
			],
			[
				"renam",
				"File: Rename"
			],
			[
				"uper",
				"Convert Case: Upper Case"
			],
			[
				"todo",
				"TodoReview: Project Files"
			],
			[
				"gosub",
				"GoSublime: Activate 9o"
			],
			[
				"go",
				"GoSublime: Open Error Log"
			],
			[
				"tdo",
				"TodoReview: Open Files"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"ren",
				"Preferences: Settings - Default"
			],
			[
				"rena",
				"File: Rename"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"move",
				"File: Move"
			],
			[
				"waka",
				"WakaTime: Open Dashboard"
			],
			[
				"trail",
				"Trailing Spaces: Toggle Trailing Spaces Highlighting"
			],
			[
				"ke",
				"Keymaps: Cheat Sheet"
			],
			[
				"html",
				"HTMLBeautify"
			],
			[
				"dele",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"sync",
				"Package Syncing: Pull Settings"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"disb",
				"Package Control: Disable Package"
			],
			[
				"htmlr",
				"Set Syntax: HTML (Erlang)"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"go ",
				"GoSublime: Open Error Log"
			],
			[
				"gosett",
				"GoSublime: User Settings"
			],
			[
				"insal",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 444.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/erikparreira/Dropbox/Programming/networkplayground",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/gameobjects",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/networking",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include",
		"/Users/erikparreira/Downloads/GDC 2015 Example Source Code",
		"/Users/erikparreira/Downloads/GDC 2015 Example Source Code/data",
		"/Users/erikparreira/Downloads/GDC 2015 Example Source Code/scripts"
	],
	"file_history":
	[
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/gameobjects/PlayerMessage.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/input/InputManager.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/gameobjects/MoveList.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/Logger.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/ReplicationManagerServer.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/main.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/gameobjects/Client.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/IO/MemoryBitStream.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/gameobjects/Player.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/networking/NetworkManagerClient.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/gameobjects/PlayerClient.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/gameobjects/PlayerClient.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/input/InputManager.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/SocketAddress.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/GameObject.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/gameobjects/GameObject.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/gameobjects/PlayerServer.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/ReplicationManagerTransmissionData.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/ClientProxy.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/main.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/networking/ReplicationManagerClient.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/Server.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/timing/Timing.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/Logger.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/Player.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/graphics/RenderManager.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/NetworkManager.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/gameobjects/Ghost.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/gameobjects/Ghost.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/src/networking/NetworkManagerServer.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/PlayerMessage.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/unit_tests/main.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include/gameobjects/PlayerServer.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/scratch.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/Makefile",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/gameobjects/Move.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/lib/googletest/googletest/include/gtest/internal/gtest-param-util-generated.h.pump",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/DeliveryNotificationManager.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundserver/include/networking/ClientProxy.h",
		"/Users/erikparreira/Downloads/GDC 2015 Example Source Code/src/Game/InputManager.h",
		"/Users/erikparreira/Downloads/GDC 2015 Example Source Code/src/Game/InputManager.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/SocketAddress.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/src/graphics/SpriteComponent.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/MoveList.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/client_side_prediction_example.js",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/CMakeLists.txt",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/CMakeFiles/Makefile2",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/StringUtils.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/StringUtils.cpp",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/gameobjects/Engine.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplaygroundclient/include/networking/NetworkManagerClient.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/NetworkManager.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/.gitignore",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/IO/MemoryBitStream.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/timing/timing.h",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground.sublime-project",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/test_commands.sh",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/include/networking/DeliveryNotificationManager.h",
		"/Users/erikparreira/Dropbox/LawGuySite/toggle.html",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/Networking.cpp",
		"/Applications/Sublime Text.app/Contents/MacOS/Packages/C++.sublime-package",
		"/Users/erikparreira/Dropbox/Programming/networkplayground/networkplayground/src/networking/SocketAddressFactory.cpp",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/Clang-Complete/cc.sublime-settings",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/GoSublime/CHANGELOG.md",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/client_handlers.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib/game_objs.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/game.js",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib/basic_physics.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/client_messages.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/game.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/network/clients.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/game_loop.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/game/game_objs.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/simple_actor.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/backend/main.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/communication_layer.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/network/messages.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/network/websockethandler.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib/utils.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/game.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/index.html",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/game_loop.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/connection.js",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/settings.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/game_objs.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/core_lib.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib/core_lib.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/messages.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/logger/logger.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/server_handlers.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/websockethandler/websockethandler.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/build.sh",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/web/js/ws_events_dispatcher.js",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/User/GoSublime.sublime-settings",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/client_handlers.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core/physics_component.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core/game_objs.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/websockethandler.go/websockethandler.go",
		"/Users/erikparreira/go/src/github.com/etinlb/falcon/core/core_lib.go",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/GoSublime/GoSublime.sublime-settings",
		"/Users/erikparreira/Dropbox/go_env/install_go.sh",
		"/Users/erikparreira/Downloads/Spending.csv",
		"/Users/erikparreira/Dropbox/goStuff/vagrant-golang/Vagrantfile",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/message_structure.md",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/messaging_notes.md",
		"/Users/erikparreira/Dropbox/Programming/Silly shit/prank_scrips.sh",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/game.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/utils.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/simple_actor.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/ws_events_dispatcher.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/unit_manager.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/master_server/master_server.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/interactive_view.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/.gitignore",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/index.html",
		"/Users/erikparreira/Dropbox/Generic_Card_Deck_Design.md",
		"/Users/erikparreira/Dropbox/Tech_Things_To_Do.md",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/temp/test.go",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/logger.go",
		"/Users/erikparreira/Downloads/TopApps-Starter/TopApps/DataManager.swift",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/design_doc.md",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/web/js/settings.js",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/sample.go",
		"/Users/erikparreira/Desktop/test.go",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/User/GoSublime/osx-x64/log.txt",
		"/Users/erikparreira/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/master_server/server_list.json",
		"/Users/erikparreira/go/src/github.com/etinlb/go_game/game/game"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"-*.make, -lib/, -networkplayground.xcodeproj/",
			"-*.make, -lib/, -*.xcodeproj",
			"-*.make, -lib/, -networkplayground.xcodeproj",
			"-*.make, -lib/",
			"-*.make",
			"-*.i",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"inInputState",
			"LOG",
			"Log",
			"dataContainer",
			"for(",
			"Writing Update",
			"Adding",
			"Adding moves",
			"deltaTime",
			"Hanlding state",
			"Handling state",
			"PlayerMessage",
			"GetMoveList",
			"state",
			"Logger::ALL",
			"InitLog",
			"Ghost at",
			"log",
			"\n        ",
			"dataContainer",
			"SetIsLastMoveTimestampDirty",
			"PrintInfo",
			");\n",
			"mServerGhost",
			"thread_function",
			"interactive_console",
			"\n    ",
			"Log(",
			"InitLog",
			"CMakeFiles",
			"networkplaygroundserver",
			"networkplaygroundclient",
			"Timing",
			"sInstance",
			"time is",
			"GetCommandLineArg",
			"LogFile( ",
			"Sprintf",
			"logFile",
			"Logger::",
			"Logger",
			"Sending",
			"Doing Move",
			"No Success",
			"Log(\"Has",
			"Has",
			"Sending",
			"LOGMORE",
			"LogMore(\"Read",
			"Log(\"Read",
			"Packet",
			"Read ",
			"Moving Player",
			"Moving",
			"Adding Move",
			"Proccessing",
			"Processing",
			"Processing ",
			"Processing",
			"log",
			"Adding Move",
			"addingMove",
			"addingMove\naddingMove",
			"addingMove",
			"Log(",
			"PLAYER_SPEED",
			"SetLevel",
			"LogLevel",
			"InterpolateClientSidePrediction",
			"DoClientSidePredictionAfterReplicationForLocalPlayer",
			"InterpolateClientSidePrediction",
			"interpolate",
			"=",
			" =",
			"enum",
			"networking",
			"input",
			"graphics",
			"networkplaygroundclient",
			"networkplaygroundserver",
			"timing",
			"networking",
			"math",
			"IO",
			"gameobjects",
			"networkplayground",
			"sStartTime",
			"span",
			"page",
			"Descrip",
			"div",
			"br",
			"Your ",
			"Your",
			"your",
			"Your",
			"[text* your-name]",
			"[",
			"720deg",
			"app_div",
			"application",
			"x",
			"item-1\"",
			"Update",
			"mFrameStartTimef",
			"GetMoveList",
			"PLAYER_SPEED",
			"networkmanager at",
			"inc",
			"bufferSize",
			"),\n",
			"printStream",
			"tests",
			"ProcessQueuedPackets",
			"3200",
			"CLIENT_OBJ_FILES",
			"SERVER_OBJ_FILES",
			"CLIENT_OBJ_FILES",
			"WSAECONNRESET",
			"ReadIncomingPacketsIntoQueue",
			"NetworkManager",
			"yAxis",
			"X",
			"messages",
			"move",
			"ReadAllInputMessages",
			"Queueing",
			"ReadAllInputMessages"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\n    "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "networkplaygroundserver/src/gameobjects/PlayerServer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1241,
						"regions":
						{
						},
						"selection":
						[
							[
								1241,
								1241
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 0,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47376,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										349,
										363
									],
									[
										733,
										737
									],
									[
										1008,
										1012
									],
									[
										1303,
										1307
									],
									[
										1691,
										1695
									],
									[
										2020,
										2024
									],
									[
										2224,
										2228
									],
									[
										2436,
										2440
									],
									[
										2615,
										2619
									],
									[
										2777,
										2781
									],
									[
										3004,
										3008
									],
									[
										3218,
										3222
									],
									[
										3427,
										3431
									],
									[
										3566,
										3570
									],
									[
										3764,
										3768
									],
									[
										3989,
										3993
									],
									[
										4210,
										4214
									],
									[
										4437,
										4441
									],
									[
										4647,
										4651
									],
									[
										4796,
										4800
									],
									[
										4970,
										4974
									],
									[
										5181,
										5185
									],
									[
										5483,
										5487
									],
									[
										5771,
										5775
									],
									[
										5977,
										5981
									],
									[
										6246,
										6250
									],
									[
										6436,
										6440
									],
									[
										6804,
										6808
									],
									[
										6961,
										6965
									],
									[
										7133,
										7137
									],
									[
										7323,
										7327
									],
									[
										7485,
										7489
									],
									[
										7673,
										7677
									],
									[
										7958,
										7962
									],
									[
										8247,
										8251
									],
									[
										8433,
										8437
									],
									[
										8768,
										8772
									],
									[
										9054,
										9058
									],
									[
										9346,
										9350
									],
									[
										9619,
										9623
									],
									[
										9748,
										9752
									],
									[
										9904,
										9908
									],
									[
										10213,
										10217
									],
									[
										10428,
										10432
									],
									[
										10708,
										10712
									],
									[
										10911,
										10915
									],
									[
										11217,
										11221
									],
									[
										11522,
										11526
									],
									[
										11678,
										11682
									],
									[
										11891,
										11895
									],
									[
										12112,
										12116
									],
									[
										12483,
										12487
									],
									[
										12967,
										12971
									],
									[
										13333,
										13337
									],
									[
										13531,
										13535
									],
									[
										13735,
										13739
									],
									[
										13899,
										13903
									],
									[
										14078,
										14082
									],
									[
										14251,
										14255
									],
									[
										14423,
										14427
									],
									[
										14708,
										14712
									],
									[
										14922,
										14926
									],
									[
										15098,
										15102
									],
									[
										15271,
										15275
									],
									[
										15483,
										15487
									],
									[
										15685,
										15689
									],
									[
										16014,
										16018
									],
									[
										16222,
										16226
									],
									[
										16464,
										16468
									],
									[
										16639,
										16643
									],
									[
										16877,
										16881
									],
									[
										17186,
										17190
									],
									[
										17438,
										17442
									],
									[
										17711,
										17715
									],
									[
										17896,
										17900
									],
									[
										18101,
										18105
									],
									[
										18323,
										18327
									],
									[
										18700,
										18704
									],
									[
										18957,
										18961
									],
									[
										19100,
										19104
									],
									[
										19355,
										19359
									],
									[
										19639,
										19643
									],
									[
										19978,
										19982
									],
									[
										20262,
										20266
									],
									[
										20529,
										20533
									],
									[
										20724,
										20728
									],
									[
										21069,
										21073
									],
									[
										21252,
										21256
									],
									[
										21416,
										21420
									],
									[
										21676,
										21680
									],
									[
										21954,
										21958
									],
									[
										22213,
										22217
									],
									[
										22458,
										22462
									],
									[
										22625,
										22629
									],
									[
										22787,
										22791
									],
									[
										23091,
										23095
									],
									[
										23452,
										23456
									],
									[
										23620,
										23624
									],
									[
										23783,
										23787
									],
									[
										23927,
										23931
									],
									[
										24077,
										24081
									],
									[
										24347,
										24351
									],
									[
										24474,
										24478
									],
									[
										24531,
										24535
									],
									[
										24724,
										24728
									],
									[
										24941,
										24945
									],
									[
										25123,
										25127
									],
									[
										25190,
										25194
									],
									[
										25453,
										25457
									],
									[
										25675,
										25679
									],
									[
										25871,
										25875
									],
									[
										26114,
										26118
									],
									[
										26272,
										26276
									],
									[
										26417,
										26421
									],
									[
										26733,
										26737
									],
									[
										26914,
										26918
									],
									[
										27115,
										27119
									],
									[
										27311,
										27315
									],
									[
										27566,
										27570
									],
									[
										27765,
										27769
									],
									[
										27986,
										27990
									],
									[
										28265,
										28269
									],
									[
										28519,
										28523
									],
									[
										28743,
										28747
									],
									[
										28992,
										28996
									],
									[
										29241,
										29245
									],
									[
										29560,
										29564
									],
									[
										29832,
										29836
									],
									[
										30052,
										30056
									],
									[
										30353,
										30357
									],
									[
										30628,
										30632
									],
									[
										30868,
										30872
									],
									[
										31093,
										31097
									],
									[
										31306,
										31310
									],
									[
										31539,
										31543
									],
									[
										31866,
										31870
									],
									[
										32244,
										32248
									],
									[
										32412,
										32416
									],
									[
										32588,
										32592
									],
									[
										32782,
										32786
									],
									[
										32827,
										32831
									],
									[
										32996,
										33000
									],
									[
										33385,
										33389
									],
									[
										33608,
										33612
									],
									[
										33992,
										33996
									],
									[
										34102,
										34106
									],
									[
										34266,
										34270
									],
									[
										34563,
										34567
									],
									[
										34606,
										34610
									],
									[
										34798,
										34802
									],
									[
										35112,
										35116
									],
									[
										35426,
										35430
									],
									[
										35656,
										35660
									],
									[
										35787,
										35791
									],
									[
										36028,
										36032
									],
									[
										36105,
										36109
									],
									[
										36364,
										36368
									],
									[
										36570,
										36574
									],
									[
										36825,
										36829
									],
									[
										36997,
										37001
									],
									[
										37273,
										37277
									],
									[
										37409,
										37413
									],
									[
										37631,
										37635
									],
									[
										37773,
										37777
									],
									[
										37913,
										37917
									],
									[
										38067,
										38071
									],
									[
										38313,
										38317
									],
									[
										38356,
										38360
									],
									[
										38630,
										38634
									],
									[
										38911,
										38915
									],
									[
										39075,
										39079
									],
									[
										39330,
										39334
									],
									[
										39461,
										39465
									],
									[
										39592,
										39596
									],
									[
										39804,
										39808
									],
									[
										40068,
										40072
									],
									[
										40127,
										40131
									],
									[
										40406,
										40410
									],
									[
										40467,
										40471
									],
									[
										40738,
										40742
									],
									[
										40994,
										40998
									],
									[
										41288,
										41292
									],
									[
										41477,
										41481
									],
									[
										41621,
										41625
									],
									[
										41733,
										41737
									],
									[
										42081,
										42085
									],
									[
										42195,
										42199
									],
									[
										42437,
										42441
									],
									[
										42514,
										42518
									],
									[
										42661,
										42665
									],
									[
										42739,
										42743
									],
									[
										43000,
										43004
									],
									[
										43179,
										43183
									],
									[
										43342,
										43346
									],
									[
										43423,
										43427
									],
									[
										43592,
										43596
									],
									[
										43664,
										43668
									],
									[
										44017,
										44021
									],
									[
										44131,
										44135
									],
									[
										44386,
										44390
									],
									[
										44514,
										44518
									],
									[
										44647,
										44651
									],
									[
										44758,
										44762
									],
									[
										44958,
										44962
									],
									[
										45152,
										45156
									],
									[
										45369,
										45373
									],
									[
										45502,
										45506
									],
									[
										45732,
										45736
									],
									[
										45927,
										45931
									],
									[
										46165,
										46169
									],
									[
										46481,
										46485
									],
									[
										46921,
										46925
									],
									[
										47230,
										47234
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1008,
								1012
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1041,
										1042
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1011,
										1012
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"color_scheme": "Packages/BetterFindBuffer/FindResults.hidden-tmTheme",
							"default_dir": "/Users/erikparreira/Dropbox/Programming/networkplayground",
							"detect_indentation": false,
							"function_name_status_row": 26,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 238.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "scratch.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26936,
						"regions":
						{
						},
						"selection":
						[
							[
								22482,
								22482
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										23109,
										23110
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										22475,
										22476
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 804,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13308.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "networkplayground/src/gameobjects/World.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1649,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 37,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "networkplaygroundclient/src/gameobjects/Client.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2959,
						"regions":
						{
						},
						"selection":
						[
							[
								844,
								844
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										843,
										844
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										834,
										835
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 31,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 175.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "networkplaygroundclient/src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 941,
						"regions":
						{
						},
						"selection":
						[
							[
								463,
								463
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										504,
										505
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										461,
										462
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 26,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "networkplayground/include/gameobjects/World.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 780,
						"regions":
						{
						},
						"selection":
						[
							[
								488,
								488
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										754,
										755
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										249,
										250
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 26,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "networkplaygroundserver/src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 948,
						"regions":
						{
						},
						"selection":
						[
							[
								326,
								345
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										857,
										858
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										831,
										832
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 43,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "networkplayground/src/gameobjects/Player.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1726,
						"regions":
						{
						},
						"selection":
						[
							[
								754,
								754
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										791,
										792
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										751,
										752
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"function_name_status_row": -1,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "networkplaygroundserver/src/networking/Server.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2312,
						"regions":
						{
						},
						"selection":
						[
							[
								1612,
								1612
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1643,
										1644
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1130,
										1131
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 65,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 828.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "networkplaygroundserver/src/networking/NetworkManagerServer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10055,
						"regions":
						{
						},
						"selection":
						[
							[
								6467,
								6478
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6514,
										6515
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										6465,
										6466
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 219,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2932.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "networkplayground/include/gameobjects/PlayerMessage.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1340,
						"regions":
						{
						},
						"selection":
						[
							[
								506,
								506
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										508,
										509
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										462,
										463
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 21,
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 12,
					"file": "networkplaygroundclient/src/gameobjects/PlayerClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2057,
						"regions":
						{
						},
						"selection":
						[
							[
								907,
								907
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										906,
										907
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										891,
										892
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 30,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 171.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "networkplayground/include/gameobjects/InputState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 785,
						"regions":
						{
						},
						"selection":
						[
							[
								687,
								687
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										755,
										756
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										93,
										94
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 30,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "networkplayground/include/gameobjects/PlayerMessage.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1340,
						"regions":
						{
						},
						"selection":
						[
							[
								859,
								859
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										508,
										509
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										462,
										463
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 21,
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 226.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "networkplaygroundserver/src/gameobjects/PlayerServer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1241,
						"regions":
						{
						},
						"selection":
						[
							[
								960,
								960
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 0,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 227.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "networkplaygroundserver/src/networking/NetworkManagerServer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10055,
						"regions":
						{
						},
						"selection":
						[
							[
								6355,
								6355
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6514,
										6515
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										6465,
										6466
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 219,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3293.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "networkplayground/src/gameobjects/MoveList.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1387,
						"regions":
						{
						},
						"selection":
						[
							[
								495,
								495
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1004,
										1005
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										464,
										465
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 17,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "networkplaygroundclient/src/gameobjects/Client.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2959,
						"regions":
						{
						},
						"selection":
						[
							[
								2480,
								2480
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										843,
										844
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										834,
										835
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 31,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1674.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "networkplaygroundserver/src/networking/ReplicationManagerServer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3803,
						"regions":
						{
						},
						"selection":
						[
							[
								3803,
								3803
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 117,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1637.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "networkplaygroundserver/src/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 948,
						"regions":
						{
						},
						"selection":
						[
							[
								832,
								832
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										857,
										858
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										831,
										832
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 43,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 366.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "networkplayground/src/gameobjects/World.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1649,
						"regions":
						{
						},
						"selection":
						[
							[
								964,
								964
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 37,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 118.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "networkplaygroundserver/src/networking/ReplicationManagerTransmissionData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4288,
						"regions":
						{
						},
						"selection":
						[
							[
								385,
								385
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 10,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "networkplayground/src/gameobjects/Player.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1726,
						"regions":
						{
						},
						"selection":
						[
							[
								1460,
								1460
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1413,
										1414
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1326,
										1327
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 35,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 352.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "networkplaygroundserver/include/networking/ClientProxy.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2193,
						"regions":
						{
						},
						"selection":
						[
							[
								222,
								222
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										222,
										223
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										202,
										203
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 11,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				}
			]
		},
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "networkplaygroundclient/src/gameobjects/Client.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2959,
						"regions":
						{
						},
						"selection":
						[
							[
								2089,
								2089
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										843,
										844
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										834,
										835
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 31,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1321.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "networkplayground/src/networking/NetworkManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5387,
						"regions":
						{
						},
						"selection":
						[
							[
								2031,
								2031
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 81,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1151.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "networkplaygroundclient/src/networking/NetworkManagerClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5095,
						"regions":
						{
						},
						"selection":
						[
							[
								1533,
								1533
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1553,
										1554
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1253,
										1254
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 52,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 985.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "networkplaygroundclient/src/gameobjects/PlayerClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2057,
						"regions":
						{
						},
						"selection":
						[
							[
								1603,
								1603
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										906,
										907
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										891,
										892
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 30,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 735.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "networkplayground/src/gameobjects/Engine.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1094,
						"regions":
						{
						},
						"selection":
						[
							[
								317,
								317
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 13,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 202.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "networkplaygroundserver/src/gameobjects/PlayerServer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1241,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 0,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "networkplayground/src/gameobjects/Player.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1726,
						"regions":
						{
						},
						"selection":
						[
							[
								1668,
								1668
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1413,
										1414
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1326,
										1327
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 35,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 352.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "networkplayground/src/gameobjects/PlayerMessage.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 152,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 0,
							"history_list_is_closing": true,
							"syntax": "Packages/C++11/C++11.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "networkplayground/include/gameobjects/PlayerMessage.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1340,
						"regions":
						{
						},
						"selection":
						[
							[
								1208,
								1208
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										508,
										509
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										462,
										463
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 21,
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 134.0,
						"translation.y": 396.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "networkplayground/include/gameobjects/GameObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1912,
						"regions":
						{
						},
						"selection":
						[
							[
								1523,
								1523
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1522,
										1523
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1498,
										1499
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 54,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "networkplaygroundclient/src/networking/ReplicationManagerClient.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2314,
						"regions":
						{
						},
						"selection":
						[
							[
								555,
								555
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										947,
										948
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										530,
										531
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"function_name_status_row": 19,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			0.627231590347,
			1.0
		]
	},
	"menu_visible": true,
	"output.9o:///Users/erikparreira/Dropbox/goStuff/Sandbox":
	{
		"height": 100.0
	},
	"output.9o:///Users/erikparreira/Dropbox/goStuff/go_experiment/backend":
	{
		"height": 100.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/core":
	{
		"height": 124.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/core_lib":
	{
		"height": 243.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/game":
	{
		"height": 252.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/logger":
	{
		"height": 124.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/network":
	{
		"height": 189.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/websockethandler":
	{
		"height": 124.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/falcon/websockethandler.go":
	{
		"height": 124.0
	},
	"output.9o:///Users/erikparreira/go/src/github.com/etinlb/go_game/game":
	{
		"height": 280.0
	},
	"output.GoSublime-main-output":
	{
		"height": 124.0
	},
	"output.MarGo-output":
	{
		"height": 100.0
	},
	"output.cc":
	{
		"height": 308.0
	},
	"output.exec":
	{
		"height": 371.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "networkplayground.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inputst",
				"networkplayground/networkplayground/include/gameobjects/InputState.h"
			],
			[
				"player.cp",
				"networkplayground/networkplayground/src/gameobjects/Player.cpp"
			],
			[
				"player",
				"networkplayground/networkplaygroundclient/src/gameobjects/PlayerClient.cpp"
			],
			[
				"main.cp",
				"networkplayground/networkplaygroundserver/src/main.cpp"
			],
			[
				"gameobje",
				"networkplayground/networkplayground/include/gameobjects/GameObject.h"
			],
			[
				"main.cpp",
				"networkplayground/networkplaygroundclient/src/main.cpp"
			],
			[
				"playerme",
				"networkplayground/networkplayground/include/gameobjects/PlayerMessage.h"
			],
			[
				"wor",
				"networkplayground/networkplayground/include/gameobjects/World.h"
			],
			[
				"word",
				"networkplayground/networkplayground/src/gameobjects/World.cpp"
			],
			[
				"word.h",
				"networkplayground/networkplayground/include/gameobjects/World.h"
			],
			[
				"world.cpp",
				"networkplayground/networkplayground/src/gameobjects/World.cpp"
			],
			[
				"engine",
				"networkplayground/networkplayground/src/gameobjects/Engine.cpp"
			],
			[
				"main.",
				"networkplayground/networkplaygroundserver/src/main.cpp"
			],
			[
				"main",
				"networkplayground/networkplaygroundclient/src/main.cpp"
			],
			[
				"clie",
				"networkplayground/networkplaygroundclient/src/gameobjects/Client.cpp"
			],
			[
				"playercli",
				"networkplayground/networkplaygroundclient/src/gameobjects/PlayerClient.cpp"
			],
			[
				"playermess",
				"networkplayground/networkplayground/include/gameobjects/PlayerMessage.h"
			],
			[
				"player.c",
				"networkplayground/networkplayground/src/gameobjects/Player.cpp"
			],
			[
				"playerser",
				"networkplayground/networkplaygroundserver/src/gameobjects/PlayerServer.cpp"
			],
			[
				"client.cpp",
				"networkplayground/networkplaygroundclient/src/gameobjects/Client.cpp"
			],
			[
				"playerserver",
				"networkplayground/networkplaygroundserver/src/gameobjects/PlayerServer.cpp"
			],
			[
				"replication",
				"networkplayground/networkplaygroundclient/src/networking/ReplicationManagerClient.cpp"
			],
			[
				"movelis",
				"networkplayground/networkplayground/src/gameobjects/MoveList.cpp"
			],
			[
				"player.cpp",
				"networkplayground/networkplayground/src/gameobjects/Player.cpp"
			],
			[
				"networkmanagerser",
				"networkplayground/networkplaygroundserver/src/networking/NetworkManagerServer.cpp"
			],
			[
				"server",
				"networkplayground/networkplaygroundserver/src/networking/Server.cpp"
			],
			[
				"plaerser",
				"networkplayground/networkplaygroundserver/src/gameobjects/PlayerServer.cpp"
			],
			[
				"playermes",
				"networkplayground/networkplayground/include/gameobjects/PlayerMessage.h"
			],
			[
				"plaercli",
				"networkplayground/networkplaygroundclient/src/gameobjects/PlayerClient.cpp"
			],
			[
				"networkmana",
				"networkplayground/networkplaygroundserver/src/networking/NetworkManagerServer.cpp"
			],
			[
				"server.cpp",
				"networkplayground/networkplaygroundserver/src/networking/Server.cpp"
			],
			[
				"pla",
				"networkplayground/networkplayground/include/gameobjects/PlayerMessage.h"
			],
			[
				"moveli",
				"networkplayground/networkplayground/include/gameobjects/MoveList.h"
			],
			[
				"networma",
				"networkplayground/networkplaygroundclient/src/networking/NetworkManagerClient.cpp"
			],
			[
				"",
				"networkplayground/networkplaygroundclient/src/gameobjects/Client.cpp"
			],
			[
				"play",
				"networkplayground/networkplaygroundclient/src/gameobjects/PlayerClient.cpp"
			],
			[
				"mov",
				"networkplayground/networkplayground/src/gameobjects/Move.cpp"
			],
			[
				"client",
				"networkplayground/networkplaygroundclient/src/gameobjects/Client.cpp"
			],
			[
				"inputmana",
				"networkplayground/networkplaygroundclient/include/input/InputManager.h"
			],
			[
				"inpu",
				"GDC 2015 Example Source Code/src/Game/InputManager.h"
			],
			[
				"inpugma",
				"networkplayground/lib/googletest/googletest/include/gtest/internal/gtest-param-util-generated.h.pump"
			],
			[
				"clien",
				"networkplaygroundclient/src/gameobjects/Client.cpp"
			],
			[
				"inpugm",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"cli",
				"networkplaygroundclient/src/gameobjects/Client.cpp"
			],
			[
				"replaci",
				"networkplaygroundserver/src/networking/ReplicationManagerServer.cpp"
			],
			[
				"plaser",
				"networkplaygroundserver/src/gameobjects/PlayerServer.cpp"
			],
			[
				"gameo",
				"networkplayground/src/gameobjects/GameObject.cpp"
			],
			[
				"replaica",
				"networkplaygroundclient/src/networking/ReplicationManagerClient.cpp"
			],
			[
				"ser",
				"networkplaygroundserver/src/networking/Server.cpp"
			],
			[
				"logg",
				"networkplayground/src/networking/Logger.cpp"
			],
			[
				"log",
				"networkplayground/src/networking/Logger.cpp"
			],
			[
				"pl",
				"networkplayground/src/gameobjects/Player.cpp"
			],
			[
				"mian",
				"unit_tests/main.cpp"
			],
			[
				"plaeyrcli",
				"networkplaygroundclient/src/gameobjects/PlayerClient.cpp"
			],
			[
				"gameob",
				"networkplayground/include/gameobjects/GameObject.h"
			],
			[
				"replicationmana",
				"networkplaygroundserver/src/networking/ReplicationManagerServer.cpp"
			],
			[
				"replicationg",
				"networkplaygroundserver/src/networking/ReplicationManagerTransmissionData.cpp"
			],
			[
				"clientpr",
				"networkplaygroundserver/src/networking/ClientProxy.cpp"
			],
			[
				"se",
				"networkplaygroundserver/src/networking/Server.cpp"
			],
			[
				"netwrokmangerser",
				"networkplaygroundserver/src/networking/NetworkManagerServer.cpp"
			],
			[
				"g",
				"networkplaygroundclient/src/gameobjects/Ghost.cpp"
			],
			[
				"render",
				"networkplaygroundclient/src/graphics/RenderManager.cpp"
			],
			[
				"gho",
				"networkplaygroundclient/include/gameobjects/Ghost.h"
			],
			[
				"chost",
				"networkplaygroundclient/src/gameobjects/Ghost.cpp"
			],
			[
				"ghost",
				"networkplaygroundclient/src/gameobjects/Ghost.cpp"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"makefile2",
				"CMakeFiles/Makefile2"
			],
			[
				"make",
				"Makefile"
			],
			[
				"manag",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"timin",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"memeo",
				"networkplayground/src/IO/MemoryBitStream.cpp"
			],
			[
				"server.c",
				"networkplaygroundserver/src/networking/Server.cpp"
			],
			[
				"in",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"string",
				"networkplayground/src/networking/StringUtils.cpp"
			],
			[
				"input",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"stringu",
				"networkplayground/src/networking/StringUtils.cpp"
			],
			[
				"strin",
				"networkplayground/include/networking/StringUtils.h"
			],
			[
				".gi",
				".gitignore"
			],
			[
				"timin/",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"timing.h",
				"networkplayground/include/timing/Timing.h"
			],
			[
				"timing",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"timing.cp",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"inpumana",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"tim",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"movelist",
				"networkplayground/src/gameobjects/MoveList.cpp"
			],
			[
				"ti",
				"networkplayground/src/timing/Timing.cpp"
			],
			[
				"i",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"inputma",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"str",
				"networkplayground/src/networking/StringUtils.cpp"
			],
			[
				"inputpa",
				"networkplaygroundclient/src/input/InputManager.cpp"
			],
			[
				"netwokrser",
				"networkplaygroundserver/src/networking/NetworkManagerServer.cpp"
			],
			[
				"engin",
				"networkplayground/include/gameobjects/Engine.h"
			],
			[
				"networkcli",
				"networkplaygroundclient/include/networking/NetworkManagerClient.h"
			],
			[
				"networkma",
				"networkplayground/include/networking/NetworkManager.h"
			],
			[
				"netowkrmana",
				"networkplayground/include/networking/NetworkManager.h"
			],
			[
				"socketad",
				"networkplayground/src/networking/SocketAddress.cpp"
			],
			[
				"socekt",
				"networkplayground/include/networking/SocketAddress.h"
			],
			[
				"meme",
				"networkplayground/include/IO/MemoryBitStream.h"
			],
			[
				"netowrkmana",
				"networkplayground/include/networking/NetworkManager.h"
			],
			[
				"ma",
				"networkplaygroundserver/src/main.cpp"
			],
			[
				"network",
				"networkplayground/src/networking/NetworkManager.cpp"
			],
			[
				"netwrokmana",
				"networkplayground/src/networking/NetworkManager.cpp"
			],
			[
				"scr",
				"scratch.cpp"
			],
			[
				"netowrkingmana",
				"networkplayground/include/networking/NetworkManager.h"
			],
			[
				"physics",
				"falcon/core_lib/basic_physics.go"
			],
			[
				"clientha",
				"falcon/game/client_handlers.go"
			],
			[
				"game.go",
				"falcon/game/game.go"
			],
			[
				"game_loo",
				"falcon/game/game_loop.go"
			],
			[
				"gameloo",
				"falcon/game/game_loop.go"
			],
			[
				"game.js",
				"falcon/web/js/game.js"
			],
			[
				"client_me",
				"falcon/game/client_messages.go"
			],
			[
				"mess",
				"falcon/network/messages.go"
			],
			[
				"game_ob",
				"falcon/game/game_objs.go"
			],
			[
				"gameobj",
				"falcon/core_lib/game_objs.go"
			],
			[
				"game_lo",
				"falcon/game/game_loop.go"
			],
			[
				"game_o",
				"falcon/core_lib/game_objs.go"
			],
			[
				"game",
				"falcon/game/game_loop.go"
			],
			[
				"basi",
				"falcon/core_lib/basic_physics.go"
			],
			[
				"game.",
				"go_game/game/game_loop.go"
			],
			[
				"basic",
				"falcon/core_lib/basic_physics.go"
			],
			[
				"index",
				"falcon/web/index.html"
			],
			[
				"webso",
				"falcon/network/websockethandler.go"
			],
			[
				"clienth",
				"falcon/game/client_handlers.go"
			],
			[
				"inde",
				"falcon/web/index.html"
			],
			[
				"clei",
				"falcon/network/clients.go"
			],
			[
				"networ",
				"falcon/network/clients.go"
			],
			[
				"corli",
				"go_game/game/core_lib.go"
			],
			[
				"clients",
				"falcon/network/clients.go"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Library/Application Support/Sublime Text 3/Packages/betterfindnext/BetterFindNext.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sendOut",
				"SendOutgoingPackets"
			],
			[
				"GetandCl",
				"GetAndClearPendingMove"
			],
			[
				"SendOut",
				"SendOutgoingPackets"
			],
			[
				"isLast",
				"IsLastMoveTimestampDirty"
			],
			[
				"Draw",
				"Draw"
			],
			[
				"Log",
				"LOG"
			],
			[
				"Main",
				"main"
			],
			[
				"doClient",
				"DoClientSidePredictionAfterReplicationForLocalPlayer"
			],
			[
				"moveM",
				"MoveMessage"
			],
			[
				"move",
				"MoveMessage"
			],
			[
				"player",
				"Player"
			],
			[
				"mes",
				"Message"
			],
			[
				"newPLa",
				"NewPlayer"
			],
			[
				"newPla",
				"NewPlayer"
			],
			[
				"addgame",
				"AddGameObject"
			],
			[
				"baseR",
				"BaseRectMessage"
			],
			[
				"Update",
				"UpdateMessage"
			],
			[
				"addphy",
				"AddPhysicsComp"
			],
			[
				"addph",
				"AddPhysicsComp"
			],
			[
				"newcli",
				"NewClient"
			],
			[
				"Netw",
				"NetworkedGameObjects"
			],
			[
				"Pl",
				"Player"
			],
			[
				"clie",
				"ClientData"
			],
			[
				"clei",
				"ClientData"
			],
			[
				"newBa",
				"NewBackendController"
			],
			[
				"syn",
				"SyncClient"
			],
			[
				"syc",
				"SyncClient"
			],
			[
				"message",
				"Message"
			],
			[
				"mess",
				"Message"
			],
			[
				"build",
				"BuildAddMessage"
			],
			[
				"clien",
				"ClientData"
			],
			[
				"addme",
				"AddMessage"
			],
			[
				"pro",
				"ProcessEvents"
			],
			[
				"baseagme",
				"BaseGameObjData"
			],
			[
				"buildup",
				"BuildUpdateMessage"
			],
			[
				"sync",
				"SyncClient"
			],
			[
				"addUn",
				"addUnit: function( unit )"
			],
			[
				"cleanup",
				"cleanUpSocket"
			],
			[
				"readBr",
				"readBroadCastEvents"
			],
			[
				"broa",
				"broadCastGameObjects"
			],
			[
				"CLIENT",
				"ClientData"
			],
			[
				"cli",
				"ClientData"
			],
			[
				"addRe",
				"AddRequest"
			],
			[
				"updateEve",
				"UpdateEvent"
			],
			[
				"updat",
				"update: function()"
			],
			[
				"client",
				"ClientData"
			],
			[
				"update",
				"UpdateMessage"
			],
			[
				"addre",
				"AddRequest"
			],
			[
				"ob",
				"ObjectMessage"
			],
			[
				"Obje",
				"Object"
			],
			[
				"makeO",
				"MakeObjectFromJson"
			],
			[
				"make",
				"MakeObjectFromJson"
			],
			[
				"read",
				"ReadMoveMessage"
			],
			[
				"exclu",
				"ExcludeClient"
			],
			[
				"newgame",
				"NewGameObject"
			]
		],
		"width": 655.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 259.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
